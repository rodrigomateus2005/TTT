/**
 * Sismoura.Web.View
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { SiSMouraCoreEntityExactSalesExactSalesDescarteLeadParametro } from '../model/siSMouraCoreEntityExactSalesExactSalesDescarteLeadParametro';
import { SiSMouraCoreEntityExactSalesExactSalesErroRetorno } from '../model/siSMouraCoreEntityExactSalesExactSalesErroRetorno';
import { SiSMouraCoreEntityExactSalesExactSalesInserirUrlWebhookParametro } from '../model/siSMouraCoreEntityExactSalesExactSalesInserirUrlWebhookParametro';
import { SiSMouraCoreEntityExactSalesExactSalesReagendamentoParametro } from '../model/siSMouraCoreEntityExactSalesExactSalesReagendamentoParametro';
import { SiSMouraCoreEntityExactSalesExactSalesRemoverUrlWebhookParametro } from '../model/siSMouraCoreEntityExactSalesExactSalesRemoverUrlWebhookParametro';
import { SiSMouraCoreEntityExactSalesExactSalesUrlWebhookRetorno } from '../model/siSMouraCoreEntityExactSalesExactSalesUrlWebhookRetorno';
import { SiSMouraCoreEntityExactSalesExactSalesVendaLeadParametro } from '../model/siSMouraCoreEntityExactSalesExactSalesVendaLeadParametro';
import { SiSMouraCoreEntityExactSalesExactSalesWebhookParametro } from '../model/siSMouraCoreEntityExactSalesExactSalesWebhookParametro';
import { SismouraWebViewInternoSolicitacaoForcaFendaParametros } from '../model/sismouraWebViewInternoSolicitacaoForcaFendaParametros';
import { SismouraWebViewInternoSolicitacaoForcaVendaRetorno } from '../model/sismouraWebViewInternoSolicitacaoForcaVendaRetorno';
import { SismouraWebViewInternoSolicitacaoPDVParametros } from '../model/sismouraWebViewInternoSolicitacaoPDVParametros';
import { SismouraWebViewInternoSolicitacaoPDVRetorno } from '../model/sismouraWebViewInternoSolicitacaoPDVRetorno';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class InternoConfigService {

    protected basePath = 'http://localhost:38306';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * 
     * @param parametros 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public internoConfigCadastroLeadExactSales(parametros: SiSMouraCoreEntityExactSalesExactSalesWebhookParametro, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public internoConfigCadastroLeadExactSales(parametros: SiSMouraCoreEntityExactSalesExactSalesWebhookParametro, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public internoConfigCadastroLeadExactSales(parametros: SiSMouraCoreEntityExactSalesExactSalesWebhookParametro, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public internoConfigCadastroLeadExactSales(parametros: SiSMouraCoreEntityExactSalesExactSalesWebhookParametro, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (parametros === null || parametros === undefined) {
            throw new Error('Required parameter parametros was null or undefined when calling internoConfigCadastroLeadExactSales.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/api/InternoConfig/CadastroLeadExactSales`,
            parametros,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param parametros 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public internoConfigDescartarLeadExactSales(parametros: SiSMouraCoreEntityExactSalesExactSalesDescarteLeadParametro, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public internoConfigDescartarLeadExactSales(parametros: SiSMouraCoreEntityExactSalesExactSalesDescarteLeadParametro, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public internoConfigDescartarLeadExactSales(parametros: SiSMouraCoreEntityExactSalesExactSalesDescarteLeadParametro, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public internoConfigDescartarLeadExactSales(parametros: SiSMouraCoreEntityExactSalesExactSalesDescarteLeadParametro, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (parametros === null || parametros === undefined) {
            throw new Error('Required parameter parametros was null or undefined when calling internoConfigDescartarLeadExactSales.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/api/InternoConfig/DescartarLeadExactSales`,
            parametros,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param parametro 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public internoConfigInserirUrlExactSales(parametro: SiSMouraCoreEntityExactSalesExactSalesInserirUrlWebhookParametro, observe?: 'body', reportProgress?: boolean): Observable<SiSMouraCoreEntityExactSalesExactSalesErroRetorno>;
    public internoConfigInserirUrlExactSales(parametro: SiSMouraCoreEntityExactSalesExactSalesInserirUrlWebhookParametro, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SiSMouraCoreEntityExactSalesExactSalesErroRetorno>>;
    public internoConfigInserirUrlExactSales(parametro: SiSMouraCoreEntityExactSalesExactSalesInserirUrlWebhookParametro, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SiSMouraCoreEntityExactSalesExactSalesErroRetorno>>;
    public internoConfigInserirUrlExactSales(parametro: SiSMouraCoreEntityExactSalesExactSalesInserirUrlWebhookParametro, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (parametro === null || parametro === undefined) {
            throw new Error('Required parameter parametro was null or undefined when calling internoConfigInserirUrlExactSales.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<SiSMouraCoreEntityExactSalesExactSalesErroRetorno>(`${this.basePath}/api/InternoConfig/InserirUrlExactSales`,
            parametro,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public internoConfigListarUrlExactSales(observe?: 'body', reportProgress?: boolean): Observable<Array<SiSMouraCoreEntityExactSalesExactSalesUrlWebhookRetorno>>;
    public internoConfigListarUrlExactSales(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<SiSMouraCoreEntityExactSalesExactSalesUrlWebhookRetorno>>>;
    public internoConfigListarUrlExactSales(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<SiSMouraCoreEntityExactSalesExactSalesUrlWebhookRetorno>>>;
    public internoConfigListarUrlExactSales(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<SiSMouraCoreEntityExactSalesExactSalesUrlWebhookRetorno>>(`${this.basePath}/api/InternoConfig/ListarUrlExactSales`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param parametros 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public internoConfigReagendamentoExactSales(parametros: SiSMouraCoreEntityExactSalesExactSalesReagendamentoParametro, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public internoConfigReagendamentoExactSales(parametros: SiSMouraCoreEntityExactSalesExactSalesReagendamentoParametro, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public internoConfigReagendamentoExactSales(parametros: SiSMouraCoreEntityExactSalesExactSalesReagendamentoParametro, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public internoConfigReagendamentoExactSales(parametros: SiSMouraCoreEntityExactSalesExactSalesReagendamentoParametro, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (parametros === null || parametros === undefined) {
            throw new Error('Required parameter parametros was null or undefined when calling internoConfigReagendamentoExactSales.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<string>(`${this.basePath}/api/InternoConfig/ReagendamentoExactSales`,
            parametros,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param parametro 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public internoConfigRemoverUrlExact(parametro: SiSMouraCoreEntityExactSalesExactSalesRemoverUrlWebhookParametro, observe?: 'body', reportProgress?: boolean): Observable<SiSMouraCoreEntityExactSalesExactSalesErroRetorno>;
    public internoConfigRemoverUrlExact(parametro: SiSMouraCoreEntityExactSalesExactSalesRemoverUrlWebhookParametro, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SiSMouraCoreEntityExactSalesExactSalesErroRetorno>>;
    public internoConfigRemoverUrlExact(parametro: SiSMouraCoreEntityExactSalesExactSalesRemoverUrlWebhookParametro, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SiSMouraCoreEntityExactSalesExactSalesErroRetorno>>;
    public internoConfigRemoverUrlExact(parametro: SiSMouraCoreEntityExactSalesExactSalesRemoverUrlWebhookParametro, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (parametro === null || parametro === undefined) {
            throw new Error('Required parameter parametro was null or undefined when calling internoConfigRemoverUrlExact.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<SiSMouraCoreEntityExactSalesExactSalesErroRetorno>(`${this.basePath}/api/InternoConfig/RemoverUrlExact`,
            parametro,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param parametros 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public internoConfigSolicitacaoForcaVenda(parametros: SismouraWebViewInternoSolicitacaoForcaFendaParametros, observe?: 'body', reportProgress?: boolean): Observable<SismouraWebViewInternoSolicitacaoForcaVendaRetorno>;
    public internoConfigSolicitacaoForcaVenda(parametros: SismouraWebViewInternoSolicitacaoForcaFendaParametros, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SismouraWebViewInternoSolicitacaoForcaVendaRetorno>>;
    public internoConfigSolicitacaoForcaVenda(parametros: SismouraWebViewInternoSolicitacaoForcaFendaParametros, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SismouraWebViewInternoSolicitacaoForcaVendaRetorno>>;
    public internoConfigSolicitacaoForcaVenda(parametros: SismouraWebViewInternoSolicitacaoForcaFendaParametros, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (parametros === null || parametros === undefined) {
            throw new Error('Required parameter parametros was null or undefined when calling internoConfigSolicitacaoForcaVenda.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<SismouraWebViewInternoSolicitacaoForcaVendaRetorno>(`${this.basePath}/api/InternoConfig/SolicitacaoForcaVenda`,
            parametros,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param parametros 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public internoConfigSolicitacaoPDVMobile(parametros: SismouraWebViewInternoSolicitacaoPDVParametros, observe?: 'body', reportProgress?: boolean): Observable<SismouraWebViewInternoSolicitacaoPDVRetorno>;
    public internoConfigSolicitacaoPDVMobile(parametros: SismouraWebViewInternoSolicitacaoPDVParametros, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SismouraWebViewInternoSolicitacaoPDVRetorno>>;
    public internoConfigSolicitacaoPDVMobile(parametros: SismouraWebViewInternoSolicitacaoPDVParametros, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SismouraWebViewInternoSolicitacaoPDVRetorno>>;
    public internoConfigSolicitacaoPDVMobile(parametros: SismouraWebViewInternoSolicitacaoPDVParametros, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (parametros === null || parametros === undefined) {
            throw new Error('Required parameter parametros was null or undefined when calling internoConfigSolicitacaoPDVMobile.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<SismouraWebViewInternoSolicitacaoPDVRetorno>(`${this.basePath}/api/InternoConfig/SolicitacaoPDVMobile`,
            parametros,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param parametros 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public internoConfigVenderLeadExactSales(parametros: SiSMouraCoreEntityExactSalesExactSalesVendaLeadParametro, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public internoConfigVenderLeadExactSales(parametros: SiSMouraCoreEntityExactSalesExactSalesVendaLeadParametro, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public internoConfigVenderLeadExactSales(parametros: SiSMouraCoreEntityExactSalesExactSalesVendaLeadParametro, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public internoConfigVenderLeadExactSales(parametros: SiSMouraCoreEntityExactSalesExactSalesVendaLeadParametro, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (parametros === null || parametros === undefined) {
            throw new Error('Required parameter parametros was null or undefined when calling internoConfigVenderLeadExactSales.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/api/InternoConfig/VenderLeadExactSales`,
            parametros,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
