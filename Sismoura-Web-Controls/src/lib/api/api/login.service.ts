/**
 * Sismoura.Web.View
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { SismouraWebViewLoginControllerLoginParameter } from '../model/sismouraWebViewLoginControllerLoginParameter';
import { SismouraWebViewLoginControllerLoginRetorno } from '../model/sismouraWebViewLoginControllerLoginRetorno';
import { SismouraWebViewLoginControllerPreLoginRetorno } from '../model/sismouraWebViewLoginControllerPreLoginRetorno';
import { SismouraWebViewLoginControllerPreloginParameter } from '../model/sismouraWebViewLoginControllerPreloginParameter';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class LoginService {

    protected basePath = 'http://localhost:38306';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public loginCheckLoginSessao(observe?: 'body', reportProgress?: boolean): Observable<SismouraWebViewLoginControllerLoginRetorno>;
    public loginCheckLoginSessao(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SismouraWebViewLoginControllerLoginRetorno>>;
    public loginCheckLoginSessao(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SismouraWebViewLoginControllerLoginRetorno>>;
    public loginCheckLoginSessao(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<SismouraWebViewLoginControllerLoginRetorno>(`${this.basePath}/api/Login/CheckLoginSessao`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public loginCheckLoginSessao_1(observe?: 'body', reportProgress?: boolean): Observable<SismouraWebViewLoginControllerLoginRetorno>;
    public loginCheckLoginSessao_1(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SismouraWebViewLoginControllerLoginRetorno>>;
    public loginCheckLoginSessao_1(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SismouraWebViewLoginControllerLoginRetorno>>;
    public loginCheckLoginSessao_1(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<SismouraWebViewLoginControllerLoginRetorno>(`${this.basePath}/Login/CheckLoginSessao`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public loginHtml(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public loginHtml(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public loginHtml(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public loginHtml(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/api/Login/Html`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public loginHtml_2(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public loginHtml_2(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public loginHtml_2(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public loginHtml_2(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/Login/Html`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public loginIndex(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public loginIndex(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public loginIndex(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public loginIndex(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/api/Login/Index`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public loginIndex_3(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public loginIndex_3(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public loginIndex_3(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public loginIndex_3(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/Login/Index`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public loginJS(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public loginJS(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public loginJS(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public loginJS(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/api/Login/JS`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public loginJS_4(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public loginJS_4(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public loginJS_4(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public loginJS_4(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/Login/JS`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param loginParameter 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public loginLogin(loginParameter: SismouraWebViewLoginControllerLoginParameter, observe?: 'body', reportProgress?: boolean): Observable<SismouraWebViewLoginControllerLoginRetorno>;
    public loginLogin(loginParameter: SismouraWebViewLoginControllerLoginParameter, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SismouraWebViewLoginControllerLoginRetorno>>;
    public loginLogin(loginParameter: SismouraWebViewLoginControllerLoginParameter, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SismouraWebViewLoginControllerLoginRetorno>>;
    public loginLogin(loginParameter: SismouraWebViewLoginControllerLoginParameter, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (loginParameter === null || loginParameter === undefined) {
            throw new Error('Required parameter loginParameter was null or undefined when calling loginLogin.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<SismouraWebViewLoginControllerLoginRetorno>(`${this.basePath}/api/Login/Login`,
            loginParameter,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param loginParameter 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public loginLogin_5(loginParameter: SismouraWebViewLoginControllerLoginParameter, observe?: 'body', reportProgress?: boolean): Observable<SismouraWebViewLoginControllerLoginRetorno>;
    public loginLogin_5(loginParameter: SismouraWebViewLoginControllerLoginParameter, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SismouraWebViewLoginControllerLoginRetorno>>;
    public loginLogin_5(loginParameter: SismouraWebViewLoginControllerLoginParameter, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SismouraWebViewLoginControllerLoginRetorno>>;
    public loginLogin_5(loginParameter: SismouraWebViewLoginControllerLoginParameter, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (loginParameter === null || loginParameter === undefined) {
            throw new Error('Required parameter loginParameter was null or undefined when calling loginLogin_5.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<SismouraWebViewLoginControllerLoginRetorno>(`${this.basePath}/Login/Login`,
            loginParameter,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public loginLogout(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public loginLogout(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public loginLogout(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public loginLogout(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<any>(`${this.basePath}/api/Login/Logout`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public loginLogout_6(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public loginLogout_6(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public loginLogout_6(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public loginLogout_6(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<any>(`${this.basePath}/Login/Logout`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param preLoginParameter 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public loginPreLogin(preLoginParameter: SismouraWebViewLoginControllerPreloginParameter, observe?: 'body', reportProgress?: boolean): Observable<SismouraWebViewLoginControllerPreLoginRetorno>;
    public loginPreLogin(preLoginParameter: SismouraWebViewLoginControllerPreloginParameter, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SismouraWebViewLoginControllerPreLoginRetorno>>;
    public loginPreLogin(preLoginParameter: SismouraWebViewLoginControllerPreloginParameter, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SismouraWebViewLoginControllerPreLoginRetorno>>;
    public loginPreLogin(preLoginParameter: SismouraWebViewLoginControllerPreloginParameter, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (preLoginParameter === null || preLoginParameter === undefined) {
            throw new Error('Required parameter preLoginParameter was null or undefined when calling loginPreLogin.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<SismouraWebViewLoginControllerPreLoginRetorno>(`${this.basePath}/api/Login/PreLogin`,
            preLoginParameter,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param preLoginParameter 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public loginPreLogin_7(preLoginParameter: SismouraWebViewLoginControllerPreloginParameter, observe?: 'body', reportProgress?: boolean): Observable<SismouraWebViewLoginControllerPreLoginRetorno>;
    public loginPreLogin_7(preLoginParameter: SismouraWebViewLoginControllerPreloginParameter, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SismouraWebViewLoginControllerPreLoginRetorno>>;
    public loginPreLogin_7(preLoginParameter: SismouraWebViewLoginControllerPreloginParameter, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SismouraWebViewLoginControllerPreLoginRetorno>>;
    public loginPreLogin_7(preLoginParameter: SismouraWebViewLoginControllerPreloginParameter, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (preLoginParameter === null || preLoginParameter === undefined) {
            throw new Error('Required parameter preLoginParameter was null or undefined when calling loginPreLogin_7.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<SismouraWebViewLoginControllerPreLoginRetorno>(`${this.basePath}/Login/PreLogin`,
            preLoginParameter,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param conteudo 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public loginPreparacaoConteudo(conteudo: string, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public loginPreparacaoConteudo(conteudo: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public loginPreparacaoConteudo(conteudo: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public loginPreparacaoConteudo(conteudo: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (conteudo === null || conteudo === undefined) {
            throw new Error('Required parameter conteudo was null or undefined when calling loginPreparacaoConteudo.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (conteudo !== undefined && conteudo !== null) {
            queryParameters = queryParameters.set('conteudo', <any>conteudo);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<string>(`${this.basePath}/api/Login/PreparacaoConteudo`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param conteudo 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public loginPreparacaoConteudo_8(conteudo: string, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public loginPreparacaoConteudo_8(conteudo: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public loginPreparacaoConteudo_8(conteudo: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public loginPreparacaoConteudo_8(conteudo: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (conteudo === null || conteudo === undefined) {
            throw new Error('Required parameter conteudo was null or undefined when calling loginPreparacaoConteudo_8.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (conteudo !== undefined && conteudo !== null) {
            queryParameters = queryParameters.set('conteudo', <any>conteudo);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<string>(`${this.basePath}/Login/PreparacaoConteudo`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
