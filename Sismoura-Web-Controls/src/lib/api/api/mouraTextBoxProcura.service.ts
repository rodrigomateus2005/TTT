/**
 * Sismoura.Web.View
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { SiSMouraWebControlsMouraTextBoxProcuraControllerProcuraRetorno } from '../model/siSMouraWebControlsMouraTextBoxProcuraControllerProcuraRetorno';
import { SiSMouraWebControlsProcuraPai } from '../model/siSMouraWebControlsProcuraPai';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class MouraTextBoxProcuraService {

    protected basePath = 'http://localhost:38306';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * 
     * @param engine 
     * @param id 
     * @param somenteAtivos 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public mouraTextBoxProcuraGetByIDProcura(engine: string, id: string, somenteAtivos: boolean, observe?: 'body', reportProgress?: boolean): Observable<SiSMouraWebControlsMouraTextBoxProcuraControllerProcuraRetorno>;
    public mouraTextBoxProcuraGetByIDProcura(engine: string, id: string, somenteAtivos: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SiSMouraWebControlsMouraTextBoxProcuraControllerProcuraRetorno>>;
    public mouraTextBoxProcuraGetByIDProcura(engine: string, id: string, somenteAtivos: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SiSMouraWebControlsMouraTextBoxProcuraControllerProcuraRetorno>>;
    public mouraTextBoxProcuraGetByIDProcura(engine: string, id: string, somenteAtivos: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (engine === null || engine === undefined) {
            throw new Error('Required parameter engine was null or undefined when calling mouraTextBoxProcuraGetByIDProcura.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling mouraTextBoxProcuraGetByIDProcura.');
        }

        if (somenteAtivos === null || somenteAtivos === undefined) {
            throw new Error('Required parameter somenteAtivos was null or undefined when calling mouraTextBoxProcuraGetByIDProcura.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (engine !== undefined && engine !== null) {
            queryParameters = queryParameters.set('engine', <any>engine);
        }
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('id', <any>id);
        }
        if (somenteAtivos !== undefined && somenteAtivos !== null) {
            queryParameters = queryParameters.set('somenteAtivos', <any>somenteAtivos);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<SiSMouraWebControlsMouraTextBoxProcuraControllerProcuraRetorno>(`${this.basePath}/controles/Campos/MouraTextBoxProcura/GetByIDProcura`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param engine 
     * @param id 
     * @param somenteAtivos 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public mouraTextBoxProcuraGetByIDProcura_1(engine: string, id: string, somenteAtivos: boolean, observe?: 'body', reportProgress?: boolean): Observable<SiSMouraWebControlsMouraTextBoxProcuraControllerProcuraRetorno>;
    public mouraTextBoxProcuraGetByIDProcura_1(engine: string, id: string, somenteAtivos: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SiSMouraWebControlsMouraTextBoxProcuraControllerProcuraRetorno>>;
    public mouraTextBoxProcuraGetByIDProcura_1(engine: string, id: string, somenteAtivos: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SiSMouraWebControlsMouraTextBoxProcuraControllerProcuraRetorno>>;
    public mouraTextBoxProcuraGetByIDProcura_1(engine: string, id: string, somenteAtivos: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (engine === null || engine === undefined) {
            throw new Error('Required parameter engine was null or undefined when calling mouraTextBoxProcuraGetByIDProcura_1.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling mouraTextBoxProcuraGetByIDProcura_1.');
        }

        if (somenteAtivos === null || somenteAtivos === undefined) {
            throw new Error('Required parameter somenteAtivos was null or undefined when calling mouraTextBoxProcuraGetByIDProcura_1.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (engine !== undefined && engine !== null) {
            queryParameters = queryParameters.set('engine', <any>engine);
        }
        if (somenteAtivos !== undefined && somenteAtivos !== null) {
            queryParameters = queryParameters.set('somenteAtivos', <any>somenteAtivos);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<SiSMouraWebControlsMouraTextBoxProcuraControllerProcuraRetorno>(`${this.basePath}/api/MouraTextBoxProcura/GetByIDProcura/${encodeURIComponent(String(id))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param engine 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public mouraTextBoxProcuraGetProcuraEngine(engine: string, observe?: 'body', reportProgress?: boolean): Observable<SiSMouraWebControlsProcuraPai>;
    public mouraTextBoxProcuraGetProcuraEngine(engine: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SiSMouraWebControlsProcuraPai>>;
    public mouraTextBoxProcuraGetProcuraEngine(engine: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SiSMouraWebControlsProcuraPai>>;
    public mouraTextBoxProcuraGetProcuraEngine(engine: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (engine === null || engine === undefined) {
            throw new Error('Required parameter engine was null or undefined when calling mouraTextBoxProcuraGetProcuraEngine.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (engine !== undefined && engine !== null) {
            queryParameters = queryParameters.set('engine', <any>engine);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<SiSMouraWebControlsProcuraPai>(`${this.basePath}/controles/Campos/MouraTextBoxProcura/GetProcuraEngine`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param engine 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public mouraTextBoxProcuraGetProcuraEngine_2(engine: string, observe?: 'body', reportProgress?: boolean): Observable<SiSMouraWebControlsProcuraPai>;
    public mouraTextBoxProcuraGetProcuraEngine_2(engine: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SiSMouraWebControlsProcuraPai>>;
    public mouraTextBoxProcuraGetProcuraEngine_2(engine: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SiSMouraWebControlsProcuraPai>>;
    public mouraTextBoxProcuraGetProcuraEngine_2(engine: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (engine === null || engine === undefined) {
            throw new Error('Required parameter engine was null or undefined when calling mouraTextBoxProcuraGetProcuraEngine_2.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (engine !== undefined && engine !== null) {
            queryParameters = queryParameters.set('engine', <any>engine);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<SiSMouraWebControlsProcuraPai>(`${this.basePath}/api/MouraTextBoxProcura/GetProcuraEngine`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public mouraTextBoxProcuraIndex(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public mouraTextBoxProcuraIndex(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public mouraTextBoxProcuraIndex(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public mouraTextBoxProcuraIndex(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/controles/Campos/MouraTextBoxProcura/Index`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public mouraTextBoxProcuraIndex_3(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public mouraTextBoxProcuraIndex_3(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public mouraTextBoxProcuraIndex_3(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public mouraTextBoxProcuraIndex_3(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/api/MouraTextBoxProcura/Index`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
