/**
 * Sismoura.Web.View
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { SiSMouraCoreEntityCartaoMobileRetorno } from '../model/siSMouraCoreEntityCartaoMobileRetorno';
import { SiSMouraCoreEntityEmpresaMobileRetorno } from '../model/siSMouraCoreEntityEmpresaMobileRetorno';
import { SiSMouraCoreEntityProdutoMobileRetorno } from '../model/siSMouraCoreEntityProdutoMobileRetorno';
import { SiSMouraCoreEntityUsuarioMobileRetorno } from '../model/siSMouraCoreEntityUsuarioMobileRetorno';
import { SismouraWebViewGetVendaEsperaMobileRetorno } from '../model/sismouraWebViewGetVendaEsperaMobileRetorno';
import { SismouraWebViewGetVendaEsperaParametro } from '../model/sismouraWebViewGetVendaEsperaParametro';
import { SismouraWebViewGravarVendaMobileRetorno } from '../model/sismouraWebViewGravarVendaMobileRetorno';
import { SismouraWebViewGravarVendaParametroMobile } from '../model/sismouraWebViewGravarVendaParametroMobile';
import { SismouraWebViewParametrosPdvMobile } from '../model/sismouraWebViewParametrosPdvMobile';
import { SismouraWebViewParametrosVendaEsperaMobile } from '../model/sismouraWebViewParametrosVendaEsperaMobile';
import { SismouraWebViewRemoverVendaEsperaMobileRetorno } from '../model/sismouraWebViewRemoverVendaEsperaMobileRetorno';
import { SismouraWebViewRemoverVendaEsperaParametro } from '../model/sismouraWebViewRemoverVendaEsperaParametro';
import { SismouraWebViewVendaEsperaMobileRetorno } from '../model/sismouraWebViewVendaEsperaMobileRetorno';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class PdvMobileService {

    protected basePath = 'http://localhost:38306';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * 
     * @param ultimaAtualizacao 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public pdvMobileGetCartaoMobile(ultimaAtualizacao: SismouraWebViewParametrosPdvMobile, observe?: 'body', reportProgress?: boolean): Observable<Array<SiSMouraCoreEntityCartaoMobileRetorno>>;
    public pdvMobileGetCartaoMobile(ultimaAtualizacao: SismouraWebViewParametrosPdvMobile, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<SiSMouraCoreEntityCartaoMobileRetorno>>>;
    public pdvMobileGetCartaoMobile(ultimaAtualizacao: SismouraWebViewParametrosPdvMobile, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<SiSMouraCoreEntityCartaoMobileRetorno>>>;
    public pdvMobileGetCartaoMobile(ultimaAtualizacao: SismouraWebViewParametrosPdvMobile, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (ultimaAtualizacao === null || ultimaAtualizacao === undefined) {
            throw new Error('Required parameter ultimaAtualizacao was null or undefined when calling pdvMobileGetCartaoMobile.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Array<SiSMouraCoreEntityCartaoMobileRetorno>>(`${this.basePath}/api/PdvMobile/GetCartaoMobile`,
            ultimaAtualizacao,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param ultimaAtualizacao 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public pdvMobileGetEmpresaMobile(ultimaAtualizacao: SismouraWebViewParametrosPdvMobile, observe?: 'body', reportProgress?: boolean): Observable<SiSMouraCoreEntityEmpresaMobileRetorno>;
    public pdvMobileGetEmpresaMobile(ultimaAtualizacao: SismouraWebViewParametrosPdvMobile, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SiSMouraCoreEntityEmpresaMobileRetorno>>;
    public pdvMobileGetEmpresaMobile(ultimaAtualizacao: SismouraWebViewParametrosPdvMobile, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SiSMouraCoreEntityEmpresaMobileRetorno>>;
    public pdvMobileGetEmpresaMobile(ultimaAtualizacao: SismouraWebViewParametrosPdvMobile, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (ultimaAtualizacao === null || ultimaAtualizacao === undefined) {
            throw new Error('Required parameter ultimaAtualizacao was null or undefined when calling pdvMobileGetEmpresaMobile.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<SiSMouraCoreEntityEmpresaMobileRetorno>(`${this.basePath}/api/PdvMobile/GetEmpresaMobile`,
            ultimaAtualizacao,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param ultimaAtualizacao 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public pdvMobileGetProdutosMobile(ultimaAtualizacao: SismouraWebViewParametrosPdvMobile, observe?: 'body', reportProgress?: boolean): Observable<Array<SiSMouraCoreEntityProdutoMobileRetorno>>;
    public pdvMobileGetProdutosMobile(ultimaAtualizacao: SismouraWebViewParametrosPdvMobile, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<SiSMouraCoreEntityProdutoMobileRetorno>>>;
    public pdvMobileGetProdutosMobile(ultimaAtualizacao: SismouraWebViewParametrosPdvMobile, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<SiSMouraCoreEntityProdutoMobileRetorno>>>;
    public pdvMobileGetProdutosMobile(ultimaAtualizacao: SismouraWebViewParametrosPdvMobile, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (ultimaAtualizacao === null || ultimaAtualizacao === undefined) {
            throw new Error('Required parameter ultimaAtualizacao was null or undefined when calling pdvMobileGetProdutosMobile.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Array<SiSMouraCoreEntityProdutoMobileRetorno>>(`${this.basePath}/api/PdvMobile/GetProdutosMobile`,
            ultimaAtualizacao,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param parametros 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public pdvMobileGetUsuariosMobile(parametros: SismouraWebViewParametrosPdvMobile, observe?: 'body', reportProgress?: boolean): Observable<Array<SiSMouraCoreEntityUsuarioMobileRetorno>>;
    public pdvMobileGetUsuariosMobile(parametros: SismouraWebViewParametrosPdvMobile, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<SiSMouraCoreEntityUsuarioMobileRetorno>>>;
    public pdvMobileGetUsuariosMobile(parametros: SismouraWebViewParametrosPdvMobile, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<SiSMouraCoreEntityUsuarioMobileRetorno>>>;
    public pdvMobileGetUsuariosMobile(parametros: SismouraWebViewParametrosPdvMobile, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (parametros === null || parametros === undefined) {
            throw new Error('Required parameter parametros was null or undefined when calling pdvMobileGetUsuariosMobile.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Array<SiSMouraCoreEntityUsuarioMobileRetorno>>(`${this.basePath}/api/PdvMobile/GetUsuariosMobile`,
            parametros,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param parametro 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public pdvMobileGetVendaEsperaMobile(parametro: SismouraWebViewGetVendaEsperaParametro, observe?: 'body', reportProgress?: boolean): Observable<SismouraWebViewGetVendaEsperaMobileRetorno>;
    public pdvMobileGetVendaEsperaMobile(parametro: SismouraWebViewGetVendaEsperaParametro, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SismouraWebViewGetVendaEsperaMobileRetorno>>;
    public pdvMobileGetVendaEsperaMobile(parametro: SismouraWebViewGetVendaEsperaParametro, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SismouraWebViewGetVendaEsperaMobileRetorno>>;
    public pdvMobileGetVendaEsperaMobile(parametro: SismouraWebViewGetVendaEsperaParametro, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (parametro === null || parametro === undefined) {
            throw new Error('Required parameter parametro was null or undefined when calling pdvMobileGetVendaEsperaMobile.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<SismouraWebViewGetVendaEsperaMobileRetorno>(`${this.basePath}/api/PdvMobile/GetVendaEsperaMobile`,
            parametro,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param parametro 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public pdvMobileGravarVenda(parametro: SismouraWebViewGravarVendaParametroMobile, observe?: 'body', reportProgress?: boolean): Observable<SismouraWebViewGravarVendaMobileRetorno>;
    public pdvMobileGravarVenda(parametro: SismouraWebViewGravarVendaParametroMobile, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SismouraWebViewGravarVendaMobileRetorno>>;
    public pdvMobileGravarVenda(parametro: SismouraWebViewGravarVendaParametroMobile, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SismouraWebViewGravarVendaMobileRetorno>>;
    public pdvMobileGravarVenda(parametro: SismouraWebViewGravarVendaParametroMobile, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (parametro === null || parametro === undefined) {
            throw new Error('Required parameter parametro was null or undefined when calling pdvMobileGravarVenda.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<SismouraWebViewGravarVendaMobileRetorno>(`${this.basePath}/api/PdvMobile/GravarVenda`,
            parametro,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param parametro 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public pdvMobileGravarVendaEsperaMobile(parametro: SismouraWebViewParametrosVendaEsperaMobile, observe?: 'body', reportProgress?: boolean): Observable<SismouraWebViewVendaEsperaMobileRetorno>;
    public pdvMobileGravarVendaEsperaMobile(parametro: SismouraWebViewParametrosVendaEsperaMobile, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SismouraWebViewVendaEsperaMobileRetorno>>;
    public pdvMobileGravarVendaEsperaMobile(parametro: SismouraWebViewParametrosVendaEsperaMobile, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SismouraWebViewVendaEsperaMobileRetorno>>;
    public pdvMobileGravarVendaEsperaMobile(parametro: SismouraWebViewParametrosVendaEsperaMobile, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (parametro === null || parametro === undefined) {
            throw new Error('Required parameter parametro was null or undefined when calling pdvMobileGravarVendaEsperaMobile.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<SismouraWebViewVendaEsperaMobileRetorno>(`${this.basePath}/api/PdvMobile/GravarVendaEsperaMobile`,
            parametro,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param parametro 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public pdvMobileRemoverVendasEspera(parametro: SismouraWebViewRemoverVendaEsperaParametro, observe?: 'body', reportProgress?: boolean): Observable<SismouraWebViewRemoverVendaEsperaMobileRetorno>;
    public pdvMobileRemoverVendasEspera(parametro: SismouraWebViewRemoverVendaEsperaParametro, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SismouraWebViewRemoverVendaEsperaMobileRetorno>>;
    public pdvMobileRemoverVendasEspera(parametro: SismouraWebViewRemoverVendaEsperaParametro, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SismouraWebViewRemoverVendaEsperaMobileRetorno>>;
    public pdvMobileRemoverVendasEspera(parametro: SismouraWebViewRemoverVendaEsperaParametro, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (parametro === null || parametro === undefined) {
            throw new Error('Required parameter parametro was null or undefined when calling pdvMobileRemoverVendasEspera.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<SismouraWebViewRemoverVendaEsperaMobileRetorno>(`${this.basePath}/api/PdvMobile/RemoverVendasEspera`,
            parametro,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
