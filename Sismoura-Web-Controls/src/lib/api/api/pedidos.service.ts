/**
 * Sismoura.Web.View
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { SismouraWebViewModelsPedidosCartao } from '../model/sismouraWebViewModelsPedidosCartao';
import { SismouraWebViewModelsPedidosCidade } from '../model/sismouraWebViewModelsPedidosCidade';
import { SismouraWebViewModelsPedidosConexao } from '../model/sismouraWebViewModelsPedidosConexao';
import { SismouraWebViewModelsPedidosConfiguracoesOrcamentoTablet } from '../model/sismouraWebViewModelsPedidosConfiguracoesOrcamentoTablet';
import { SismouraWebViewModelsPedidosContasReceber } from '../model/sismouraWebViewModelsPedidosContasReceber';
import { SismouraWebViewModelsPedidosEmpresaPedido } from '../model/sismouraWebViewModelsPedidosEmpresaPedido';
import { SismouraWebViewModelsPedidosEstoque } from '../model/sismouraWebViewModelsPedidosEstoque';
import { SismouraWebViewModelsPedidosFormaPagamentoDiasPedido } from '../model/sismouraWebViewModelsPedidosFormaPagamentoDiasPedido';
import { SismouraWebViewModelsPedidosFormaPagamentoPedido } from '../model/sismouraWebViewModelsPedidosFormaPagamentoPedido';
import { SismouraWebViewModelsPedidosGrupoProduto } from '../model/sismouraWebViewModelsPedidosGrupoProduto';
import { SismouraWebViewModelsPedidosListaPreco } from '../model/sismouraWebViewModelsPedidosListaPreco';
import { SismouraWebViewModelsPedidosOrcamentoFuncaoBloquear } from '../model/sismouraWebViewModelsPedidosOrcamentoFuncaoBloquear';
import { SismouraWebViewModelsPedidosOrcamentoFuncaoBloquearPermissao } from '../model/sismouraWebViewModelsPedidosOrcamentoFuncaoBloquearPermissao';
import { SismouraWebViewModelsPedidosOrcamentoPedido } from '../model/sismouraWebViewModelsPedidosOrcamentoPedido';
import { SismouraWebViewModelsPedidosPessoaPedido } from '../model/sismouraWebViewModelsPedidosPessoaPedido';
import { SismouraWebViewModelsPedidosProduto } from '../model/sismouraWebViewModelsPedidosProduto';
import { SismouraWebViewModelsPedidosProdutoPreco } from '../model/sismouraWebViewModelsPedidosProdutoPreco';
import { SismouraWebViewModelsPedidosRotaVenda } from '../model/sismouraWebViewModelsPedidosRotaVenda';
import { SismouraWebViewModelsPedidosSituacaoOrcamento } from '../model/sismouraWebViewModelsPedidosSituacaoOrcamento';
import { SismouraWebViewModelsPedidosUsuarioGrupoPedido } from '../model/sismouraWebViewModelsPedidosUsuarioGrupoPedido';
import { SismouraWebViewModelsPedidosUsuarioPedido } from '../model/sismouraWebViewModelsPedidosUsuarioPedido';
import { SismouraWebViewModelsPedidosZonaVenda } from '../model/sismouraWebViewModelsPedidosZonaVenda';
import { SismouraWebViewMouraUniversalWebServiceControllersPedidosControllerEnvioClienteParametro } from '../model/sismouraWebViewMouraUniversalWebServiceControllersPedidosControllerEnvioClienteParametro';
import { SismouraWebViewMouraUniversalWebServiceControllersPedidosControllerEnvioOrcamentoParametro } from '../model/sismouraWebViewMouraUniversalWebServiceControllersPedidosControllerEnvioOrcamentoParametro';
import { SismouraWebViewMouraUniversalWebServiceControllersPedidosControllerRelacaoPendenciasClienteParametro } from '../model/sismouraWebViewMouraUniversalWebServiceControllersPedidosControllerRelacaoPendenciasClienteParametro';
import { SismouraWebViewOrcamentoPendenciasCliente } from '../model/sismouraWebViewOrcamentoPendenciasCliente';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class PedidosService {

    protected basePath = 'http://localhost:38306';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * 
     * @param parametros 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public pedidosEnviarClientes(parametros: SismouraWebViewMouraUniversalWebServiceControllersPedidosControllerEnvioClienteParametro, observe?: 'body', reportProgress?: boolean): Observable<Array<SismouraWebViewModelsPedidosPessoaPedido>>;
    public pedidosEnviarClientes(parametros: SismouraWebViewMouraUniversalWebServiceControllersPedidosControllerEnvioClienteParametro, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<SismouraWebViewModelsPedidosPessoaPedido>>>;
    public pedidosEnviarClientes(parametros: SismouraWebViewMouraUniversalWebServiceControllersPedidosControllerEnvioClienteParametro, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<SismouraWebViewModelsPedidosPessoaPedido>>>;
    public pedidosEnviarClientes(parametros: SismouraWebViewMouraUniversalWebServiceControllersPedidosControllerEnvioClienteParametro, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (parametros === null || parametros === undefined) {
            throw new Error('Required parameter parametros was null or undefined when calling pedidosEnviarClientes.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Array<SismouraWebViewModelsPedidosPessoaPedido>>(`${this.basePath}/api/Pedidos/EnviarClientes`,
            parametros,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param parametros 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public pedidosEnviarOrcamentos(parametros: SismouraWebViewMouraUniversalWebServiceControllersPedidosControllerEnvioOrcamentoParametro, observe?: 'body', reportProgress?: boolean): Observable<Array<SismouraWebViewModelsPedidosOrcamentoPedido>>;
    public pedidosEnviarOrcamentos(parametros: SismouraWebViewMouraUniversalWebServiceControllersPedidosControllerEnvioOrcamentoParametro, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<SismouraWebViewModelsPedidosOrcamentoPedido>>>;
    public pedidosEnviarOrcamentos(parametros: SismouraWebViewMouraUniversalWebServiceControllersPedidosControllerEnvioOrcamentoParametro, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<SismouraWebViewModelsPedidosOrcamentoPedido>>>;
    public pedidosEnviarOrcamentos(parametros: SismouraWebViewMouraUniversalWebServiceControllersPedidosControllerEnvioOrcamentoParametro, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (parametros === null || parametros === undefined) {
            throw new Error('Required parameter parametros was null or undefined when calling pedidosEnviarOrcamentos.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Array<SismouraWebViewModelsPedidosOrcamentoPedido>>(`${this.basePath}/api/Pedidos/EnviarOrcamentos`,
            parametros,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public pedidosGetApiVersao(observe?: 'body', reportProgress?: boolean): Observable<string>;
    public pedidosGetApiVersao(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public pedidosGetApiVersao(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public pedidosGetApiVersao(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<string>(`${this.basePath}/api/Pedidos/GetApiVersao`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public pedidosGetCartoes(observe?: 'body', reportProgress?: boolean): Observable<Array<SismouraWebViewModelsPedidosCartao>>;
    public pedidosGetCartoes(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<SismouraWebViewModelsPedidosCartao>>>;
    public pedidosGetCartoes(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<SismouraWebViewModelsPedidosCartao>>>;
    public pedidosGetCartoes(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];

        return this.httpClient.get<Array<SismouraWebViewModelsPedidosCartao>>(`${this.basePath}/api/Pedidos/GetCartoes`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public pedidosGetCidades(observe?: 'body', reportProgress?: boolean): Observable<Array<SismouraWebViewModelsPedidosCidade>>;
    public pedidosGetCidades(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<SismouraWebViewModelsPedidosCidade>>>;
    public pedidosGetCidades(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<SismouraWebViewModelsPedidosCidade>>>;
    public pedidosGetCidades(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];

        return this.httpClient.get<Array<SismouraWebViewModelsPedidosCidade>>(`${this.basePath}/api/Pedidos/GetCidades`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param parametrosConexaoConexaoInternet 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public pedidosGetConexao(parametrosConexaoConexaoInternet?: boolean, observe?: 'body', reportProgress?: boolean): Observable<SismouraWebViewModelsPedidosConexao>;
    public pedidosGetConexao(parametrosConexaoConexaoInternet?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SismouraWebViewModelsPedidosConexao>>;
    public pedidosGetConexao(parametrosConexaoConexaoInternet?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SismouraWebViewModelsPedidosConexao>>;
    public pedidosGetConexao(parametrosConexaoConexaoInternet?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (parametrosConexaoConexaoInternet !== undefined && parametrosConexaoConexaoInternet !== null) {
            queryParameters = queryParameters.set('Parametros.conexao.conexaoInternet', <any>parametrosConexaoConexaoInternet);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];

        return this.httpClient.get<SismouraWebViewModelsPedidosConexao>(`${this.basePath}/api/Pedidos/GetConexao`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param parametrosConexaoConexaoInternet 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public pedidosGetConfiguracoes(parametrosConexaoConexaoInternet?: boolean, observe?: 'body', reportProgress?: boolean): Observable<SismouraWebViewModelsPedidosConfiguracoesOrcamentoTablet>;
    public pedidosGetConfiguracoes(parametrosConexaoConexaoInternet?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SismouraWebViewModelsPedidosConfiguracoesOrcamentoTablet>>;
    public pedidosGetConfiguracoes(parametrosConexaoConexaoInternet?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SismouraWebViewModelsPedidosConfiguracoesOrcamentoTablet>>;
    public pedidosGetConfiguracoes(parametrosConexaoConexaoInternet?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (parametrosConexaoConexaoInternet !== undefined && parametrosConexaoConexaoInternet !== null) {
            queryParameters = queryParameters.set('Parametros.conexao.conexaoInternet', <any>parametrosConexaoConexaoInternet);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];

        return this.httpClient.get<SismouraWebViewModelsPedidosConfiguracoesOrcamentoTablet>(`${this.basePath}/api/Pedidos/GetConfiguracoes`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public pedidosGetContasReceber(observe?: 'body', reportProgress?: boolean): Observable<Array<SismouraWebViewModelsPedidosContasReceber>>;
    public pedidosGetContasReceber(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<SismouraWebViewModelsPedidosContasReceber>>>;
    public pedidosGetContasReceber(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<SismouraWebViewModelsPedidosContasReceber>>>;
    public pedidosGetContasReceber(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];

        return this.httpClient.get<Array<SismouraWebViewModelsPedidosContasReceber>>(`${this.basePath}/api/Pedidos/GetContasReceber`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public pedidosGetEmpresas(observe?: 'body', reportProgress?: boolean): Observable<Array<SismouraWebViewModelsPedidosEmpresaPedido>>;
    public pedidosGetEmpresas(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<SismouraWebViewModelsPedidosEmpresaPedido>>>;
    public pedidosGetEmpresas(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<SismouraWebViewModelsPedidosEmpresaPedido>>>;
    public pedidosGetEmpresas(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];

        return this.httpClient.get<Array<SismouraWebViewModelsPedidosEmpresaPedido>>(`${this.basePath}/api/Pedidos/GetEmpresas`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param parametrosDeposito 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public pedidosGetEstoques(parametrosDeposito?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<SismouraWebViewModelsPedidosEstoque>>;
    public pedidosGetEstoques(parametrosDeposito?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<SismouraWebViewModelsPedidosEstoque>>>;
    public pedidosGetEstoques(parametrosDeposito?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<SismouraWebViewModelsPedidosEstoque>>>;
    public pedidosGetEstoques(parametrosDeposito?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (parametrosDeposito !== undefined && parametrosDeposito !== null) {
            queryParameters = queryParameters.set('Parametros.deposito', <any>parametrosDeposito);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<SismouraWebViewModelsPedidosEstoque>>(`${this.basePath}/api/Pedidos/GetEstoques`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public pedidosGetFormasPagamentos(observe?: 'body', reportProgress?: boolean): Observable<Array<SismouraWebViewModelsPedidosFormaPagamentoPedido>>;
    public pedidosGetFormasPagamentos(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<SismouraWebViewModelsPedidosFormaPagamentoPedido>>>;
    public pedidosGetFormasPagamentos(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<SismouraWebViewModelsPedidosFormaPagamentoPedido>>>;
    public pedidosGetFormasPagamentos(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];

        return this.httpClient.get<Array<SismouraWebViewModelsPedidosFormaPagamentoPedido>>(`${this.basePath}/api/Pedidos/GetFormasPagamentos`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public pedidosGetFormasPagamentosDias(observe?: 'body', reportProgress?: boolean): Observable<Array<SismouraWebViewModelsPedidosFormaPagamentoDiasPedido>>;
    public pedidosGetFormasPagamentosDias(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<SismouraWebViewModelsPedidosFormaPagamentoDiasPedido>>>;
    public pedidosGetFormasPagamentosDias(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<SismouraWebViewModelsPedidosFormaPagamentoDiasPedido>>>;
    public pedidosGetFormasPagamentosDias(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];

        return this.httpClient.get<Array<SismouraWebViewModelsPedidosFormaPagamentoDiasPedido>>(`${this.basePath}/api/Pedidos/GetFormasPagamentosDias`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public pedidosGetGruposProdutos(observe?: 'body', reportProgress?: boolean): Observable<Array<SismouraWebViewModelsPedidosGrupoProduto>>;
    public pedidosGetGruposProdutos(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<SismouraWebViewModelsPedidosGrupoProduto>>>;
    public pedidosGetGruposProdutos(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<SismouraWebViewModelsPedidosGrupoProduto>>>;
    public pedidosGetGruposProdutos(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];

        return this.httpClient.get<Array<SismouraWebViewModelsPedidosGrupoProduto>>(`${this.basePath}/api/Pedidos/GetGruposProdutos`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public pedidosGetListasPrecos(observe?: 'body', reportProgress?: boolean): Observable<Array<SismouraWebViewModelsPedidosListaPreco>>;
    public pedidosGetListasPrecos(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<SismouraWebViewModelsPedidosListaPreco>>>;
    public pedidosGetListasPrecos(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<SismouraWebViewModelsPedidosListaPreco>>>;
    public pedidosGetListasPrecos(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];

        return this.httpClient.get<Array<SismouraWebViewModelsPedidosListaPreco>>(`${this.basePath}/api/Pedidos/GetListasPrecos`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public pedidosGetOrcamentoFuncaoBloquear(observe?: 'body', reportProgress?: boolean): Observable<Array<SismouraWebViewModelsPedidosOrcamentoFuncaoBloquear>>;
    public pedidosGetOrcamentoFuncaoBloquear(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<SismouraWebViewModelsPedidosOrcamentoFuncaoBloquear>>>;
    public pedidosGetOrcamentoFuncaoBloquear(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<SismouraWebViewModelsPedidosOrcamentoFuncaoBloquear>>>;
    public pedidosGetOrcamentoFuncaoBloquear(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];

        return this.httpClient.get<Array<SismouraWebViewModelsPedidosOrcamentoFuncaoBloquear>>(`${this.basePath}/api/Pedidos/GetOrcamentoFuncaoBloquear`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public pedidosGetOrcamentoFuncaoBloquearPermissa(observe?: 'body', reportProgress?: boolean): Observable<Array<SismouraWebViewModelsPedidosOrcamentoFuncaoBloquearPermissao>>;
    public pedidosGetOrcamentoFuncaoBloquearPermissa(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<SismouraWebViewModelsPedidosOrcamentoFuncaoBloquearPermissao>>>;
    public pedidosGetOrcamentoFuncaoBloquearPermissa(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<SismouraWebViewModelsPedidosOrcamentoFuncaoBloquearPermissao>>>;
    public pedidosGetOrcamentoFuncaoBloquearPermissa(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];

        return this.httpClient.get<Array<SismouraWebViewModelsPedidosOrcamentoFuncaoBloquearPermissao>>(`${this.basePath}/api/Pedidos/GetOrcamentoFuncaoBloquearPermissa`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public pedidosGetOrcamentos(observe?: 'body', reportProgress?: boolean): Observable<Array<SismouraWebViewModelsPedidosOrcamentoPedido>>;
    public pedidosGetOrcamentos(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<SismouraWebViewModelsPedidosOrcamentoPedido>>>;
    public pedidosGetOrcamentos(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<SismouraWebViewModelsPedidosOrcamentoPedido>>>;
    public pedidosGetOrcamentos(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];

        return this.httpClient.get<Array<SismouraWebViewModelsPedidosOrcamentoPedido>>(`${this.basePath}/api/Pedidos/GetOrcamentos`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public pedidosGetPessoas(observe?: 'body', reportProgress?: boolean): Observable<Array<SismouraWebViewModelsPedidosPessoaPedido>>;
    public pedidosGetPessoas(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<SismouraWebViewModelsPedidosPessoaPedido>>>;
    public pedidosGetPessoas(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<SismouraWebViewModelsPedidosPessoaPedido>>>;
    public pedidosGetPessoas(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];

        return this.httpClient.get<Array<SismouraWebViewModelsPedidosPessoaPedido>>(`${this.basePath}/api/Pedidos/GetPessoas`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param parametrosCodProduto 
     * @param parametrosDeposito 
     * @param parametrosGrupo 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public pedidosGetProdutos(parametrosCodProduto?: number, parametrosDeposito?: number, parametrosGrupo?: Array<number>, observe?: 'body', reportProgress?: boolean): Observable<Array<SismouraWebViewModelsPedidosProduto>>;
    public pedidosGetProdutos(parametrosCodProduto?: number, parametrosDeposito?: number, parametrosGrupo?: Array<number>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<SismouraWebViewModelsPedidosProduto>>>;
    public pedidosGetProdutos(parametrosCodProduto?: number, parametrosDeposito?: number, parametrosGrupo?: Array<number>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<SismouraWebViewModelsPedidosProduto>>>;
    public pedidosGetProdutos(parametrosCodProduto?: number, parametrosDeposito?: number, parametrosGrupo?: Array<number>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (parametrosCodProduto !== undefined && parametrosCodProduto !== null) {
            queryParameters = queryParameters.set('Parametros.codProduto', <any>parametrosCodProduto);
        }
        if (parametrosDeposito !== undefined && parametrosDeposito !== null) {
            queryParameters = queryParameters.set('Parametros.deposito', <any>parametrosDeposito);
        }
        if (parametrosGrupo) {
            parametrosGrupo.forEach((element) => {
                queryParameters = queryParameters.append('Parametros.grupo', <any>element);
            })
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<SismouraWebViewModelsPedidosProduto>>(`${this.basePath}/api/Pedidos/GetProdutos`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public pedidosGetProdutosPrecos(observe?: 'body', reportProgress?: boolean): Observable<Array<SismouraWebViewModelsPedidosProdutoPreco>>;
    public pedidosGetProdutosPrecos(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<SismouraWebViewModelsPedidosProdutoPreco>>>;
    public pedidosGetProdutosPrecos(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<SismouraWebViewModelsPedidosProdutoPreco>>>;
    public pedidosGetProdutosPrecos(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];

        return this.httpClient.get<Array<SismouraWebViewModelsPedidosProdutoPreco>>(`${this.basePath}/api/Pedidos/GetProdutosPrecos`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public pedidosGetRotaVenda(observe?: 'body', reportProgress?: boolean): Observable<Array<SismouraWebViewModelsPedidosRotaVenda>>;
    public pedidosGetRotaVenda(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<SismouraWebViewModelsPedidosRotaVenda>>>;
    public pedidosGetRotaVenda(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<SismouraWebViewModelsPedidosRotaVenda>>>;
    public pedidosGetRotaVenda(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];

        return this.httpClient.get<Array<SismouraWebViewModelsPedidosRotaVenda>>(`${this.basePath}/api/Pedidos/GetRotaVenda`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public pedidosGetSituacaoOrcamento(observe?: 'body', reportProgress?: boolean): Observable<Array<SismouraWebViewModelsPedidosSituacaoOrcamento>>;
    public pedidosGetSituacaoOrcamento(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<SismouraWebViewModelsPedidosSituacaoOrcamento>>>;
    public pedidosGetSituacaoOrcamento(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<SismouraWebViewModelsPedidosSituacaoOrcamento>>>;
    public pedidosGetSituacaoOrcamento(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];

        return this.httpClient.get<Array<SismouraWebViewModelsPedidosSituacaoOrcamento>>(`${this.basePath}/api/Pedidos/GetSituacaoOrcamento`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public pedidosGetUsuarioGrupos(observe?: 'body', reportProgress?: boolean): Observable<Array<SismouraWebViewModelsPedidosUsuarioGrupoPedido>>;
    public pedidosGetUsuarioGrupos(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<SismouraWebViewModelsPedidosUsuarioGrupoPedido>>>;
    public pedidosGetUsuarioGrupos(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<SismouraWebViewModelsPedidosUsuarioGrupoPedido>>>;
    public pedidosGetUsuarioGrupos(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];

        return this.httpClient.get<Array<SismouraWebViewModelsPedidosUsuarioGrupoPedido>>(`${this.basePath}/api/Pedidos/GetUsuarioGrupos`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public pedidosGetUsuarios(observe?: 'body', reportProgress?: boolean): Observable<Array<SismouraWebViewModelsPedidosUsuarioPedido>>;
    public pedidosGetUsuarios(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<SismouraWebViewModelsPedidosUsuarioPedido>>>;
    public pedidosGetUsuarios(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<SismouraWebViewModelsPedidosUsuarioPedido>>>;
    public pedidosGetUsuarios(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];

        return this.httpClient.get<Array<SismouraWebViewModelsPedidosUsuarioPedido>>(`${this.basePath}/api/Pedidos/GetUsuarios`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public pedidosGetZonasVendas(observe?: 'body', reportProgress?: boolean): Observable<Array<SismouraWebViewModelsPedidosZonaVenda>>;
    public pedidosGetZonasVendas(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<SismouraWebViewModelsPedidosZonaVenda>>>;
    public pedidosGetZonasVendas(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<SismouraWebViewModelsPedidosZonaVenda>>>;
    public pedidosGetZonasVendas(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];

        return this.httpClient.get<Array<SismouraWebViewModelsPedidosZonaVenda>>(`${this.basePath}/api/Pedidos/GetZonasVendas`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param parametros 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public pedidosRelacaoPendenciasCliente(parametros: SismouraWebViewMouraUniversalWebServiceControllersPedidosControllerRelacaoPendenciasClienteParametro, observe?: 'body', reportProgress?: boolean): Observable<Array<SismouraWebViewOrcamentoPendenciasCliente>>;
    public pedidosRelacaoPendenciasCliente(parametros: SismouraWebViewMouraUniversalWebServiceControllersPedidosControllerRelacaoPendenciasClienteParametro, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<SismouraWebViewOrcamentoPendenciasCliente>>>;
    public pedidosRelacaoPendenciasCliente(parametros: SismouraWebViewMouraUniversalWebServiceControllersPedidosControllerRelacaoPendenciasClienteParametro, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<SismouraWebViewOrcamentoPendenciasCliente>>>;
    public pedidosRelacaoPendenciasCliente(parametros: SismouraWebViewMouraUniversalWebServiceControllersPedidosControllerRelacaoPendenciasClienteParametro, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (parametros === null || parametros === undefined) {
            throw new Error('Required parameter parametros was null or undefined when calling pedidosRelacaoPendenciasCliente.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Array<SismouraWebViewOrcamentoPendenciasCliente>>(`${this.basePath}/api/Pedidos/RelacaoPendenciasCliente`,
            parametros,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
