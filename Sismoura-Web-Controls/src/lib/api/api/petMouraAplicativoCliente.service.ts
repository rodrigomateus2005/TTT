/**
 * Sismoura.Web.View
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { SiSMouraCoreEntityAnimaisVeterinarioApiRetorno } from '../model/siSMouraCoreEntityAnimaisVeterinarioApiRetorno';
import { SiSMouraCoreEntityServicoPetApiRetorno } from '../model/siSMouraCoreEntityServicoPetApiRetorno';
import { SiSMouraCoreEntityStoomAutenticacaoStoomAutenticacao } from '../model/siSMouraCoreEntityStoomAutenticacaoStoomAutenticacao';
import { SiSMouraCoreEntityStoomEfetivaPagamentoStoomEfetivaPagamentoRetorno } from '../model/siSMouraCoreEntityStoomEfetivaPagamentoStoomEfetivaPagamentoRetorno';
import { SismouraWebViewPetMouraAplicativoModelAgendaProfissionalRetorno } from '../model/sismouraWebViewPetMouraAplicativoModelAgendaProfissionalRetorno';
import { SismouraWebViewPetMouraAplicativoModelGravarAtendimentoParametro } from '../model/sismouraWebViewPetMouraAplicativoModelGravarAtendimentoParametro';
import { SismouraWebViewPetMouraAplicativoModelGravarAtendimentoRetorno } from '../model/sismouraWebViewPetMouraAplicativoModelGravarAtendimentoRetorno';
import { SismouraWebViewPetMouraAplicativoModelPagamentoAPPCartaoAPI } from '../model/sismouraWebViewPetMouraAplicativoModelPagamentoAPPCartaoAPI';
import { SismouraWebViewPetMouraAplicativoModelPagamentoAPPCartaoRetorno } from '../model/sismouraWebViewPetMouraAplicativoModelPagamentoAPPCartaoRetorno';
import { SismouraWebViewPetMouraAplicativoModelPagamentoAPPCartaoesCadastradosClienteAPI } from '../model/sismouraWebViewPetMouraAplicativoModelPagamentoAPPCartaoesCadastradosClienteAPI';
import { SismouraWebViewPetMouraAplicativoModelPagamentoAutenticacao } from '../model/sismouraWebViewPetMouraAplicativoModelPagamentoAutenticacao';
import { SismouraWebViewPetMouraAplicativoModelPetApiAgendaProfissionalParametro } from '../model/sismouraWebViewPetMouraAplicativoModelPetApiAgendaProfissionalParametro';
import { SismouraWebViewPetMouraAplicativoModelPetApiAtendimentoParametro } from '../model/sismouraWebViewPetMouraAplicativoModelPetApiAtendimentoParametro';
import { SismouraWebViewPetMouraAplicativoModelPetApiProfissionalParametro } from '../model/sismouraWebViewPetMouraAplicativoModelPetApiProfissionalParametro';
import { SismouraWebViewPetMouraAplicativoModelPetApiSalvarEmpresasFavoritas } from '../model/sismouraWebViewPetMouraAplicativoModelPetApiSalvarEmpresasFavoritas';
import { SismouraWebViewPetMouraAplicativoModelPetApiServicosParametro } from '../model/sismouraWebViewPetMouraAplicativoModelPetApiServicosParametro';
import { SismouraWebViewPetMouraAplicativoModelPetAppParametro } from '../model/sismouraWebViewPetMouraAplicativoModelPetAppParametro';
import { SismouraWebViewPetMouraAplicativoModelReagendarAtendimentoParametro } from '../model/sismouraWebViewPetMouraAplicativoModelReagendarAtendimentoParametro';
import { SismouraWebViewPetMouraAplicativoModelReagendarAtendimentoRetorno } from '../model/sismouraWebViewPetMouraAplicativoModelReagendarAtendimentoRetorno';
import { SismouraWebViewPetMouraAplicativoModelRelacaoServicosParametro } from '../model/sismouraWebViewPetMouraAplicativoModelRelacaoServicosParametro';
import { SismouraWebViewPetMouraAplicativoModelRelacaoServicosRetorno } from '../model/sismouraWebViewPetMouraAplicativoModelRelacaoServicosRetorno';
import { SismouraWebViewPetMouraAplicativoModelRetornoAtendimento } from '../model/sismouraWebViewPetMouraAplicativoModelRetornoAtendimento';
import { SismouraWebViewPetMouraAplicativoModelRetornoConfiguracoesPetApp } from '../model/sismouraWebViewPetMouraAplicativoModelRetornoConfiguracoesPetApp';
import { StoomCartoesClienteStoomCartoesCliente } from '../model/stoomCartoesClienteStoomCartoesCliente';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class PetMouraAplicativoClienteService {

    protected basePath = 'http://localhost:38306';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * 
     * @param parametros 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public petMouraAplicativoClienteDeletarEmpresasFavoritas(parametros: SismouraWebViewPetMouraAplicativoModelPetApiSalvarEmpresasFavoritas, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public petMouraAplicativoClienteDeletarEmpresasFavoritas(parametros: SismouraWebViewPetMouraAplicativoModelPetApiSalvarEmpresasFavoritas, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public petMouraAplicativoClienteDeletarEmpresasFavoritas(parametros: SismouraWebViewPetMouraAplicativoModelPetApiSalvarEmpresasFavoritas, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public petMouraAplicativoClienteDeletarEmpresasFavoritas(parametros: SismouraWebViewPetMouraAplicativoModelPetApiSalvarEmpresasFavoritas, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (parametros === null || parametros === undefined) {
            throw new Error('Required parameter parametros was null or undefined when calling petMouraAplicativoClienteDeletarEmpresasFavoritas.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/api/PetMouraAplicativoCliente/DeletarEmpresasFavoritas`,
            parametros,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param parametros 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public petMouraAplicativoClienteGetAgendaProfissional(parametros: SismouraWebViewPetMouraAplicativoModelPetApiAgendaProfissionalParametro, observe?: 'body', reportProgress?: boolean): Observable<SismouraWebViewPetMouraAplicativoModelAgendaProfissionalRetorno>;
    public petMouraAplicativoClienteGetAgendaProfissional(parametros: SismouraWebViewPetMouraAplicativoModelPetApiAgendaProfissionalParametro, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SismouraWebViewPetMouraAplicativoModelAgendaProfissionalRetorno>>;
    public petMouraAplicativoClienteGetAgendaProfissional(parametros: SismouraWebViewPetMouraAplicativoModelPetApiAgendaProfissionalParametro, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SismouraWebViewPetMouraAplicativoModelAgendaProfissionalRetorno>>;
    public petMouraAplicativoClienteGetAgendaProfissional(parametros: SismouraWebViewPetMouraAplicativoModelPetApiAgendaProfissionalParametro, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (parametros === null || parametros === undefined) {
            throw new Error('Required parameter parametros was null or undefined when calling petMouraAplicativoClienteGetAgendaProfissional.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<SismouraWebViewPetMouraAplicativoModelAgendaProfissionalRetorno>(`${this.basePath}/api/PetMouraAplicativoCliente/GetAgendaProfissional`,
            parametros,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param parametros 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public petMouraAplicativoClienteGetAtendimentoApiRetorno(parametros: SismouraWebViewPetMouraAplicativoModelPetApiAtendimentoParametro, observe?: 'body', reportProgress?: boolean): Observable<SismouraWebViewPetMouraAplicativoModelRetornoAtendimento>;
    public petMouraAplicativoClienteGetAtendimentoApiRetorno(parametros: SismouraWebViewPetMouraAplicativoModelPetApiAtendimentoParametro, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SismouraWebViewPetMouraAplicativoModelRetornoAtendimento>>;
    public petMouraAplicativoClienteGetAtendimentoApiRetorno(parametros: SismouraWebViewPetMouraAplicativoModelPetApiAtendimentoParametro, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SismouraWebViewPetMouraAplicativoModelRetornoAtendimento>>;
    public petMouraAplicativoClienteGetAtendimentoApiRetorno(parametros: SismouraWebViewPetMouraAplicativoModelPetApiAtendimentoParametro, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (parametros === null || parametros === undefined) {
            throw new Error('Required parameter parametros was null or undefined when calling petMouraAplicativoClienteGetAtendimentoApiRetorno.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<SismouraWebViewPetMouraAplicativoModelRetornoAtendimento>(`${this.basePath}/api/PetMouraAplicativoCliente/GetAtendimentoApiRetorno`,
            parametros,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param parametros 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public petMouraAplicativoClienteGetCartoesCadastradosCliente(parametros: SismouraWebViewPetMouraAplicativoModelPagamentoAPPCartaoesCadastradosClienteAPI, observe?: 'body', reportProgress?: boolean): Observable<StoomCartoesClienteStoomCartoesCliente>;
    public petMouraAplicativoClienteGetCartoesCadastradosCliente(parametros: SismouraWebViewPetMouraAplicativoModelPagamentoAPPCartaoesCadastradosClienteAPI, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<StoomCartoesClienteStoomCartoesCliente>>;
    public petMouraAplicativoClienteGetCartoesCadastradosCliente(parametros: SismouraWebViewPetMouraAplicativoModelPagamentoAPPCartaoesCadastradosClienteAPI, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<StoomCartoesClienteStoomCartoesCliente>>;
    public petMouraAplicativoClienteGetCartoesCadastradosCliente(parametros: SismouraWebViewPetMouraAplicativoModelPagamentoAPPCartaoesCadastradosClienteAPI, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (parametros === null || parametros === undefined) {
            throw new Error('Required parameter parametros was null or undefined when calling petMouraAplicativoClienteGetCartoesCadastradosCliente.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<StoomCartoesClienteStoomCartoesCliente>(`${this.basePath}/api/PetMouraAplicativoCliente/GetCartoesCadastradosCliente`,
            parametros,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param parametros 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public petMouraAplicativoClienteGetConfiguracoesPetApp(parametros: SismouraWebViewPetMouraAplicativoModelPetAppParametro, observe?: 'body', reportProgress?: boolean): Observable<SismouraWebViewPetMouraAplicativoModelRetornoConfiguracoesPetApp>;
    public petMouraAplicativoClienteGetConfiguracoesPetApp(parametros: SismouraWebViewPetMouraAplicativoModelPetAppParametro, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SismouraWebViewPetMouraAplicativoModelRetornoConfiguracoesPetApp>>;
    public petMouraAplicativoClienteGetConfiguracoesPetApp(parametros: SismouraWebViewPetMouraAplicativoModelPetAppParametro, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SismouraWebViewPetMouraAplicativoModelRetornoConfiguracoesPetApp>>;
    public petMouraAplicativoClienteGetConfiguracoesPetApp(parametros: SismouraWebViewPetMouraAplicativoModelPetAppParametro, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (parametros === null || parametros === undefined) {
            throw new Error('Required parameter parametros was null or undefined when calling petMouraAplicativoClienteGetConfiguracoesPetApp.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<SismouraWebViewPetMouraAplicativoModelRetornoConfiguracoesPetApp>(`${this.basePath}/api/PetMouraAplicativoCliente/GetConfiguracoesPetApp`,
            parametros,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param parametros 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public petMouraAplicativoClienteGetDescontoFuncionario(parametros: SismouraWebViewPetMouraAplicativoModelPetAppParametro, observe?: 'body', reportProgress?: boolean): Observable<number>;
    public petMouraAplicativoClienteGetDescontoFuncionario(parametros: SismouraWebViewPetMouraAplicativoModelPetAppParametro, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<number>>;
    public petMouraAplicativoClienteGetDescontoFuncionario(parametros: SismouraWebViewPetMouraAplicativoModelPetAppParametro, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<number>>;
    public petMouraAplicativoClienteGetDescontoFuncionario(parametros: SismouraWebViewPetMouraAplicativoModelPetAppParametro, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (parametros === null || parametros === undefined) {
            throw new Error('Required parameter parametros was null or undefined when calling petMouraAplicativoClienteGetDescontoFuncionario.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<number>(`${this.basePath}/api/PetMouraAplicativoCliente/GetDescontoFuncionario`,
            parametros,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param parametros 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public petMouraAplicativoClienteGetProfissionais(parametros: SismouraWebViewPetMouraAplicativoModelPetApiProfissionalParametro, observe?: 'body', reportProgress?: boolean): Observable<Array<SiSMouraCoreEntityAnimaisVeterinarioApiRetorno>>;
    public petMouraAplicativoClienteGetProfissionais(parametros: SismouraWebViewPetMouraAplicativoModelPetApiProfissionalParametro, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<SiSMouraCoreEntityAnimaisVeterinarioApiRetorno>>>;
    public petMouraAplicativoClienteGetProfissionais(parametros: SismouraWebViewPetMouraAplicativoModelPetApiProfissionalParametro, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<SiSMouraCoreEntityAnimaisVeterinarioApiRetorno>>>;
    public petMouraAplicativoClienteGetProfissionais(parametros: SismouraWebViewPetMouraAplicativoModelPetApiProfissionalParametro, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (parametros === null || parametros === undefined) {
            throw new Error('Required parameter parametros was null or undefined when calling petMouraAplicativoClienteGetProfissionais.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Array<SiSMouraCoreEntityAnimaisVeterinarioApiRetorno>>(`${this.basePath}/api/PetMouraAplicativoCliente/GetProfissionais`,
            parametros,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param parametros 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public petMouraAplicativoClienteGetServicos(parametros: SismouraWebViewPetMouraAplicativoModelPetApiServicosParametro, observe?: 'body', reportProgress?: boolean): Observable<Array<SiSMouraCoreEntityServicoPetApiRetorno>>;
    public petMouraAplicativoClienteGetServicos(parametros: SismouraWebViewPetMouraAplicativoModelPetApiServicosParametro, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<SiSMouraCoreEntityServicoPetApiRetorno>>>;
    public petMouraAplicativoClienteGetServicos(parametros: SismouraWebViewPetMouraAplicativoModelPetApiServicosParametro, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<SiSMouraCoreEntityServicoPetApiRetorno>>>;
    public petMouraAplicativoClienteGetServicos(parametros: SismouraWebViewPetMouraAplicativoModelPetApiServicosParametro, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (parametros === null || parametros === undefined) {
            throw new Error('Required parameter parametros was null or undefined when calling petMouraAplicativoClienteGetServicos.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Array<SiSMouraCoreEntityServicoPetApiRetorno>>(`${this.basePath}/api/PetMouraAplicativoCliente/GetServicos`,
            parametros,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param parametros 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public petMouraAplicativoClientePagamentoAtendimento(parametros: SismouraWebViewPetMouraAplicativoModelPagamentoAPPCartaoAPI, observe?: 'body', reportProgress?: boolean): Observable<SismouraWebViewPetMouraAplicativoModelPagamentoAPPCartaoRetorno>;
    public petMouraAplicativoClientePagamentoAtendimento(parametros: SismouraWebViewPetMouraAplicativoModelPagamentoAPPCartaoAPI, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SismouraWebViewPetMouraAplicativoModelPagamentoAPPCartaoRetorno>>;
    public petMouraAplicativoClientePagamentoAtendimento(parametros: SismouraWebViewPetMouraAplicativoModelPagamentoAPPCartaoAPI, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SismouraWebViewPetMouraAplicativoModelPagamentoAPPCartaoRetorno>>;
    public petMouraAplicativoClientePagamentoAtendimento(parametros: SismouraWebViewPetMouraAplicativoModelPagamentoAPPCartaoAPI, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (parametros === null || parametros === undefined) {
            throw new Error('Required parameter parametros was null or undefined when calling petMouraAplicativoClientePagamentoAtendimento.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<SismouraWebViewPetMouraAplicativoModelPagamentoAPPCartaoRetorno>(`${this.basePath}/api/PetMouraAplicativoCliente/PagamentoAtendimento`,
            parametros,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param parametros 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public petMouraAplicativoClienteReagendarAtendimento(parametros: SismouraWebViewPetMouraAplicativoModelReagendarAtendimentoParametro, observe?: 'body', reportProgress?: boolean): Observable<SismouraWebViewPetMouraAplicativoModelReagendarAtendimentoRetorno>;
    public petMouraAplicativoClienteReagendarAtendimento(parametros: SismouraWebViewPetMouraAplicativoModelReagendarAtendimentoParametro, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SismouraWebViewPetMouraAplicativoModelReagendarAtendimentoRetorno>>;
    public petMouraAplicativoClienteReagendarAtendimento(parametros: SismouraWebViewPetMouraAplicativoModelReagendarAtendimentoParametro, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SismouraWebViewPetMouraAplicativoModelReagendarAtendimentoRetorno>>;
    public petMouraAplicativoClienteReagendarAtendimento(parametros: SismouraWebViewPetMouraAplicativoModelReagendarAtendimentoParametro, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (parametros === null || parametros === undefined) {
            throw new Error('Required parameter parametros was null or undefined when calling petMouraAplicativoClienteReagendarAtendimento.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<SismouraWebViewPetMouraAplicativoModelReagendarAtendimentoRetorno>(`${this.basePath}/api/PetMouraAplicativoCliente/ReagendarAtendimento`,
            parametros,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param parametros 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public petMouraAplicativoClienteRelacaoServicos(parametros: SismouraWebViewPetMouraAplicativoModelRelacaoServicosParametro, observe?: 'body', reportProgress?: boolean): Observable<SismouraWebViewPetMouraAplicativoModelRelacaoServicosRetorno>;
    public petMouraAplicativoClienteRelacaoServicos(parametros: SismouraWebViewPetMouraAplicativoModelRelacaoServicosParametro, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SismouraWebViewPetMouraAplicativoModelRelacaoServicosRetorno>>;
    public petMouraAplicativoClienteRelacaoServicos(parametros: SismouraWebViewPetMouraAplicativoModelRelacaoServicosParametro, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SismouraWebViewPetMouraAplicativoModelRelacaoServicosRetorno>>;
    public petMouraAplicativoClienteRelacaoServicos(parametros: SismouraWebViewPetMouraAplicativoModelRelacaoServicosParametro, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (parametros === null || parametros === undefined) {
            throw new Error('Required parameter parametros was null or undefined when calling petMouraAplicativoClienteRelacaoServicos.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<SismouraWebViewPetMouraAplicativoModelRelacaoServicosRetorno>(`${this.basePath}/api/PetMouraAplicativoCliente/RelacaoServicos`,
            parametros,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param parametros 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public petMouraAplicativoClienteReservarNovoAtendimento(parametros: SismouraWebViewPetMouraAplicativoModelGravarAtendimentoParametro, observe?: 'body', reportProgress?: boolean): Observable<SismouraWebViewPetMouraAplicativoModelGravarAtendimentoRetorno>;
    public petMouraAplicativoClienteReservarNovoAtendimento(parametros: SismouraWebViewPetMouraAplicativoModelGravarAtendimentoParametro, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SismouraWebViewPetMouraAplicativoModelGravarAtendimentoRetorno>>;
    public petMouraAplicativoClienteReservarNovoAtendimento(parametros: SismouraWebViewPetMouraAplicativoModelGravarAtendimentoParametro, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SismouraWebViewPetMouraAplicativoModelGravarAtendimentoRetorno>>;
    public petMouraAplicativoClienteReservarNovoAtendimento(parametros: SismouraWebViewPetMouraAplicativoModelGravarAtendimentoParametro, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (parametros === null || parametros === undefined) {
            throw new Error('Required parameter parametros was null or undefined when calling petMouraAplicativoClienteReservarNovoAtendimento.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<SismouraWebViewPetMouraAplicativoModelGravarAtendimentoRetorno>(`${this.basePath}/api/PetMouraAplicativoCliente/ReservarNovoAtendimento`,
            parametros,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param parametros 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public petMouraAplicativoClienteSalvarEmpresasFavoritas(parametros: SismouraWebViewPetMouraAplicativoModelPetApiSalvarEmpresasFavoritas, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public petMouraAplicativoClienteSalvarEmpresasFavoritas(parametros: SismouraWebViewPetMouraAplicativoModelPetApiSalvarEmpresasFavoritas, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public petMouraAplicativoClienteSalvarEmpresasFavoritas(parametros: SismouraWebViewPetMouraAplicativoModelPetApiSalvarEmpresasFavoritas, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public petMouraAplicativoClienteSalvarEmpresasFavoritas(parametros: SismouraWebViewPetMouraAplicativoModelPetApiSalvarEmpresasFavoritas, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (parametros === null || parametros === undefined) {
            throw new Error('Required parameter parametros was null or undefined when calling petMouraAplicativoClienteSalvarEmpresasFavoritas.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/api/PetMouraAplicativoCliente/SalvarEmpresasFavoritas`,
            parametros,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param parametros 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public petMouraAplicativoClienteStoomAutenticacao(parametros: SismouraWebViewPetMouraAplicativoModelPagamentoAutenticacao, observe?: 'body', reportProgress?: boolean): Observable<SiSMouraCoreEntityStoomAutenticacaoStoomAutenticacao>;
    public petMouraAplicativoClienteStoomAutenticacao(parametros: SismouraWebViewPetMouraAplicativoModelPagamentoAutenticacao, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SiSMouraCoreEntityStoomAutenticacaoStoomAutenticacao>>;
    public petMouraAplicativoClienteStoomAutenticacao(parametros: SismouraWebViewPetMouraAplicativoModelPagamentoAutenticacao, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SiSMouraCoreEntityStoomAutenticacaoStoomAutenticacao>>;
    public petMouraAplicativoClienteStoomAutenticacao(parametros: SismouraWebViewPetMouraAplicativoModelPagamentoAutenticacao, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (parametros === null || parametros === undefined) {
            throw new Error('Required parameter parametros was null or undefined when calling petMouraAplicativoClienteStoomAutenticacao.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<SiSMouraCoreEntityStoomAutenticacaoStoomAutenticacao>(`${this.basePath}/api/PetMouraAplicativoCliente/StoomAutenticacao`,
            parametros,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param codAtendimento 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public petMouraAplicativoClienteStoomEfetivarPagamento(codAtendimento: number, observe?: 'body', reportProgress?: boolean): Observable<SiSMouraCoreEntityStoomEfetivaPagamentoStoomEfetivaPagamentoRetorno>;
    public petMouraAplicativoClienteStoomEfetivarPagamento(codAtendimento: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SiSMouraCoreEntityStoomEfetivaPagamentoStoomEfetivaPagamentoRetorno>>;
    public petMouraAplicativoClienteStoomEfetivarPagamento(codAtendimento: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SiSMouraCoreEntityStoomEfetivaPagamentoStoomEfetivaPagamentoRetorno>>;
    public petMouraAplicativoClienteStoomEfetivarPagamento(codAtendimento: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (codAtendimento === null || codAtendimento === undefined) {
            throw new Error('Required parameter codAtendimento was null or undefined when calling petMouraAplicativoClienteStoomEfetivarPagamento.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (codAtendimento !== undefined && codAtendimento !== null) {
            queryParameters = queryParameters.set('codAtendimento', <any>codAtendimento);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<SiSMouraCoreEntityStoomEfetivaPagamentoStoomEfetivaPagamentoRetorno>(`${this.basePath}/api/PetMouraAplicativoCliente/StoomEfetivarPagamento`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
