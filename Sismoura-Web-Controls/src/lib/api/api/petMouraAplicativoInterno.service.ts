/**
 * Sismoura.Web.View
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { SiSMouraCoreEntityPetAppEmpresaRetorno } from '../model/siSMouraCoreEntityPetAppEmpresaRetorno';
import { SiSMouraCoreEntityPetAppUsuarioRetorno } from '../model/siSMouraCoreEntityPetAppUsuarioRetorno';
import { SismouraWebViewPetMouraAplicativoModelPetAppAnimaisClienteRetorno } from '../model/sismouraWebViewPetMouraAplicativoModelPetAppAnimaisClienteRetorno';
import { SismouraWebViewPetMouraAplicativoModelPetAppAnimaisParametro } from '../model/sismouraWebViewPetMouraAplicativoModelPetAppAnimaisParametro';
import { SismouraWebViewPetMouraAplicativoModelPetAppClienteCodigoParametro } from '../model/sismouraWebViewPetMouraAplicativoModelPetAppClienteCodigoParametro';
import { SismouraWebViewPetMouraAplicativoModelPetAppEmpresaParametro } from '../model/sismouraWebViewPetMouraAplicativoModelPetAppEmpresaParametro';
import { SismouraWebViewPetMouraAplicativoModelPetAppEsqueciSenhaParametro } from '../model/sismouraWebViewPetMouraAplicativoModelPetAppEsqueciSenhaParametro';
import { SismouraWebViewPetMouraAplicativoModelPetAppGetDadosAnimalParametro } from '../model/sismouraWebViewPetMouraAplicativoModelPetAppGetDadosAnimalParametro';
import { SismouraWebViewPetMouraAplicativoModelPetAppGetDadosAnimalRetorno } from '../model/sismouraWebViewPetMouraAplicativoModelPetAppGetDadosAnimalRetorno';
import { SismouraWebViewPetMouraAplicativoModelPetAppGravarAnimalParametros } from '../model/sismouraWebViewPetMouraAplicativoModelPetAppGravarAnimalParametros';
import { SismouraWebViewPetMouraAplicativoModelPetAppGravarAnimalRetorno } from '../model/sismouraWebViewPetMouraAplicativoModelPetAppGravarAnimalRetorno';
import { SismouraWebViewPetMouraAplicativoModelPetAppGravarUsuarioParametros } from '../model/sismouraWebViewPetMouraAplicativoModelPetAppGravarUsuarioParametros';
import { SismouraWebViewPetMouraAplicativoModelPetAppGravarUsuarioRetorno } from '../model/sismouraWebViewPetMouraAplicativoModelPetAppGravarUsuarioRetorno';
import { SismouraWebViewPetMouraAplicativoModelPetAppLoginClienteParametro } from '../model/sismouraWebViewPetMouraAplicativoModelPetAppLoginClienteParametro';
import { SismouraWebViewPetMouraAplicativoModelPetAppParametro } from '../model/sismouraWebViewPetMouraAplicativoModelPetAppParametro';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class PetMouraAplicativoInternoService {

    protected basePath = 'http://localhost:38306';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * 
     * @param parametros 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public petMouraAplicativoInternoEsqueciSenha(parametros: SismouraWebViewPetMouraAplicativoModelPetAppEsqueciSenhaParametro, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public petMouraAplicativoInternoEsqueciSenha(parametros: SismouraWebViewPetMouraAplicativoModelPetAppEsqueciSenhaParametro, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public petMouraAplicativoInternoEsqueciSenha(parametros: SismouraWebViewPetMouraAplicativoModelPetAppEsqueciSenhaParametro, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public petMouraAplicativoInternoEsqueciSenha(parametros: SismouraWebViewPetMouraAplicativoModelPetAppEsqueciSenhaParametro, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (parametros === null || parametros === undefined) {
            throw new Error('Required parameter parametros was null or undefined when calling petMouraAplicativoInternoEsqueciSenha.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<string>(`${this.basePath}/api/PetMouraAplicativoInterno/EsqueciSenha`,
            parametros,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public petMouraAplicativoInternoGetAgora(observe?: 'body', reportProgress?: boolean): Observable<Date>;
    public petMouraAplicativoInternoGetAgora(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Date>>;
    public petMouraAplicativoInternoGetAgora(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Date>>;
    public petMouraAplicativoInternoGetAgora(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Date>(`${this.basePath}/api/PetMouraAplicativoInterno/GetAgora`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param parametros 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public petMouraAplicativoInternoGetAnimaisCliente(parametros: SismouraWebViewPetMouraAplicativoModelPetAppAnimaisParametro, observe?: 'body', reportProgress?: boolean): Observable<SismouraWebViewPetMouraAplicativoModelPetAppAnimaisClienteRetorno>;
    public petMouraAplicativoInternoGetAnimaisCliente(parametros: SismouraWebViewPetMouraAplicativoModelPetAppAnimaisParametro, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SismouraWebViewPetMouraAplicativoModelPetAppAnimaisClienteRetorno>>;
    public petMouraAplicativoInternoGetAnimaisCliente(parametros: SismouraWebViewPetMouraAplicativoModelPetAppAnimaisParametro, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SismouraWebViewPetMouraAplicativoModelPetAppAnimaisClienteRetorno>>;
    public petMouraAplicativoInternoGetAnimaisCliente(parametros: SismouraWebViewPetMouraAplicativoModelPetAppAnimaisParametro, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (parametros === null || parametros === undefined) {
            throw new Error('Required parameter parametros was null or undefined when calling petMouraAplicativoInternoGetAnimaisCliente.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<SismouraWebViewPetMouraAplicativoModelPetAppAnimaisClienteRetorno>(`${this.basePath}/api/PetMouraAplicativoInterno/GetAnimaisCliente`,
            parametros,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param parametros 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public petMouraAplicativoInternoGetCidadesComEstado(parametros: SismouraWebViewPetMouraAplicativoModelPetAppParametro, observe?: 'body', reportProgress?: boolean): Observable<Array<any>>;
    public petMouraAplicativoInternoGetCidadesComEstado(parametros: SismouraWebViewPetMouraAplicativoModelPetAppParametro, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<any>>>;
    public petMouraAplicativoInternoGetCidadesComEstado(parametros: SismouraWebViewPetMouraAplicativoModelPetAppParametro, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<any>>>;
    public petMouraAplicativoInternoGetCidadesComEstado(parametros: SismouraWebViewPetMouraAplicativoModelPetAppParametro, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (parametros === null || parametros === undefined) {
            throw new Error('Required parameter parametros was null or undefined when calling petMouraAplicativoInternoGetCidadesComEstado.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Array<any>>(`${this.basePath}/api/PetMouraAplicativoInterno/GetCidadesComEstado`,
            parametros,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param parametros 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public petMouraAplicativoInternoGetDadosAnimalByCodigo(parametros: SismouraWebViewPetMouraAplicativoModelPetAppGetDadosAnimalParametro, observe?: 'body', reportProgress?: boolean): Observable<SismouraWebViewPetMouraAplicativoModelPetAppGetDadosAnimalRetorno>;
    public petMouraAplicativoInternoGetDadosAnimalByCodigo(parametros: SismouraWebViewPetMouraAplicativoModelPetAppGetDadosAnimalParametro, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SismouraWebViewPetMouraAplicativoModelPetAppGetDadosAnimalRetorno>>;
    public petMouraAplicativoInternoGetDadosAnimalByCodigo(parametros: SismouraWebViewPetMouraAplicativoModelPetAppGetDadosAnimalParametro, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SismouraWebViewPetMouraAplicativoModelPetAppGetDadosAnimalRetorno>>;
    public petMouraAplicativoInternoGetDadosAnimalByCodigo(parametros: SismouraWebViewPetMouraAplicativoModelPetAppGetDadosAnimalParametro, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (parametros === null || parametros === undefined) {
            throw new Error('Required parameter parametros was null or undefined when calling petMouraAplicativoInternoGetDadosAnimalByCodigo.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<SismouraWebViewPetMouraAplicativoModelPetAppGetDadosAnimalRetorno>(`${this.basePath}/api/PetMouraAplicativoInterno/GetDadosAnimalByCodigo`,
            parametros,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param parametros 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public petMouraAplicativoInternoGetDadosClienteByCodigo(parametros: SismouraWebViewPetMouraAplicativoModelPetAppClienteCodigoParametro, observe?: 'body', reportProgress?: boolean): Observable<SiSMouraCoreEntityPetAppUsuarioRetorno>;
    public petMouraAplicativoInternoGetDadosClienteByCodigo(parametros: SismouraWebViewPetMouraAplicativoModelPetAppClienteCodigoParametro, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SiSMouraCoreEntityPetAppUsuarioRetorno>>;
    public petMouraAplicativoInternoGetDadosClienteByCodigo(parametros: SismouraWebViewPetMouraAplicativoModelPetAppClienteCodigoParametro, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SiSMouraCoreEntityPetAppUsuarioRetorno>>;
    public petMouraAplicativoInternoGetDadosClienteByCodigo(parametros: SismouraWebViewPetMouraAplicativoModelPetAppClienteCodigoParametro, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (parametros === null || parametros === undefined) {
            throw new Error('Required parameter parametros was null or undefined when calling petMouraAplicativoInternoGetDadosClienteByCodigo.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<SiSMouraCoreEntityPetAppUsuarioRetorno>(`${this.basePath}/api/PetMouraAplicativoInterno/GetDadosClienteByCodigo`,
            parametros,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param parametros 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public petMouraAplicativoInternoGetEmpresas(parametros: SismouraWebViewPetMouraAplicativoModelPetAppEmpresaParametro, observe?: 'body', reportProgress?: boolean): Observable<Array<SiSMouraCoreEntityPetAppEmpresaRetorno>>;
    public petMouraAplicativoInternoGetEmpresas(parametros: SismouraWebViewPetMouraAplicativoModelPetAppEmpresaParametro, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<SiSMouraCoreEntityPetAppEmpresaRetorno>>>;
    public petMouraAplicativoInternoGetEmpresas(parametros: SismouraWebViewPetMouraAplicativoModelPetAppEmpresaParametro, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<SiSMouraCoreEntityPetAppEmpresaRetorno>>>;
    public petMouraAplicativoInternoGetEmpresas(parametros: SismouraWebViewPetMouraAplicativoModelPetAppEmpresaParametro, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (parametros === null || parametros === undefined) {
            throw new Error('Required parameter parametros was null or undefined when calling petMouraAplicativoInternoGetEmpresas.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Array<SiSMouraCoreEntityPetAppEmpresaRetorno>>(`${this.basePath}/api/PetMouraAplicativoInterno/GetEmpresas`,
            parametros,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param parametros 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public petMouraAplicativoInternoGetEspeciesComRaca(parametros: SismouraWebViewPetMouraAplicativoModelPetAppParametro, observe?: 'body', reportProgress?: boolean): Observable<Array<any>>;
    public petMouraAplicativoInternoGetEspeciesComRaca(parametros: SismouraWebViewPetMouraAplicativoModelPetAppParametro, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<any>>>;
    public petMouraAplicativoInternoGetEspeciesComRaca(parametros: SismouraWebViewPetMouraAplicativoModelPetAppParametro, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<any>>>;
    public petMouraAplicativoInternoGetEspeciesComRaca(parametros: SismouraWebViewPetMouraAplicativoModelPetAppParametro, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (parametros === null || parametros === undefined) {
            throw new Error('Required parameter parametros was null or undefined when calling petMouraAplicativoInternoGetEspeciesComRaca.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Array<any>>(`${this.basePath}/api/PetMouraAplicativoInterno/GetEspeciesComRaca`,
            parametros,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param parametros 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public petMouraAplicativoInternoGravarAnimal(parametros: SismouraWebViewPetMouraAplicativoModelPetAppGravarAnimalParametros, observe?: 'body', reportProgress?: boolean): Observable<SismouraWebViewPetMouraAplicativoModelPetAppGravarAnimalRetorno>;
    public petMouraAplicativoInternoGravarAnimal(parametros: SismouraWebViewPetMouraAplicativoModelPetAppGravarAnimalParametros, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SismouraWebViewPetMouraAplicativoModelPetAppGravarAnimalRetorno>>;
    public petMouraAplicativoInternoGravarAnimal(parametros: SismouraWebViewPetMouraAplicativoModelPetAppGravarAnimalParametros, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SismouraWebViewPetMouraAplicativoModelPetAppGravarAnimalRetorno>>;
    public petMouraAplicativoInternoGravarAnimal(parametros: SismouraWebViewPetMouraAplicativoModelPetAppGravarAnimalParametros, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (parametros === null || parametros === undefined) {
            throw new Error('Required parameter parametros was null or undefined when calling petMouraAplicativoInternoGravarAnimal.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<SismouraWebViewPetMouraAplicativoModelPetAppGravarAnimalRetorno>(`${this.basePath}/api/PetMouraAplicativoInterno/GravarAnimal`,
            parametros,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param parametros 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public petMouraAplicativoInternoGravarUsuario(parametros: SismouraWebViewPetMouraAplicativoModelPetAppGravarUsuarioParametros, observe?: 'body', reportProgress?: boolean): Observable<SismouraWebViewPetMouraAplicativoModelPetAppGravarUsuarioRetorno>;
    public petMouraAplicativoInternoGravarUsuario(parametros: SismouraWebViewPetMouraAplicativoModelPetAppGravarUsuarioParametros, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SismouraWebViewPetMouraAplicativoModelPetAppGravarUsuarioRetorno>>;
    public petMouraAplicativoInternoGravarUsuario(parametros: SismouraWebViewPetMouraAplicativoModelPetAppGravarUsuarioParametros, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SismouraWebViewPetMouraAplicativoModelPetAppGravarUsuarioRetorno>>;
    public petMouraAplicativoInternoGravarUsuario(parametros: SismouraWebViewPetMouraAplicativoModelPetAppGravarUsuarioParametros, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (parametros === null || parametros === undefined) {
            throw new Error('Required parameter parametros was null or undefined when calling petMouraAplicativoInternoGravarUsuario.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<SismouraWebViewPetMouraAplicativoModelPetAppGravarUsuarioRetorno>(`${this.basePath}/api/PetMouraAplicativoInterno/GravarUsuario`,
            parametros,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param parametros 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public petMouraAplicativoInternoLoginUsuario(parametros: SismouraWebViewPetMouraAplicativoModelPetAppLoginClienteParametro, observe?: 'body', reportProgress?: boolean): Observable<SiSMouraCoreEntityPetAppUsuarioRetorno>;
    public petMouraAplicativoInternoLoginUsuario(parametros: SismouraWebViewPetMouraAplicativoModelPetAppLoginClienteParametro, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SiSMouraCoreEntityPetAppUsuarioRetorno>>;
    public petMouraAplicativoInternoLoginUsuario(parametros: SismouraWebViewPetMouraAplicativoModelPetAppLoginClienteParametro, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SiSMouraCoreEntityPetAppUsuarioRetorno>>;
    public petMouraAplicativoInternoLoginUsuario(parametros: SismouraWebViewPetMouraAplicativoModelPetAppLoginClienteParametro, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (parametros === null || parametros === undefined) {
            throw new Error('Required parameter parametros was null or undefined when calling petMouraAplicativoInternoLoginUsuario.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<SiSMouraCoreEntityPetAppUsuarioRetorno>(`${this.basePath}/api/PetMouraAplicativoInterno/LoginUsuario`,
            parametros,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public petMouraAplicativoInternoTeste(observe?: 'body', reportProgress?: boolean): Observable<string>;
    public petMouraAplicativoInternoTeste(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public petMouraAplicativoInternoTeste(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public petMouraAplicativoInternoTeste(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<string>(`${this.basePath}/api/PetMouraAplicativoInterno/Teste`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
