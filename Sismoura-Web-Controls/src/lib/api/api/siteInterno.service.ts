/**
 * Sismoura.Web.View
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { SiSMouraCoreEntityConsoleClienteSiteRetorno } from '../model/siSMouraCoreEntityConsoleClienteSiteRetorno';
import { SiSMouraCoreEntityConsoleContatoParceiroRetorno } from '../model/siSMouraCoreEntityConsoleContatoParceiroRetorno';
import { SiSMouraCoreEntityConsoleContatoSiteRetorno } from '../model/siSMouraCoreEntityConsoleContatoSiteRetorno';
import { SiSMouraCoreEntityConsoleParceirosRetorno } from '../model/siSMouraCoreEntityConsoleParceirosRetorno';
import { SiSMouraCoreEntityConsoleSiteDownload } from '../model/siSMouraCoreEntityConsoleSiteDownload';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class SiteInternoService {

    protected basePath = 'http://localhost:38306';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * 
     * @param codSegmento 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public siteInternoGetClientesDestaqueSite(codSegmento: number, observe?: 'body', reportProgress?: boolean): Observable<Array<SiSMouraCoreEntityConsoleClienteSiteRetorno>>;
    public siteInternoGetClientesDestaqueSite(codSegmento: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<SiSMouraCoreEntityConsoleClienteSiteRetorno>>>;
    public siteInternoGetClientesDestaqueSite(codSegmento: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<SiSMouraCoreEntityConsoleClienteSiteRetorno>>>;
    public siteInternoGetClientesDestaqueSite(codSegmento: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (codSegmento === null || codSegmento === undefined) {
            throw new Error('Required parameter codSegmento was null or undefined when calling siteInternoGetClientesDestaqueSite.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (codSegmento !== undefined && codSegmento !== null) {
            queryParameters = queryParameters.set('codSegmento', <any>codSegmento);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<SiSMouraCoreEntityConsoleClienteSiteRetorno>>(`${this.basePath}/api/SiteInterno/GetClientesDestaqueSite`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param codSegmento 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public siteInternoGetClientesSite(codSegmento: number, observe?: 'body', reportProgress?: boolean): Observable<Array<SiSMouraCoreEntityConsoleClienteSiteRetorno>>;
    public siteInternoGetClientesSite(codSegmento: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<SiSMouraCoreEntityConsoleClienteSiteRetorno>>>;
    public siteInternoGetClientesSite(codSegmento: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<SiSMouraCoreEntityConsoleClienteSiteRetorno>>>;
    public siteInternoGetClientesSite(codSegmento: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (codSegmento === null || codSegmento === undefined) {
            throw new Error('Required parameter codSegmento was null or undefined when calling siteInternoGetClientesSite.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (codSegmento !== undefined && codSegmento !== null) {
            queryParameters = queryParameters.set('codSegmento', <any>codSegmento);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<SiSMouraCoreEntityConsoleClienteSiteRetorno>>(`${this.basePath}/api/SiteInterno/GetClientesSite`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public siteInternoGetDownloads(observe?: 'body', reportProgress?: boolean): Observable<Array<SiSMouraCoreEntityConsoleSiteDownload>>;
    public siteInternoGetDownloads(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<SiSMouraCoreEntityConsoleSiteDownload>>>;
    public siteInternoGetDownloads(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<SiSMouraCoreEntityConsoleSiteDownload>>>;
    public siteInternoGetDownloads(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<SiSMouraCoreEntityConsoleSiteDownload>>(`${this.basePath}/api/SiteInterno/GetDownloads`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param uf 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public siteInternoGetParceiros(uf: string, observe?: 'body', reportProgress?: boolean): Observable<Array<SiSMouraCoreEntityConsoleParceirosRetorno>>;
    public siteInternoGetParceiros(uf: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<SiSMouraCoreEntityConsoleParceirosRetorno>>>;
    public siteInternoGetParceiros(uf: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<SiSMouraCoreEntityConsoleParceirosRetorno>>>;
    public siteInternoGetParceiros(uf: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (uf === null || uf === undefined) {
            throw new Error('Required parameter uf was null or undefined when calling siteInternoGetParceiros.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (uf !== undefined && uf !== null) {
            queryParameters = queryParameters.set('uf', <any>uf);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<SiSMouraCoreEntityConsoleParceirosRetorno>>(`${this.basePath}/api/SiteInterno/GetParceiros`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param contato 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public siteInternoPostContatoCliente(contato: SiSMouraCoreEntityConsoleContatoSiteRetorno, observe?: 'body', reportProgress?: boolean): Observable<SiSMouraCoreEntityConsoleContatoSiteRetorno>;
    public siteInternoPostContatoCliente(contato: SiSMouraCoreEntityConsoleContatoSiteRetorno, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SiSMouraCoreEntityConsoleContatoSiteRetorno>>;
    public siteInternoPostContatoCliente(contato: SiSMouraCoreEntityConsoleContatoSiteRetorno, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SiSMouraCoreEntityConsoleContatoSiteRetorno>>;
    public siteInternoPostContatoCliente(contato: SiSMouraCoreEntityConsoleContatoSiteRetorno, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (contato === null || contato === undefined) {
            throw new Error('Required parameter contato was null or undefined when calling siteInternoPostContatoCliente.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<SiSMouraCoreEntityConsoleContatoSiteRetorno>(`${this.basePath}/api/SiteInterno/PostContatoCliente`,
            contato,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param contato 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public siteInternoPostContatoParceiro(contato: SiSMouraCoreEntityConsoleContatoParceiroRetorno, observe?: 'body', reportProgress?: boolean): Observable<SiSMouraCoreEntityConsoleContatoParceiroRetorno>;
    public siteInternoPostContatoParceiro(contato: SiSMouraCoreEntityConsoleContatoParceiroRetorno, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SiSMouraCoreEntityConsoleContatoParceiroRetorno>>;
    public siteInternoPostContatoParceiro(contato: SiSMouraCoreEntityConsoleContatoParceiroRetorno, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SiSMouraCoreEntityConsoleContatoParceiroRetorno>>;
    public siteInternoPostContatoParceiro(contato: SiSMouraCoreEntityConsoleContatoParceiroRetorno, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (contato === null || contato === undefined) {
            throw new Error('Required parameter contato was null or undefined when calling siteInternoPostContatoParceiro.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<SiSMouraCoreEntityConsoleContatoParceiroRetorno>(`${this.basePath}/api/SiteInterno/PostContatoParceiro`,
            contato,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
