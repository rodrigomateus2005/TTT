/**
 * Sismoura.Web.View
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { SismouraWebViewMouraPageAngularFullLogadaCadastroControllerObterPorCodigoEntradaSiSMouraCoreEntityClienteSiSMouraCoreBusinessClienteBLL } from '../model/sismouraWebViewMouraPageAngularFullLogadaCadastroControllerObterPorCodigoEntradaSiSMouraCoreEntityClienteSiSMouraCoreBusinessClienteBLL';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class TesteAngularService {

    protected basePath = 'http://localhost:38306';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * 
     * @param entidadePessoa 
     * @param entidadeDataCarga 
     * @param entidadePessoaEntityCodigo 
     * @param entidadePessoaEntityNome 
     * @param entidadePessoaEntityTipo 
     * @param entidadePessoaEntityCpf 
     * @param entidadePessoaEntityRg 
     * @param entidadePessoaEntityDataNasc 
     * @param entidadePessoaEntityUsuario 
     * @param entidadePessoaEntityVendedor 
     * @param entidadePessoaEntityConvenio 
     * @param entidadePessoaEntityClienteInternet 
     * @param entidadePessoaEntityCategoriaCartao 
     * @param entidadePessoaEntityCidadePagamento 
     * @param entidadePessoaEntityConceitoCliente 
     * @param entidadePessoaEntityServicoDelivery 
     * @param entidadePessoaEntityDocMercantil 
     * @param entidadePessoaEntitySegmento 
     * @param entidadePessoaEntityOrdemVisita 
     * @param entidadePessoaEntityCodigoClientePessoa 
     * @param entidadePessoaEntityCodigoFornecedorPessoa 
     * @param entidadePessoaEntityCodigoTransportadoraPessoa 
     * @param entidadePessoaEntityContaContabil 
     * @param entidadePessoaEntityUsuarioAlteracao 
     * @param entidadePessoaEntityRepresentante 
     * @param entidadePessoaEntityEnderecoNome 
     * @param entidadePessoaEntityDdd1 
     * @param entidadePessoaEntityDdd2 
     * @param entidadePessoaEntityDddfax 
     * @param entidadePessoaEntityFone2Numero 
     * @param entidadePessoaEntityFoneNumero 
     * @param entidadePessoaEntityFaxNumero 
     * @param entidadePessoaEntityNumero 
     * @param entidadePessoaEntityCidade 
     * @param entidadePessoaEntityEndereco 
     * @param entidadePessoaEntityFone 
     * @param entidadePessoaEntityFone2 
     * @param entidadePessoaEntityFax 
     * @param entidadePessoaEntityBairro 
     * @param entidadePessoaEntityCep 
     * @param entidadePessoaEntityContato 
     * @param entidadePessoaEntityLimiteCredito 
     * @param entidadePessoaEntityPai 
     * @param entidadePessoaEntityMae 
     * @param entidadePessoaEntityConjuge 
     * @param entidadePessoaEntityNaturalidade 
     * @param entidadePessoaEntityAvaliacao 
     * @param entidadePessoaEntityObservacao 
     * @param entidadePessoaEntityInativo 
     * @param entidadePessoaEntityRenda 
     * @param entidadePessoaEntityLocalTrabalho 
     * @param entidadePessoaEntityFoneTrabalho 
     * @param entidadePessoaEntityDataAdmissao 
     * @param entidadePessoaEntityReferencia1 
     * @param entidadePessoaEntityReferencia2 
     * @param entidadePessoaEntityReferencia3 
     * @param entidadePessoaEntityDataCarga 
     * @param entidadePessoaEntitySaldoDevedor 
     * @param entidadePessoaEntityDiaPgto 
     * @param entidadePessoaEntityCidadeD 
     * @param entidadePessoaEntityUfD 
     * @param entidadePessoaEntityBloq 
     * @param entidadePessoaEntityFormaPagamento 
     * @param entidadePessoaEntityInformativo 
     * @param entidadePessoaEntityClasse 
     * @param entidadePessoaEntityPrecoCusto 
     * @param entidadePessoaEntitySenha 
     * @param entidadePessoaEntityDescontoVenda 
     * @param entidadePessoaEntityDataCadastro 
     * @param entidadePessoaEntityEmail 
     * @param entidadePessoaEntityContatoCliente 
     * @param entidadePessoaEntityNomeFantasia 
     * @param entidadePessoaEntityFechamento 
     * @param entidadePessoaEntityVenderPrecoCusto 
     * @param entidadePessoaEntityValorCredito 
     * @param entidadePessoaEntityObservacaoEndereco 
     * @param entidadePessoaEntityApelido 
     * @param entidadePessoaEntityBloquearCrediario 
     * @param entidadePessoaEntityNumeroCalcado 
     * @param entidadePessoaEntityPontosFidelidade 
     * @param entidadePessoaEntityCondicaoPagamento 
     * @param entidadePessoaEntityListaPadrao 
     * @param entidadePessoaEntityVenderTaxaGrupo 
     * @param entidadePessoaEntityNCartao 
     * @param entidadePessoaEntityGrupoFiscal 
     * @param entidadePessoaEntityProfissao 
     * @param entidadePessoaEntityNumeroCartao 
     * @param entidadePessoaEntityContaParticular 
     * @param entidadePessoaEntityDuplicata 
     * @param entidadePessoaEntityDataAlteracao 
     * @param entidadePessoaEntityZonaVenda 
     * @param entidadePessoaEntitySituacaoAfapi 
     * @param entidadePessoaEntityDataUltimaVenda 
     * @param entidadePessoaEntityImpagavel 
     * @param entidadePessoaEntityMatricula 
     * @param entidadePessoaEntityMensagemConvenio 
     * @param entidadePessoaEntityLimiteChequePendente 
     * @param entidadePessoaEntityEnderecoPagamento 
     * @param entidadePessoaEntityFonePagamento 
     * @param entidadePessoaEntityCepPagamento 
     * @param entidadePessoaEntityBairroPagamento 
     * @param entidadePessoaEntityContatoPagamento 
     * @param entidadePessoaEntityBloquearVendaCheque 
     * @param entidadePessoaEntitySexo 
     * @param entidadePessoaEntityBloquearConsignacao 
     * @param entidadePessoaEntityLimiteConsignacao 
     * @param entidadePessoaEntityEstadoCivil 
     * @param entidadePessoaEntityNumeroSuframa 
     * @param entidadePessoaEntityFretePadrao 
     * @param entidadePessoaEntityPadrao 
     * @param entidadePessoaEntityRoteadorPuxou 
     * @param entidadePessoaEntityDataExpedicaoRg 
     * @param entidadePessoaEntityBloquearVenderOrcamento 
     * @param entidadePessoaEntityConsumidorFinal 
     * @param entidadePessoaEntityIsFuncionario 
     * @param entidadePessoaEntityComissionado 
     * @param entidadePessoaEntityExibirObservacao 
     * @param entidadePessoaEntityRegimeTributario 
     * @param entidadePessoaEntityClinicaIndicou 
     * @param entidadePessoaEntityProfissionalIndicou 
     * @param entidadePessoaEntityDataIndicacao 
     * @param entidadePessoaEntityEnderecoEntrega 
     * @param entidadePessoaEntityBairroEntrega 
     * @param entidadePessoaEntityCidadeEntrega 
     * @param entidadePessoaEntityFoneEntrega 
     * @param entidadePessoaEntityContatoEntrega 
     * @param entidadePessoaEntityCepEntrega 
     * @param entidadePessoaEntityValorFrete 
     * @param entidadePessoaEntityBanco 
     * @param entidadePessoaEntityAgencia 
     * @param entidadePessoaEntityAgenciaDV 
     * @param entidadePessoaEntityConta 
     * @param entidadePessoaEntityContaDV 
     * @param entidadePessoaEntityTransportadora 
     * @param entidadePessoaEntityBloquearVendaDinheiro 
     * @param entidadePessoaEntityBloquearAlterarDependente 
     * @param entidadePessoaEntityBloquearAlterarPlaca 
     * @param entidadePessoaEntityComissao 
     * @param entidadePessoaEntityValorChequePendente 
     * @param entidadePessoaEntityBloquearPontoFidelidade 
     * @param entidadePessoaEntityComplemento 
     * @param entidadePessoaEntityMatriz 
     * @param entidadePessoaEntitySituacaoOrcamento 
     * @param entidadePessoaEntityZonaEntrega 
     * @param entidadePessoaEntityBloquearVendaSemKm 
     * @param entidadePessoaEntityEmpresaOrigem 
     * @param entidadePessoaEntityEmpresasOng 
     * @param entidadePessoaEntityObs 
     * @param entidadePessoaEntityBloquearTicket 
     * @param entidadePessoaEntityBloquearCartao 
     * @param entidadePessoaEntityInscricaoMunicipal 
     * @param entidadePessoaEntityContribuinteIcms 
     * @param entidadePessoaEntityEmailsPromocionais 
     * @param entidadePessoaEntityTitularContaCorrente 
     * @param entidadePessoaEntityOperacaoContaCorrente 
     * @param entidadePessoaEntityTipoContaCorrente 
     * @param entidadePessoaEntityDDDCelular 
     * @param entidadePessoaEntityNumeroCelular 
     * @param entidadePessoaEntityBloquearCredito 
     * @param entidadePessoaEntityClinica 
     * @param entidadePessoaEntityIsOng 
     * @param entidadePessoaEntityCelular 
     * @param entidadePessoaEntityAssinaturaPessoa 
     * @param entidadePessoaEntityAssinaturaAssinatura 
     * @param entidadePessoaEntityAssinaturaPreencheuClasse 
     * @param entidadePessoaEntityAssinaturaIsInativo 
     * @param entidadePessoaEntityAssinaturaIgnorarDuplicidade 
     * @param entidadePessoaEntityCodigoTOTVS 
     * @param entidadePessoaEntityContaIntegracaoContabil 
     * @param entidadePessoaEntityStoomClienteID 
     * @param entidadePessoaEntityStoomClienteToken 
     * @param entidadePessoaEntityIgnorarValidacaoCPF 
     * @param entidadePessoaEntityCamposValor 
     * @param entidadePessoaEntityProdutosContinuos 
     * @param entidadePessoaEntityGrupoFornecedorContabil 
     * @param entidadePessoaEntitySujeitoPassivo 
     * @param entidadePessoaEntityIdIFood 
     * @param entidadePessoaEntityPreencheuClasse 
     * @param entidadePessoaEntityIsInativo 
     * @param entidadePessoaEntityIgnorarDuplicidade 
     * @param entidadePreencheuClasse 
     * @param entidadeIsInativo 
     * @param entidadeIgnorarDuplicidade 
     * @param parametrosAdicionaisParametros 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public testeAngularGravar(entidadePessoa?: number, entidadeDataCarga?: Date, entidadePessoaEntityCodigo?: number, entidadePessoaEntityNome?: string, entidadePessoaEntityTipo?: string, entidadePessoaEntityCpf?: string, entidadePessoaEntityRg?: string, entidadePessoaEntityDataNasc?: Date, entidadePessoaEntityUsuario?: number, entidadePessoaEntityVendedor?: number, entidadePessoaEntityConvenio?: number, entidadePessoaEntityClienteInternet?: number, entidadePessoaEntityCategoriaCartao?: number, entidadePessoaEntityCidadePagamento?: number, entidadePessoaEntityConceitoCliente?: number, entidadePessoaEntityServicoDelivery?: number, entidadePessoaEntityDocMercantil?: number, entidadePessoaEntitySegmento?: number, entidadePessoaEntityOrdemVisita?: number, entidadePessoaEntityCodigoClientePessoa?: number, entidadePessoaEntityCodigoFornecedorPessoa?: number, entidadePessoaEntityCodigoTransportadoraPessoa?: number, entidadePessoaEntityContaContabil?: number, entidadePessoaEntityUsuarioAlteracao?: number, entidadePessoaEntityRepresentante?: number, entidadePessoaEntityEnderecoNome?: string, entidadePessoaEntityDdd1?: string, entidadePessoaEntityDdd2?: string, entidadePessoaEntityDddfax?: string, entidadePessoaEntityFone2Numero?: string, entidadePessoaEntityFoneNumero?: string, entidadePessoaEntityFaxNumero?: string, entidadePessoaEntityNumero?: string, entidadePessoaEntityCidade?: number, entidadePessoaEntityEndereco?: string, entidadePessoaEntityFone?: string, entidadePessoaEntityFone2?: string, entidadePessoaEntityFax?: string, entidadePessoaEntityBairro?: string, entidadePessoaEntityCep?: string, entidadePessoaEntityContato?: string, entidadePessoaEntityLimiteCredito?: number, entidadePessoaEntityPai?: string, entidadePessoaEntityMae?: string, entidadePessoaEntityConjuge?: string, entidadePessoaEntityNaturalidade?: string, entidadePessoaEntityAvaliacao?: string, entidadePessoaEntityObservacao?: string, entidadePessoaEntityInativo?: boolean, entidadePessoaEntityRenda?: number, entidadePessoaEntityLocalTrabalho?: string, entidadePessoaEntityFoneTrabalho?: string, entidadePessoaEntityDataAdmissao?: Date, entidadePessoaEntityReferencia1?: string, entidadePessoaEntityReferencia2?: string, entidadePessoaEntityReferencia3?: string, entidadePessoaEntityDataCarga?: Date, entidadePessoaEntitySaldoDevedor?: number, entidadePessoaEntityDiaPgto?: number, entidadePessoaEntityCidadeD?: string, entidadePessoaEntityUfD?: string, entidadePessoaEntityBloq?: string, entidadePessoaEntityFormaPagamento?: number, entidadePessoaEntityInformativo?: string, entidadePessoaEntityClasse?: string, entidadePessoaEntityPrecoCusto?: string, entidadePessoaEntitySenha?: string, entidadePessoaEntityDescontoVenda?: number, entidadePessoaEntityDataCadastro?: Date, entidadePessoaEntityEmail?: string, entidadePessoaEntityContatoCliente?: string, entidadePessoaEntityNomeFantasia?: string, entidadePessoaEntityFechamento?: string, entidadePessoaEntityVenderPrecoCusto?: boolean, entidadePessoaEntityValorCredito?: number, entidadePessoaEntityObservacaoEndereco?: string, entidadePessoaEntityApelido?: string, entidadePessoaEntityBloquearCrediario?: boolean, entidadePessoaEntityNumeroCalcado?: string, entidadePessoaEntityPontosFidelidade?: number, entidadePessoaEntityCondicaoPagamento?: number, entidadePessoaEntityListaPadrao?: number, entidadePessoaEntityVenderTaxaGrupo?: boolean, entidadePessoaEntityNCartao?: string, entidadePessoaEntityGrupoFiscal?: number, entidadePessoaEntityProfissao?: string, entidadePessoaEntityNumeroCartao?: string, entidadePessoaEntityContaParticular?: boolean, entidadePessoaEntityDuplicata?: boolean, entidadePessoaEntityDataAlteracao?: Date, entidadePessoaEntityZonaVenda?: number, entidadePessoaEntitySituacaoAfapi?: string, entidadePessoaEntityDataUltimaVenda?: Date, entidadePessoaEntityImpagavel?: boolean, entidadePessoaEntityMatricula?: string, entidadePessoaEntityMensagemConvenio?: string, entidadePessoaEntityLimiteChequePendente?: number, entidadePessoaEntityEnderecoPagamento?: string, entidadePessoaEntityFonePagamento?: string, entidadePessoaEntityCepPagamento?: string, entidadePessoaEntityBairroPagamento?: string, entidadePessoaEntityContatoPagamento?: string, entidadePessoaEntityBloquearVendaCheque?: boolean, entidadePessoaEntitySexo?: string, entidadePessoaEntityBloquearConsignacao?: boolean, entidadePessoaEntityLimiteConsignacao?: number, entidadePessoaEntityEstadoCivil?: string, entidadePessoaEntityNumeroSuframa?: string, entidadePessoaEntityFretePadrao?: number, entidadePessoaEntityPadrao?: boolean, entidadePessoaEntityRoteadorPuxou?: boolean, entidadePessoaEntityDataExpedicaoRg?: Date, entidadePessoaEntityBloquearVenderOrcamento?: boolean, entidadePessoaEntityConsumidorFinal?: boolean, entidadePessoaEntityIsFuncionario?: boolean, entidadePessoaEntityComissionado?: number, entidadePessoaEntityExibirObservacao?: boolean, entidadePessoaEntityRegimeTributario?: number, entidadePessoaEntityClinicaIndicou?: number, entidadePessoaEntityProfissionalIndicou?: number, entidadePessoaEntityDataIndicacao?: Date, entidadePessoaEntityEnderecoEntrega?: string, entidadePessoaEntityBairroEntrega?: string, entidadePessoaEntityCidadeEntrega?: number, entidadePessoaEntityFoneEntrega?: string, entidadePessoaEntityContatoEntrega?: string, entidadePessoaEntityCepEntrega?: string, entidadePessoaEntityValorFrete?: number, entidadePessoaEntityBanco?: string, entidadePessoaEntityAgencia?: string, entidadePessoaEntityAgenciaDV?: number, entidadePessoaEntityConta?: string, entidadePessoaEntityContaDV?: number, entidadePessoaEntityTransportadora?: number, entidadePessoaEntityBloquearVendaDinheiro?: boolean, entidadePessoaEntityBloquearAlterarDependente?: boolean, entidadePessoaEntityBloquearAlterarPlaca?: boolean, entidadePessoaEntityComissao?: number, entidadePessoaEntityValorChequePendente?: number, entidadePessoaEntityBloquearPontoFidelidade?: boolean, entidadePessoaEntityComplemento?: string, entidadePessoaEntityMatriz?: number, entidadePessoaEntitySituacaoOrcamento?: number, entidadePessoaEntityZonaEntrega?: number, entidadePessoaEntityBloquearVendaSemKm?: boolean, entidadePessoaEntityEmpresaOrigem?: number, entidadePessoaEntityEmpresasOng?: Array<number>, entidadePessoaEntityObs?: string, entidadePessoaEntityBloquearTicket?: boolean, entidadePessoaEntityBloquearCartao?: boolean, entidadePessoaEntityInscricaoMunicipal?: string, entidadePessoaEntityContribuinteIcms?: string, entidadePessoaEntityEmailsPromocionais?: boolean, entidadePessoaEntityTitularContaCorrente?: string, entidadePessoaEntityOperacaoContaCorrente?: string, entidadePessoaEntityTipoContaCorrente?: string, entidadePessoaEntityDDDCelular?: string, entidadePessoaEntityNumeroCelular?: string, entidadePessoaEntityBloquearCredito?: boolean, entidadePessoaEntityClinica?: boolean, entidadePessoaEntityIsOng?: boolean, entidadePessoaEntityCelular?: string, entidadePessoaEntityAssinaturaPessoa?: number, entidadePessoaEntityAssinaturaAssinatura?: string, entidadePessoaEntityAssinaturaPreencheuClasse?: boolean, entidadePessoaEntityAssinaturaIsInativo?: boolean, entidadePessoaEntityAssinaturaIgnorarDuplicidade?: boolean, entidadePessoaEntityCodigoTOTVS?: string, entidadePessoaEntityContaIntegracaoContabil?: number, entidadePessoaEntityStoomClienteID?: number, entidadePessoaEntityStoomClienteToken?: string, entidadePessoaEntityIgnorarValidacaoCPF?: boolean, entidadePessoaEntityCamposValor?: Array<any>, entidadePessoaEntityProdutosContinuos?: Array<any>, entidadePessoaEntityGrupoFornecedorContabil?: number, entidadePessoaEntitySujeitoPassivo?: boolean, entidadePessoaEntityIdIFood?: number, entidadePessoaEntityPreencheuClasse?: boolean, entidadePessoaEntityIsInativo?: boolean, entidadePessoaEntityIgnorarDuplicidade?: boolean, entidadePreencheuClasse?: boolean, entidadeIsInativo?: boolean, entidadeIgnorarDuplicidade?: boolean, parametrosAdicionaisParametros?: Array<any>, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public testeAngularGravar(entidadePessoa?: number, entidadeDataCarga?: Date, entidadePessoaEntityCodigo?: number, entidadePessoaEntityNome?: string, entidadePessoaEntityTipo?: string, entidadePessoaEntityCpf?: string, entidadePessoaEntityRg?: string, entidadePessoaEntityDataNasc?: Date, entidadePessoaEntityUsuario?: number, entidadePessoaEntityVendedor?: number, entidadePessoaEntityConvenio?: number, entidadePessoaEntityClienteInternet?: number, entidadePessoaEntityCategoriaCartao?: number, entidadePessoaEntityCidadePagamento?: number, entidadePessoaEntityConceitoCliente?: number, entidadePessoaEntityServicoDelivery?: number, entidadePessoaEntityDocMercantil?: number, entidadePessoaEntitySegmento?: number, entidadePessoaEntityOrdemVisita?: number, entidadePessoaEntityCodigoClientePessoa?: number, entidadePessoaEntityCodigoFornecedorPessoa?: number, entidadePessoaEntityCodigoTransportadoraPessoa?: number, entidadePessoaEntityContaContabil?: number, entidadePessoaEntityUsuarioAlteracao?: number, entidadePessoaEntityRepresentante?: number, entidadePessoaEntityEnderecoNome?: string, entidadePessoaEntityDdd1?: string, entidadePessoaEntityDdd2?: string, entidadePessoaEntityDddfax?: string, entidadePessoaEntityFone2Numero?: string, entidadePessoaEntityFoneNumero?: string, entidadePessoaEntityFaxNumero?: string, entidadePessoaEntityNumero?: string, entidadePessoaEntityCidade?: number, entidadePessoaEntityEndereco?: string, entidadePessoaEntityFone?: string, entidadePessoaEntityFone2?: string, entidadePessoaEntityFax?: string, entidadePessoaEntityBairro?: string, entidadePessoaEntityCep?: string, entidadePessoaEntityContato?: string, entidadePessoaEntityLimiteCredito?: number, entidadePessoaEntityPai?: string, entidadePessoaEntityMae?: string, entidadePessoaEntityConjuge?: string, entidadePessoaEntityNaturalidade?: string, entidadePessoaEntityAvaliacao?: string, entidadePessoaEntityObservacao?: string, entidadePessoaEntityInativo?: boolean, entidadePessoaEntityRenda?: number, entidadePessoaEntityLocalTrabalho?: string, entidadePessoaEntityFoneTrabalho?: string, entidadePessoaEntityDataAdmissao?: Date, entidadePessoaEntityReferencia1?: string, entidadePessoaEntityReferencia2?: string, entidadePessoaEntityReferencia3?: string, entidadePessoaEntityDataCarga?: Date, entidadePessoaEntitySaldoDevedor?: number, entidadePessoaEntityDiaPgto?: number, entidadePessoaEntityCidadeD?: string, entidadePessoaEntityUfD?: string, entidadePessoaEntityBloq?: string, entidadePessoaEntityFormaPagamento?: number, entidadePessoaEntityInformativo?: string, entidadePessoaEntityClasse?: string, entidadePessoaEntityPrecoCusto?: string, entidadePessoaEntitySenha?: string, entidadePessoaEntityDescontoVenda?: number, entidadePessoaEntityDataCadastro?: Date, entidadePessoaEntityEmail?: string, entidadePessoaEntityContatoCliente?: string, entidadePessoaEntityNomeFantasia?: string, entidadePessoaEntityFechamento?: string, entidadePessoaEntityVenderPrecoCusto?: boolean, entidadePessoaEntityValorCredito?: number, entidadePessoaEntityObservacaoEndereco?: string, entidadePessoaEntityApelido?: string, entidadePessoaEntityBloquearCrediario?: boolean, entidadePessoaEntityNumeroCalcado?: string, entidadePessoaEntityPontosFidelidade?: number, entidadePessoaEntityCondicaoPagamento?: number, entidadePessoaEntityListaPadrao?: number, entidadePessoaEntityVenderTaxaGrupo?: boolean, entidadePessoaEntityNCartao?: string, entidadePessoaEntityGrupoFiscal?: number, entidadePessoaEntityProfissao?: string, entidadePessoaEntityNumeroCartao?: string, entidadePessoaEntityContaParticular?: boolean, entidadePessoaEntityDuplicata?: boolean, entidadePessoaEntityDataAlteracao?: Date, entidadePessoaEntityZonaVenda?: number, entidadePessoaEntitySituacaoAfapi?: string, entidadePessoaEntityDataUltimaVenda?: Date, entidadePessoaEntityImpagavel?: boolean, entidadePessoaEntityMatricula?: string, entidadePessoaEntityMensagemConvenio?: string, entidadePessoaEntityLimiteChequePendente?: number, entidadePessoaEntityEnderecoPagamento?: string, entidadePessoaEntityFonePagamento?: string, entidadePessoaEntityCepPagamento?: string, entidadePessoaEntityBairroPagamento?: string, entidadePessoaEntityContatoPagamento?: string, entidadePessoaEntityBloquearVendaCheque?: boolean, entidadePessoaEntitySexo?: string, entidadePessoaEntityBloquearConsignacao?: boolean, entidadePessoaEntityLimiteConsignacao?: number, entidadePessoaEntityEstadoCivil?: string, entidadePessoaEntityNumeroSuframa?: string, entidadePessoaEntityFretePadrao?: number, entidadePessoaEntityPadrao?: boolean, entidadePessoaEntityRoteadorPuxou?: boolean, entidadePessoaEntityDataExpedicaoRg?: Date, entidadePessoaEntityBloquearVenderOrcamento?: boolean, entidadePessoaEntityConsumidorFinal?: boolean, entidadePessoaEntityIsFuncionario?: boolean, entidadePessoaEntityComissionado?: number, entidadePessoaEntityExibirObservacao?: boolean, entidadePessoaEntityRegimeTributario?: number, entidadePessoaEntityClinicaIndicou?: number, entidadePessoaEntityProfissionalIndicou?: number, entidadePessoaEntityDataIndicacao?: Date, entidadePessoaEntityEnderecoEntrega?: string, entidadePessoaEntityBairroEntrega?: string, entidadePessoaEntityCidadeEntrega?: number, entidadePessoaEntityFoneEntrega?: string, entidadePessoaEntityContatoEntrega?: string, entidadePessoaEntityCepEntrega?: string, entidadePessoaEntityValorFrete?: number, entidadePessoaEntityBanco?: string, entidadePessoaEntityAgencia?: string, entidadePessoaEntityAgenciaDV?: number, entidadePessoaEntityConta?: string, entidadePessoaEntityContaDV?: number, entidadePessoaEntityTransportadora?: number, entidadePessoaEntityBloquearVendaDinheiro?: boolean, entidadePessoaEntityBloquearAlterarDependente?: boolean, entidadePessoaEntityBloquearAlterarPlaca?: boolean, entidadePessoaEntityComissao?: number, entidadePessoaEntityValorChequePendente?: number, entidadePessoaEntityBloquearPontoFidelidade?: boolean, entidadePessoaEntityComplemento?: string, entidadePessoaEntityMatriz?: number, entidadePessoaEntitySituacaoOrcamento?: number, entidadePessoaEntityZonaEntrega?: number, entidadePessoaEntityBloquearVendaSemKm?: boolean, entidadePessoaEntityEmpresaOrigem?: number, entidadePessoaEntityEmpresasOng?: Array<number>, entidadePessoaEntityObs?: string, entidadePessoaEntityBloquearTicket?: boolean, entidadePessoaEntityBloquearCartao?: boolean, entidadePessoaEntityInscricaoMunicipal?: string, entidadePessoaEntityContribuinteIcms?: string, entidadePessoaEntityEmailsPromocionais?: boolean, entidadePessoaEntityTitularContaCorrente?: string, entidadePessoaEntityOperacaoContaCorrente?: string, entidadePessoaEntityTipoContaCorrente?: string, entidadePessoaEntityDDDCelular?: string, entidadePessoaEntityNumeroCelular?: string, entidadePessoaEntityBloquearCredito?: boolean, entidadePessoaEntityClinica?: boolean, entidadePessoaEntityIsOng?: boolean, entidadePessoaEntityCelular?: string, entidadePessoaEntityAssinaturaPessoa?: number, entidadePessoaEntityAssinaturaAssinatura?: string, entidadePessoaEntityAssinaturaPreencheuClasse?: boolean, entidadePessoaEntityAssinaturaIsInativo?: boolean, entidadePessoaEntityAssinaturaIgnorarDuplicidade?: boolean, entidadePessoaEntityCodigoTOTVS?: string, entidadePessoaEntityContaIntegracaoContabil?: number, entidadePessoaEntityStoomClienteID?: number, entidadePessoaEntityStoomClienteToken?: string, entidadePessoaEntityIgnorarValidacaoCPF?: boolean, entidadePessoaEntityCamposValor?: Array<any>, entidadePessoaEntityProdutosContinuos?: Array<any>, entidadePessoaEntityGrupoFornecedorContabil?: number, entidadePessoaEntitySujeitoPassivo?: boolean, entidadePessoaEntityIdIFood?: number, entidadePessoaEntityPreencheuClasse?: boolean, entidadePessoaEntityIsInativo?: boolean, entidadePessoaEntityIgnorarDuplicidade?: boolean, entidadePreencheuClasse?: boolean, entidadeIsInativo?: boolean, entidadeIgnorarDuplicidade?: boolean, parametrosAdicionaisParametros?: Array<any>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public testeAngularGravar(entidadePessoa?: number, entidadeDataCarga?: Date, entidadePessoaEntityCodigo?: number, entidadePessoaEntityNome?: string, entidadePessoaEntityTipo?: string, entidadePessoaEntityCpf?: string, entidadePessoaEntityRg?: string, entidadePessoaEntityDataNasc?: Date, entidadePessoaEntityUsuario?: number, entidadePessoaEntityVendedor?: number, entidadePessoaEntityConvenio?: number, entidadePessoaEntityClienteInternet?: number, entidadePessoaEntityCategoriaCartao?: number, entidadePessoaEntityCidadePagamento?: number, entidadePessoaEntityConceitoCliente?: number, entidadePessoaEntityServicoDelivery?: number, entidadePessoaEntityDocMercantil?: number, entidadePessoaEntitySegmento?: number, entidadePessoaEntityOrdemVisita?: number, entidadePessoaEntityCodigoClientePessoa?: number, entidadePessoaEntityCodigoFornecedorPessoa?: number, entidadePessoaEntityCodigoTransportadoraPessoa?: number, entidadePessoaEntityContaContabil?: number, entidadePessoaEntityUsuarioAlteracao?: number, entidadePessoaEntityRepresentante?: number, entidadePessoaEntityEnderecoNome?: string, entidadePessoaEntityDdd1?: string, entidadePessoaEntityDdd2?: string, entidadePessoaEntityDddfax?: string, entidadePessoaEntityFone2Numero?: string, entidadePessoaEntityFoneNumero?: string, entidadePessoaEntityFaxNumero?: string, entidadePessoaEntityNumero?: string, entidadePessoaEntityCidade?: number, entidadePessoaEntityEndereco?: string, entidadePessoaEntityFone?: string, entidadePessoaEntityFone2?: string, entidadePessoaEntityFax?: string, entidadePessoaEntityBairro?: string, entidadePessoaEntityCep?: string, entidadePessoaEntityContato?: string, entidadePessoaEntityLimiteCredito?: number, entidadePessoaEntityPai?: string, entidadePessoaEntityMae?: string, entidadePessoaEntityConjuge?: string, entidadePessoaEntityNaturalidade?: string, entidadePessoaEntityAvaliacao?: string, entidadePessoaEntityObservacao?: string, entidadePessoaEntityInativo?: boolean, entidadePessoaEntityRenda?: number, entidadePessoaEntityLocalTrabalho?: string, entidadePessoaEntityFoneTrabalho?: string, entidadePessoaEntityDataAdmissao?: Date, entidadePessoaEntityReferencia1?: string, entidadePessoaEntityReferencia2?: string, entidadePessoaEntityReferencia3?: string, entidadePessoaEntityDataCarga?: Date, entidadePessoaEntitySaldoDevedor?: number, entidadePessoaEntityDiaPgto?: number, entidadePessoaEntityCidadeD?: string, entidadePessoaEntityUfD?: string, entidadePessoaEntityBloq?: string, entidadePessoaEntityFormaPagamento?: number, entidadePessoaEntityInformativo?: string, entidadePessoaEntityClasse?: string, entidadePessoaEntityPrecoCusto?: string, entidadePessoaEntitySenha?: string, entidadePessoaEntityDescontoVenda?: number, entidadePessoaEntityDataCadastro?: Date, entidadePessoaEntityEmail?: string, entidadePessoaEntityContatoCliente?: string, entidadePessoaEntityNomeFantasia?: string, entidadePessoaEntityFechamento?: string, entidadePessoaEntityVenderPrecoCusto?: boolean, entidadePessoaEntityValorCredito?: number, entidadePessoaEntityObservacaoEndereco?: string, entidadePessoaEntityApelido?: string, entidadePessoaEntityBloquearCrediario?: boolean, entidadePessoaEntityNumeroCalcado?: string, entidadePessoaEntityPontosFidelidade?: number, entidadePessoaEntityCondicaoPagamento?: number, entidadePessoaEntityListaPadrao?: number, entidadePessoaEntityVenderTaxaGrupo?: boolean, entidadePessoaEntityNCartao?: string, entidadePessoaEntityGrupoFiscal?: number, entidadePessoaEntityProfissao?: string, entidadePessoaEntityNumeroCartao?: string, entidadePessoaEntityContaParticular?: boolean, entidadePessoaEntityDuplicata?: boolean, entidadePessoaEntityDataAlteracao?: Date, entidadePessoaEntityZonaVenda?: number, entidadePessoaEntitySituacaoAfapi?: string, entidadePessoaEntityDataUltimaVenda?: Date, entidadePessoaEntityImpagavel?: boolean, entidadePessoaEntityMatricula?: string, entidadePessoaEntityMensagemConvenio?: string, entidadePessoaEntityLimiteChequePendente?: number, entidadePessoaEntityEnderecoPagamento?: string, entidadePessoaEntityFonePagamento?: string, entidadePessoaEntityCepPagamento?: string, entidadePessoaEntityBairroPagamento?: string, entidadePessoaEntityContatoPagamento?: string, entidadePessoaEntityBloquearVendaCheque?: boolean, entidadePessoaEntitySexo?: string, entidadePessoaEntityBloquearConsignacao?: boolean, entidadePessoaEntityLimiteConsignacao?: number, entidadePessoaEntityEstadoCivil?: string, entidadePessoaEntityNumeroSuframa?: string, entidadePessoaEntityFretePadrao?: number, entidadePessoaEntityPadrao?: boolean, entidadePessoaEntityRoteadorPuxou?: boolean, entidadePessoaEntityDataExpedicaoRg?: Date, entidadePessoaEntityBloquearVenderOrcamento?: boolean, entidadePessoaEntityConsumidorFinal?: boolean, entidadePessoaEntityIsFuncionario?: boolean, entidadePessoaEntityComissionado?: number, entidadePessoaEntityExibirObservacao?: boolean, entidadePessoaEntityRegimeTributario?: number, entidadePessoaEntityClinicaIndicou?: number, entidadePessoaEntityProfissionalIndicou?: number, entidadePessoaEntityDataIndicacao?: Date, entidadePessoaEntityEnderecoEntrega?: string, entidadePessoaEntityBairroEntrega?: string, entidadePessoaEntityCidadeEntrega?: number, entidadePessoaEntityFoneEntrega?: string, entidadePessoaEntityContatoEntrega?: string, entidadePessoaEntityCepEntrega?: string, entidadePessoaEntityValorFrete?: number, entidadePessoaEntityBanco?: string, entidadePessoaEntityAgencia?: string, entidadePessoaEntityAgenciaDV?: number, entidadePessoaEntityConta?: string, entidadePessoaEntityContaDV?: number, entidadePessoaEntityTransportadora?: number, entidadePessoaEntityBloquearVendaDinheiro?: boolean, entidadePessoaEntityBloquearAlterarDependente?: boolean, entidadePessoaEntityBloquearAlterarPlaca?: boolean, entidadePessoaEntityComissao?: number, entidadePessoaEntityValorChequePendente?: number, entidadePessoaEntityBloquearPontoFidelidade?: boolean, entidadePessoaEntityComplemento?: string, entidadePessoaEntityMatriz?: number, entidadePessoaEntitySituacaoOrcamento?: number, entidadePessoaEntityZonaEntrega?: number, entidadePessoaEntityBloquearVendaSemKm?: boolean, entidadePessoaEntityEmpresaOrigem?: number, entidadePessoaEntityEmpresasOng?: Array<number>, entidadePessoaEntityObs?: string, entidadePessoaEntityBloquearTicket?: boolean, entidadePessoaEntityBloquearCartao?: boolean, entidadePessoaEntityInscricaoMunicipal?: string, entidadePessoaEntityContribuinteIcms?: string, entidadePessoaEntityEmailsPromocionais?: boolean, entidadePessoaEntityTitularContaCorrente?: string, entidadePessoaEntityOperacaoContaCorrente?: string, entidadePessoaEntityTipoContaCorrente?: string, entidadePessoaEntityDDDCelular?: string, entidadePessoaEntityNumeroCelular?: string, entidadePessoaEntityBloquearCredito?: boolean, entidadePessoaEntityClinica?: boolean, entidadePessoaEntityIsOng?: boolean, entidadePessoaEntityCelular?: string, entidadePessoaEntityAssinaturaPessoa?: number, entidadePessoaEntityAssinaturaAssinatura?: string, entidadePessoaEntityAssinaturaPreencheuClasse?: boolean, entidadePessoaEntityAssinaturaIsInativo?: boolean, entidadePessoaEntityAssinaturaIgnorarDuplicidade?: boolean, entidadePessoaEntityCodigoTOTVS?: string, entidadePessoaEntityContaIntegracaoContabil?: number, entidadePessoaEntityStoomClienteID?: number, entidadePessoaEntityStoomClienteToken?: string, entidadePessoaEntityIgnorarValidacaoCPF?: boolean, entidadePessoaEntityCamposValor?: Array<any>, entidadePessoaEntityProdutosContinuos?: Array<any>, entidadePessoaEntityGrupoFornecedorContabil?: number, entidadePessoaEntitySujeitoPassivo?: boolean, entidadePessoaEntityIdIFood?: number, entidadePessoaEntityPreencheuClasse?: boolean, entidadePessoaEntityIsInativo?: boolean, entidadePessoaEntityIgnorarDuplicidade?: boolean, entidadePreencheuClasse?: boolean, entidadeIsInativo?: boolean, entidadeIgnorarDuplicidade?: boolean, parametrosAdicionaisParametros?: Array<any>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public testeAngularGravar(entidadePessoa?: number, entidadeDataCarga?: Date, entidadePessoaEntityCodigo?: number, entidadePessoaEntityNome?: string, entidadePessoaEntityTipo?: string, entidadePessoaEntityCpf?: string, entidadePessoaEntityRg?: string, entidadePessoaEntityDataNasc?: Date, entidadePessoaEntityUsuario?: number, entidadePessoaEntityVendedor?: number, entidadePessoaEntityConvenio?: number, entidadePessoaEntityClienteInternet?: number, entidadePessoaEntityCategoriaCartao?: number, entidadePessoaEntityCidadePagamento?: number, entidadePessoaEntityConceitoCliente?: number, entidadePessoaEntityServicoDelivery?: number, entidadePessoaEntityDocMercantil?: number, entidadePessoaEntitySegmento?: number, entidadePessoaEntityOrdemVisita?: number, entidadePessoaEntityCodigoClientePessoa?: number, entidadePessoaEntityCodigoFornecedorPessoa?: number, entidadePessoaEntityCodigoTransportadoraPessoa?: number, entidadePessoaEntityContaContabil?: number, entidadePessoaEntityUsuarioAlteracao?: number, entidadePessoaEntityRepresentante?: number, entidadePessoaEntityEnderecoNome?: string, entidadePessoaEntityDdd1?: string, entidadePessoaEntityDdd2?: string, entidadePessoaEntityDddfax?: string, entidadePessoaEntityFone2Numero?: string, entidadePessoaEntityFoneNumero?: string, entidadePessoaEntityFaxNumero?: string, entidadePessoaEntityNumero?: string, entidadePessoaEntityCidade?: number, entidadePessoaEntityEndereco?: string, entidadePessoaEntityFone?: string, entidadePessoaEntityFone2?: string, entidadePessoaEntityFax?: string, entidadePessoaEntityBairro?: string, entidadePessoaEntityCep?: string, entidadePessoaEntityContato?: string, entidadePessoaEntityLimiteCredito?: number, entidadePessoaEntityPai?: string, entidadePessoaEntityMae?: string, entidadePessoaEntityConjuge?: string, entidadePessoaEntityNaturalidade?: string, entidadePessoaEntityAvaliacao?: string, entidadePessoaEntityObservacao?: string, entidadePessoaEntityInativo?: boolean, entidadePessoaEntityRenda?: number, entidadePessoaEntityLocalTrabalho?: string, entidadePessoaEntityFoneTrabalho?: string, entidadePessoaEntityDataAdmissao?: Date, entidadePessoaEntityReferencia1?: string, entidadePessoaEntityReferencia2?: string, entidadePessoaEntityReferencia3?: string, entidadePessoaEntityDataCarga?: Date, entidadePessoaEntitySaldoDevedor?: number, entidadePessoaEntityDiaPgto?: number, entidadePessoaEntityCidadeD?: string, entidadePessoaEntityUfD?: string, entidadePessoaEntityBloq?: string, entidadePessoaEntityFormaPagamento?: number, entidadePessoaEntityInformativo?: string, entidadePessoaEntityClasse?: string, entidadePessoaEntityPrecoCusto?: string, entidadePessoaEntitySenha?: string, entidadePessoaEntityDescontoVenda?: number, entidadePessoaEntityDataCadastro?: Date, entidadePessoaEntityEmail?: string, entidadePessoaEntityContatoCliente?: string, entidadePessoaEntityNomeFantasia?: string, entidadePessoaEntityFechamento?: string, entidadePessoaEntityVenderPrecoCusto?: boolean, entidadePessoaEntityValorCredito?: number, entidadePessoaEntityObservacaoEndereco?: string, entidadePessoaEntityApelido?: string, entidadePessoaEntityBloquearCrediario?: boolean, entidadePessoaEntityNumeroCalcado?: string, entidadePessoaEntityPontosFidelidade?: number, entidadePessoaEntityCondicaoPagamento?: number, entidadePessoaEntityListaPadrao?: number, entidadePessoaEntityVenderTaxaGrupo?: boolean, entidadePessoaEntityNCartao?: string, entidadePessoaEntityGrupoFiscal?: number, entidadePessoaEntityProfissao?: string, entidadePessoaEntityNumeroCartao?: string, entidadePessoaEntityContaParticular?: boolean, entidadePessoaEntityDuplicata?: boolean, entidadePessoaEntityDataAlteracao?: Date, entidadePessoaEntityZonaVenda?: number, entidadePessoaEntitySituacaoAfapi?: string, entidadePessoaEntityDataUltimaVenda?: Date, entidadePessoaEntityImpagavel?: boolean, entidadePessoaEntityMatricula?: string, entidadePessoaEntityMensagemConvenio?: string, entidadePessoaEntityLimiteChequePendente?: number, entidadePessoaEntityEnderecoPagamento?: string, entidadePessoaEntityFonePagamento?: string, entidadePessoaEntityCepPagamento?: string, entidadePessoaEntityBairroPagamento?: string, entidadePessoaEntityContatoPagamento?: string, entidadePessoaEntityBloquearVendaCheque?: boolean, entidadePessoaEntitySexo?: string, entidadePessoaEntityBloquearConsignacao?: boolean, entidadePessoaEntityLimiteConsignacao?: number, entidadePessoaEntityEstadoCivil?: string, entidadePessoaEntityNumeroSuframa?: string, entidadePessoaEntityFretePadrao?: number, entidadePessoaEntityPadrao?: boolean, entidadePessoaEntityRoteadorPuxou?: boolean, entidadePessoaEntityDataExpedicaoRg?: Date, entidadePessoaEntityBloquearVenderOrcamento?: boolean, entidadePessoaEntityConsumidorFinal?: boolean, entidadePessoaEntityIsFuncionario?: boolean, entidadePessoaEntityComissionado?: number, entidadePessoaEntityExibirObservacao?: boolean, entidadePessoaEntityRegimeTributario?: number, entidadePessoaEntityClinicaIndicou?: number, entidadePessoaEntityProfissionalIndicou?: number, entidadePessoaEntityDataIndicacao?: Date, entidadePessoaEntityEnderecoEntrega?: string, entidadePessoaEntityBairroEntrega?: string, entidadePessoaEntityCidadeEntrega?: number, entidadePessoaEntityFoneEntrega?: string, entidadePessoaEntityContatoEntrega?: string, entidadePessoaEntityCepEntrega?: string, entidadePessoaEntityValorFrete?: number, entidadePessoaEntityBanco?: string, entidadePessoaEntityAgencia?: string, entidadePessoaEntityAgenciaDV?: number, entidadePessoaEntityConta?: string, entidadePessoaEntityContaDV?: number, entidadePessoaEntityTransportadora?: number, entidadePessoaEntityBloquearVendaDinheiro?: boolean, entidadePessoaEntityBloquearAlterarDependente?: boolean, entidadePessoaEntityBloquearAlterarPlaca?: boolean, entidadePessoaEntityComissao?: number, entidadePessoaEntityValorChequePendente?: number, entidadePessoaEntityBloquearPontoFidelidade?: boolean, entidadePessoaEntityComplemento?: string, entidadePessoaEntityMatriz?: number, entidadePessoaEntitySituacaoOrcamento?: number, entidadePessoaEntityZonaEntrega?: number, entidadePessoaEntityBloquearVendaSemKm?: boolean, entidadePessoaEntityEmpresaOrigem?: number, entidadePessoaEntityEmpresasOng?: Array<number>, entidadePessoaEntityObs?: string, entidadePessoaEntityBloquearTicket?: boolean, entidadePessoaEntityBloquearCartao?: boolean, entidadePessoaEntityInscricaoMunicipal?: string, entidadePessoaEntityContribuinteIcms?: string, entidadePessoaEntityEmailsPromocionais?: boolean, entidadePessoaEntityTitularContaCorrente?: string, entidadePessoaEntityOperacaoContaCorrente?: string, entidadePessoaEntityTipoContaCorrente?: string, entidadePessoaEntityDDDCelular?: string, entidadePessoaEntityNumeroCelular?: string, entidadePessoaEntityBloquearCredito?: boolean, entidadePessoaEntityClinica?: boolean, entidadePessoaEntityIsOng?: boolean, entidadePessoaEntityCelular?: string, entidadePessoaEntityAssinaturaPessoa?: number, entidadePessoaEntityAssinaturaAssinatura?: string, entidadePessoaEntityAssinaturaPreencheuClasse?: boolean, entidadePessoaEntityAssinaturaIsInativo?: boolean, entidadePessoaEntityAssinaturaIgnorarDuplicidade?: boolean, entidadePessoaEntityCodigoTOTVS?: string, entidadePessoaEntityContaIntegracaoContabil?: number, entidadePessoaEntityStoomClienteID?: number, entidadePessoaEntityStoomClienteToken?: string, entidadePessoaEntityIgnorarValidacaoCPF?: boolean, entidadePessoaEntityCamposValor?: Array<any>, entidadePessoaEntityProdutosContinuos?: Array<any>, entidadePessoaEntityGrupoFornecedorContabil?: number, entidadePessoaEntitySujeitoPassivo?: boolean, entidadePessoaEntityIdIFood?: number, entidadePessoaEntityPreencheuClasse?: boolean, entidadePessoaEntityIsInativo?: boolean, entidadePessoaEntityIgnorarDuplicidade?: boolean, entidadePreencheuClasse?: boolean, entidadeIsInativo?: boolean, entidadeIgnorarDuplicidade?: boolean, parametrosAdicionaisParametros?: Array<any>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

























































































































































































        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (entidadePessoa !== undefined && entidadePessoa !== null) {
            queryParameters = queryParameters.set('Entidade.pessoa', <any>entidadePessoa);
        }
        if (entidadeDataCarga !== undefined && entidadeDataCarga !== null) {
            queryParameters = queryParameters.set('Entidade.data_Carga', <any>entidadeDataCarga.toISOString());
        }
        if (entidadePessoaEntityCodigo !== undefined && entidadePessoaEntityCodigo !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.codigo', <any>entidadePessoaEntityCodigo);
        }
        if (entidadePessoaEntityNome !== undefined && entidadePessoaEntityNome !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.nome', <any>entidadePessoaEntityNome);
        }
        if (entidadePessoaEntityTipo !== undefined && entidadePessoaEntityTipo !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.tipo', <any>entidadePessoaEntityTipo);
        }
        if (entidadePessoaEntityCpf !== undefined && entidadePessoaEntityCpf !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.cpf', <any>entidadePessoaEntityCpf);
        }
        if (entidadePessoaEntityRg !== undefined && entidadePessoaEntityRg !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.rg', <any>entidadePessoaEntityRg);
        }
        if (entidadePessoaEntityDataNasc !== undefined && entidadePessoaEntityDataNasc !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.data_Nasc', <any>entidadePessoaEntityDataNasc.toISOString());
        }
        if (entidadePessoaEntityUsuario !== undefined && entidadePessoaEntityUsuario !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.usuario', <any>entidadePessoaEntityUsuario);
        }
        if (entidadePessoaEntityVendedor !== undefined && entidadePessoaEntityVendedor !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.vendedor', <any>entidadePessoaEntityVendedor);
        }
        if (entidadePessoaEntityConvenio !== undefined && entidadePessoaEntityConvenio !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.convenio', <any>entidadePessoaEntityConvenio);
        }
        if (entidadePessoaEntityClienteInternet !== undefined && entidadePessoaEntityClienteInternet !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.cliente_Internet', <any>entidadePessoaEntityClienteInternet);
        }
        if (entidadePessoaEntityCategoriaCartao !== undefined && entidadePessoaEntityCategoriaCartao !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.categoria_Cartao', <any>entidadePessoaEntityCategoriaCartao);
        }
        if (entidadePessoaEntityCidadePagamento !== undefined && entidadePessoaEntityCidadePagamento !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.cidade_Pagamento', <any>entidadePessoaEntityCidadePagamento);
        }
        if (entidadePessoaEntityConceitoCliente !== undefined && entidadePessoaEntityConceitoCliente !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.conceito_Cliente', <any>entidadePessoaEntityConceitoCliente);
        }
        if (entidadePessoaEntityServicoDelivery !== undefined && entidadePessoaEntityServicoDelivery !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.servico_Delivery', <any>entidadePessoaEntityServicoDelivery);
        }
        if (entidadePessoaEntityDocMercantil !== undefined && entidadePessoaEntityDocMercantil !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.doc_Mercantil', <any>entidadePessoaEntityDocMercantil);
        }
        if (entidadePessoaEntitySegmento !== undefined && entidadePessoaEntitySegmento !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.segmento', <any>entidadePessoaEntitySegmento);
        }
        if (entidadePessoaEntityOrdemVisita !== undefined && entidadePessoaEntityOrdemVisita !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.ordem_Visita', <any>entidadePessoaEntityOrdemVisita);
        }
        if (entidadePessoaEntityCodigoClientePessoa !== undefined && entidadePessoaEntityCodigoClientePessoa !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.codigo_Cliente_Pessoa', <any>entidadePessoaEntityCodigoClientePessoa);
        }
        if (entidadePessoaEntityCodigoFornecedorPessoa !== undefined && entidadePessoaEntityCodigoFornecedorPessoa !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.codigo_Fornecedor_Pessoa', <any>entidadePessoaEntityCodigoFornecedorPessoa);
        }
        if (entidadePessoaEntityCodigoTransportadoraPessoa !== undefined && entidadePessoaEntityCodigoTransportadoraPessoa !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.codigo_Transportadora_Pessoa', <any>entidadePessoaEntityCodigoTransportadoraPessoa);
        }
        if (entidadePessoaEntityContaContabil !== undefined && entidadePessoaEntityContaContabil !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.conta_Contabil', <any>entidadePessoaEntityContaContabil);
        }
        if (entidadePessoaEntityUsuarioAlteracao !== undefined && entidadePessoaEntityUsuarioAlteracao !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.usuario_Alteracao', <any>entidadePessoaEntityUsuarioAlteracao);
        }
        if (entidadePessoaEntityRepresentante !== undefined && entidadePessoaEntityRepresentante !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.representante', <any>entidadePessoaEntityRepresentante);
        }
        if (entidadePessoaEntityEnderecoNome !== undefined && entidadePessoaEntityEnderecoNome !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.endereco_Nome', <any>entidadePessoaEntityEnderecoNome);
        }
        if (entidadePessoaEntityDdd1 !== undefined && entidadePessoaEntityDdd1 !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.ddd1', <any>entidadePessoaEntityDdd1);
        }
        if (entidadePessoaEntityDdd2 !== undefined && entidadePessoaEntityDdd2 !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.ddd2', <any>entidadePessoaEntityDdd2);
        }
        if (entidadePessoaEntityDddfax !== undefined && entidadePessoaEntityDddfax !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.dddfax', <any>entidadePessoaEntityDddfax);
        }
        if (entidadePessoaEntityFone2Numero !== undefined && entidadePessoaEntityFone2Numero !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.fone2_Numero', <any>entidadePessoaEntityFone2Numero);
        }
        if (entidadePessoaEntityFoneNumero !== undefined && entidadePessoaEntityFoneNumero !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.fone_Numero', <any>entidadePessoaEntityFoneNumero);
        }
        if (entidadePessoaEntityFaxNumero !== undefined && entidadePessoaEntityFaxNumero !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.fax_Numero', <any>entidadePessoaEntityFaxNumero);
        }
        if (entidadePessoaEntityNumero !== undefined && entidadePessoaEntityNumero !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.numero', <any>entidadePessoaEntityNumero);
        }
        if (entidadePessoaEntityCidade !== undefined && entidadePessoaEntityCidade !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.cidade', <any>entidadePessoaEntityCidade);
        }
        if (entidadePessoaEntityEndereco !== undefined && entidadePessoaEntityEndereco !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.endereco', <any>entidadePessoaEntityEndereco);
        }
        if (entidadePessoaEntityFone !== undefined && entidadePessoaEntityFone !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.fone', <any>entidadePessoaEntityFone);
        }
        if (entidadePessoaEntityFone2 !== undefined && entidadePessoaEntityFone2 !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.fone2', <any>entidadePessoaEntityFone2);
        }
        if (entidadePessoaEntityFax !== undefined && entidadePessoaEntityFax !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.fax', <any>entidadePessoaEntityFax);
        }
        if (entidadePessoaEntityBairro !== undefined && entidadePessoaEntityBairro !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.bairro', <any>entidadePessoaEntityBairro);
        }
        if (entidadePessoaEntityCep !== undefined && entidadePessoaEntityCep !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.cep', <any>entidadePessoaEntityCep);
        }
        if (entidadePessoaEntityContato !== undefined && entidadePessoaEntityContato !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.contato', <any>entidadePessoaEntityContato);
        }
        if (entidadePessoaEntityLimiteCredito !== undefined && entidadePessoaEntityLimiteCredito !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.limite_Credito', <any>entidadePessoaEntityLimiteCredito);
        }
        if (entidadePessoaEntityPai !== undefined && entidadePessoaEntityPai !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.pai', <any>entidadePessoaEntityPai);
        }
        if (entidadePessoaEntityMae !== undefined && entidadePessoaEntityMae !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.mae', <any>entidadePessoaEntityMae);
        }
        if (entidadePessoaEntityConjuge !== undefined && entidadePessoaEntityConjuge !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.conjuge', <any>entidadePessoaEntityConjuge);
        }
        if (entidadePessoaEntityNaturalidade !== undefined && entidadePessoaEntityNaturalidade !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.naturalidade', <any>entidadePessoaEntityNaturalidade);
        }
        if (entidadePessoaEntityAvaliacao !== undefined && entidadePessoaEntityAvaliacao !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.avaliacao', <any>entidadePessoaEntityAvaliacao);
        }
        if (entidadePessoaEntityObservacao !== undefined && entidadePessoaEntityObservacao !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.observacao', <any>entidadePessoaEntityObservacao);
        }
        if (entidadePessoaEntityInativo !== undefined && entidadePessoaEntityInativo !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.inativo', <any>entidadePessoaEntityInativo);
        }
        if (entidadePessoaEntityRenda !== undefined && entidadePessoaEntityRenda !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.renda', <any>entidadePessoaEntityRenda);
        }
        if (entidadePessoaEntityLocalTrabalho !== undefined && entidadePessoaEntityLocalTrabalho !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.local_Trabalho', <any>entidadePessoaEntityLocalTrabalho);
        }
        if (entidadePessoaEntityFoneTrabalho !== undefined && entidadePessoaEntityFoneTrabalho !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.fone_Trabalho', <any>entidadePessoaEntityFoneTrabalho);
        }
        if (entidadePessoaEntityDataAdmissao !== undefined && entidadePessoaEntityDataAdmissao !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.data_Admissao', <any>entidadePessoaEntityDataAdmissao.toISOString());
        }
        if (entidadePessoaEntityReferencia1 !== undefined && entidadePessoaEntityReferencia1 !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.referencia1', <any>entidadePessoaEntityReferencia1);
        }
        if (entidadePessoaEntityReferencia2 !== undefined && entidadePessoaEntityReferencia2 !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.referencia2', <any>entidadePessoaEntityReferencia2);
        }
        if (entidadePessoaEntityReferencia3 !== undefined && entidadePessoaEntityReferencia3 !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.referencia3', <any>entidadePessoaEntityReferencia3);
        }
        if (entidadePessoaEntityDataCarga !== undefined && entidadePessoaEntityDataCarga !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.data_Carga', <any>entidadePessoaEntityDataCarga.toISOString());
        }
        if (entidadePessoaEntitySaldoDevedor !== undefined && entidadePessoaEntitySaldoDevedor !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.saldo_Devedor', <any>entidadePessoaEntitySaldoDevedor);
        }
        if (entidadePessoaEntityDiaPgto !== undefined && entidadePessoaEntityDiaPgto !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.dia_Pgto', <any>entidadePessoaEntityDiaPgto);
        }
        if (entidadePessoaEntityCidadeD !== undefined && entidadePessoaEntityCidadeD !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.cidade_D', <any>entidadePessoaEntityCidadeD);
        }
        if (entidadePessoaEntityUfD !== undefined && entidadePessoaEntityUfD !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.uf_D', <any>entidadePessoaEntityUfD);
        }
        if (entidadePessoaEntityBloq !== undefined && entidadePessoaEntityBloq !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.bloq', <any>entidadePessoaEntityBloq);
        }
        if (entidadePessoaEntityFormaPagamento !== undefined && entidadePessoaEntityFormaPagamento !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.forma_Pagamento', <any>entidadePessoaEntityFormaPagamento);
        }
        if (entidadePessoaEntityInformativo !== undefined && entidadePessoaEntityInformativo !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.informativo', <any>entidadePessoaEntityInformativo);
        }
        if (entidadePessoaEntityClasse !== undefined && entidadePessoaEntityClasse !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.classe', <any>entidadePessoaEntityClasse);
        }
        if (entidadePessoaEntityPrecoCusto !== undefined && entidadePessoaEntityPrecoCusto !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.preco_Custo', <any>entidadePessoaEntityPrecoCusto);
        }
        if (entidadePessoaEntitySenha !== undefined && entidadePessoaEntitySenha !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.senha', <any>entidadePessoaEntitySenha);
        }
        if (entidadePessoaEntityDescontoVenda !== undefined && entidadePessoaEntityDescontoVenda !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.desconto_Venda', <any>entidadePessoaEntityDescontoVenda);
        }
        if (entidadePessoaEntityDataCadastro !== undefined && entidadePessoaEntityDataCadastro !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.data_Cadastro', <any>entidadePessoaEntityDataCadastro.toISOString());
        }
        if (entidadePessoaEntityEmail !== undefined && entidadePessoaEntityEmail !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.email', <any>entidadePessoaEntityEmail);
        }
        if (entidadePessoaEntityContatoCliente !== undefined && entidadePessoaEntityContatoCliente !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.contato_Cliente', <any>entidadePessoaEntityContatoCliente);
        }
        if (entidadePessoaEntityNomeFantasia !== undefined && entidadePessoaEntityNomeFantasia !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.nome_Fantasia', <any>entidadePessoaEntityNomeFantasia);
        }
        if (entidadePessoaEntityFechamento !== undefined && entidadePessoaEntityFechamento !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.fechamento', <any>entidadePessoaEntityFechamento);
        }
        if (entidadePessoaEntityVenderPrecoCusto !== undefined && entidadePessoaEntityVenderPrecoCusto !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.vender_Preco_Custo', <any>entidadePessoaEntityVenderPrecoCusto);
        }
        if (entidadePessoaEntityValorCredito !== undefined && entidadePessoaEntityValorCredito !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.valor_Credito', <any>entidadePessoaEntityValorCredito);
        }
        if (entidadePessoaEntityObservacaoEndereco !== undefined && entidadePessoaEntityObservacaoEndereco !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.observacao_Endereco', <any>entidadePessoaEntityObservacaoEndereco);
        }
        if (entidadePessoaEntityApelido !== undefined && entidadePessoaEntityApelido !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.apelido', <any>entidadePessoaEntityApelido);
        }
        if (entidadePessoaEntityBloquearCrediario !== undefined && entidadePessoaEntityBloquearCrediario !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.bloquear_Crediario', <any>entidadePessoaEntityBloquearCrediario);
        }
        if (entidadePessoaEntityNumeroCalcado !== undefined && entidadePessoaEntityNumeroCalcado !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.numero_Calcado', <any>entidadePessoaEntityNumeroCalcado);
        }
        if (entidadePessoaEntityPontosFidelidade !== undefined && entidadePessoaEntityPontosFidelidade !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.pontos_Fidelidade', <any>entidadePessoaEntityPontosFidelidade);
        }
        if (entidadePessoaEntityCondicaoPagamento !== undefined && entidadePessoaEntityCondicaoPagamento !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.condicao_Pagamento', <any>entidadePessoaEntityCondicaoPagamento);
        }
        if (entidadePessoaEntityListaPadrao !== undefined && entidadePessoaEntityListaPadrao !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.lista_Padrao', <any>entidadePessoaEntityListaPadrao);
        }
        if (entidadePessoaEntityVenderTaxaGrupo !== undefined && entidadePessoaEntityVenderTaxaGrupo !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.vender_Taxa_Grupo', <any>entidadePessoaEntityVenderTaxaGrupo);
        }
        if (entidadePessoaEntityNCartao !== undefined && entidadePessoaEntityNCartao !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.n_Cartao', <any>entidadePessoaEntityNCartao);
        }
        if (entidadePessoaEntityGrupoFiscal !== undefined && entidadePessoaEntityGrupoFiscal !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.grupo_Fiscal', <any>entidadePessoaEntityGrupoFiscal);
        }
        if (entidadePessoaEntityProfissao !== undefined && entidadePessoaEntityProfissao !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.profissao', <any>entidadePessoaEntityProfissao);
        }
        if (entidadePessoaEntityNumeroCartao !== undefined && entidadePessoaEntityNumeroCartao !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.numero_Cartao', <any>entidadePessoaEntityNumeroCartao);
        }
        if (entidadePessoaEntityContaParticular !== undefined && entidadePessoaEntityContaParticular !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.conta_Particular', <any>entidadePessoaEntityContaParticular);
        }
        if (entidadePessoaEntityDuplicata !== undefined && entidadePessoaEntityDuplicata !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.duplicata', <any>entidadePessoaEntityDuplicata);
        }
        if (entidadePessoaEntityDataAlteracao !== undefined && entidadePessoaEntityDataAlteracao !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.data_Alteracao', <any>entidadePessoaEntityDataAlteracao.toISOString());
        }
        if (entidadePessoaEntityZonaVenda !== undefined && entidadePessoaEntityZonaVenda !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.zona_Venda', <any>entidadePessoaEntityZonaVenda);
        }
        if (entidadePessoaEntitySituacaoAfapi !== undefined && entidadePessoaEntitySituacaoAfapi !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.situacao_Afapi', <any>entidadePessoaEntitySituacaoAfapi);
        }
        if (entidadePessoaEntityDataUltimaVenda !== undefined && entidadePessoaEntityDataUltimaVenda !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.data_Ultima_Venda', <any>entidadePessoaEntityDataUltimaVenda.toISOString());
        }
        if (entidadePessoaEntityImpagavel !== undefined && entidadePessoaEntityImpagavel !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.impagavel', <any>entidadePessoaEntityImpagavel);
        }
        if (entidadePessoaEntityMatricula !== undefined && entidadePessoaEntityMatricula !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.matricula', <any>entidadePessoaEntityMatricula);
        }
        if (entidadePessoaEntityMensagemConvenio !== undefined && entidadePessoaEntityMensagemConvenio !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.mensagem_Convenio', <any>entidadePessoaEntityMensagemConvenio);
        }
        if (entidadePessoaEntityLimiteChequePendente !== undefined && entidadePessoaEntityLimiteChequePendente !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.limite_Cheque_Pendente', <any>entidadePessoaEntityLimiteChequePendente);
        }
        if (entidadePessoaEntityEnderecoPagamento !== undefined && entidadePessoaEntityEnderecoPagamento !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.endereco_Pagamento', <any>entidadePessoaEntityEnderecoPagamento);
        }
        if (entidadePessoaEntityFonePagamento !== undefined && entidadePessoaEntityFonePagamento !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.fone_Pagamento', <any>entidadePessoaEntityFonePagamento);
        }
        if (entidadePessoaEntityCepPagamento !== undefined && entidadePessoaEntityCepPagamento !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.cep_Pagamento', <any>entidadePessoaEntityCepPagamento);
        }
        if (entidadePessoaEntityBairroPagamento !== undefined && entidadePessoaEntityBairroPagamento !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.bairro_Pagamento', <any>entidadePessoaEntityBairroPagamento);
        }
        if (entidadePessoaEntityContatoPagamento !== undefined && entidadePessoaEntityContatoPagamento !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.contato_Pagamento', <any>entidadePessoaEntityContatoPagamento);
        }
        if (entidadePessoaEntityBloquearVendaCheque !== undefined && entidadePessoaEntityBloquearVendaCheque !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.bloquear_Venda_Cheque', <any>entidadePessoaEntityBloquearVendaCheque);
        }
        if (entidadePessoaEntitySexo !== undefined && entidadePessoaEntitySexo !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.sexo', <any>entidadePessoaEntitySexo);
        }
        if (entidadePessoaEntityBloquearConsignacao !== undefined && entidadePessoaEntityBloquearConsignacao !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.bloquear_Consignacao', <any>entidadePessoaEntityBloquearConsignacao);
        }
        if (entidadePessoaEntityLimiteConsignacao !== undefined && entidadePessoaEntityLimiteConsignacao !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.limite_Consignacao', <any>entidadePessoaEntityLimiteConsignacao);
        }
        if (entidadePessoaEntityEstadoCivil !== undefined && entidadePessoaEntityEstadoCivil !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.estado_Civil', <any>entidadePessoaEntityEstadoCivil);
        }
        if (entidadePessoaEntityNumeroSuframa !== undefined && entidadePessoaEntityNumeroSuframa !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.numero_Suframa', <any>entidadePessoaEntityNumeroSuframa);
        }
        if (entidadePessoaEntityFretePadrao !== undefined && entidadePessoaEntityFretePadrao !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.frete_Padrao', <any>entidadePessoaEntityFretePadrao);
        }
        if (entidadePessoaEntityPadrao !== undefined && entidadePessoaEntityPadrao !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.padrao', <any>entidadePessoaEntityPadrao);
        }
        if (entidadePessoaEntityRoteadorPuxou !== undefined && entidadePessoaEntityRoteadorPuxou !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.roteador_Puxou', <any>entidadePessoaEntityRoteadorPuxou);
        }
        if (entidadePessoaEntityDataExpedicaoRg !== undefined && entidadePessoaEntityDataExpedicaoRg !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.data_Expedicao_Rg', <any>entidadePessoaEntityDataExpedicaoRg.toISOString());
        }
        if (entidadePessoaEntityBloquearVenderOrcamento !== undefined && entidadePessoaEntityBloquearVenderOrcamento !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.bloquear_Vender_Orcamento', <any>entidadePessoaEntityBloquearVenderOrcamento);
        }
        if (entidadePessoaEntityConsumidorFinal !== undefined && entidadePessoaEntityConsumidorFinal !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.consumidor_Final', <any>entidadePessoaEntityConsumidorFinal);
        }
        if (entidadePessoaEntityIsFuncionario !== undefined && entidadePessoaEntityIsFuncionario !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.isFuncionario', <any>entidadePessoaEntityIsFuncionario);
        }
        if (entidadePessoaEntityComissionado !== undefined && entidadePessoaEntityComissionado !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.comissionado', <any>entidadePessoaEntityComissionado);
        }
        if (entidadePessoaEntityExibirObservacao !== undefined && entidadePessoaEntityExibirObservacao !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.exibir_Observacao', <any>entidadePessoaEntityExibirObservacao);
        }
        if (entidadePessoaEntityRegimeTributario !== undefined && entidadePessoaEntityRegimeTributario !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.regime_Tributario', <any>entidadePessoaEntityRegimeTributario);
        }
        if (entidadePessoaEntityClinicaIndicou !== undefined && entidadePessoaEntityClinicaIndicou !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.clinica_Indicou', <any>entidadePessoaEntityClinicaIndicou);
        }
        if (entidadePessoaEntityProfissionalIndicou !== undefined && entidadePessoaEntityProfissionalIndicou !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.profissional_Indicou', <any>entidadePessoaEntityProfissionalIndicou);
        }
        if (entidadePessoaEntityDataIndicacao !== undefined && entidadePessoaEntityDataIndicacao !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.data_Indicacao', <any>entidadePessoaEntityDataIndicacao.toISOString());
        }
        if (entidadePessoaEntityEnderecoEntrega !== undefined && entidadePessoaEntityEnderecoEntrega !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.endereco_Entrega', <any>entidadePessoaEntityEnderecoEntrega);
        }
        if (entidadePessoaEntityBairroEntrega !== undefined && entidadePessoaEntityBairroEntrega !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.bairro_Entrega', <any>entidadePessoaEntityBairroEntrega);
        }
        if (entidadePessoaEntityCidadeEntrega !== undefined && entidadePessoaEntityCidadeEntrega !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.cidade_Entrega', <any>entidadePessoaEntityCidadeEntrega);
        }
        if (entidadePessoaEntityFoneEntrega !== undefined && entidadePessoaEntityFoneEntrega !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.fone_Entrega', <any>entidadePessoaEntityFoneEntrega);
        }
        if (entidadePessoaEntityContatoEntrega !== undefined && entidadePessoaEntityContatoEntrega !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.contato_Entrega', <any>entidadePessoaEntityContatoEntrega);
        }
        if (entidadePessoaEntityCepEntrega !== undefined && entidadePessoaEntityCepEntrega !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.cep_Entrega', <any>entidadePessoaEntityCepEntrega);
        }
        if (entidadePessoaEntityValorFrete !== undefined && entidadePessoaEntityValorFrete !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.valor_Frete', <any>entidadePessoaEntityValorFrete);
        }
        if (entidadePessoaEntityBanco !== undefined && entidadePessoaEntityBanco !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.banco', <any>entidadePessoaEntityBanco);
        }
        if (entidadePessoaEntityAgencia !== undefined && entidadePessoaEntityAgencia !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.agencia', <any>entidadePessoaEntityAgencia);
        }
        if (entidadePessoaEntityAgenciaDV !== undefined && entidadePessoaEntityAgenciaDV !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.agencia_DV', <any>entidadePessoaEntityAgenciaDV);
        }
        if (entidadePessoaEntityConta !== undefined && entidadePessoaEntityConta !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.conta', <any>entidadePessoaEntityConta);
        }
        if (entidadePessoaEntityContaDV !== undefined && entidadePessoaEntityContaDV !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.conta_DV', <any>entidadePessoaEntityContaDV);
        }
        if (entidadePessoaEntityTransportadora !== undefined && entidadePessoaEntityTransportadora !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.transportadora', <any>entidadePessoaEntityTransportadora);
        }
        if (entidadePessoaEntityBloquearVendaDinheiro !== undefined && entidadePessoaEntityBloquearVendaDinheiro !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.bloquear_Venda_Dinheiro', <any>entidadePessoaEntityBloquearVendaDinheiro);
        }
        if (entidadePessoaEntityBloquearAlterarDependente !== undefined && entidadePessoaEntityBloquearAlterarDependente !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.bloquear_Alterar_Dependente', <any>entidadePessoaEntityBloquearAlterarDependente);
        }
        if (entidadePessoaEntityBloquearAlterarPlaca !== undefined && entidadePessoaEntityBloquearAlterarPlaca !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.bloquear_Alterar_Placa', <any>entidadePessoaEntityBloquearAlterarPlaca);
        }
        if (entidadePessoaEntityComissao !== undefined && entidadePessoaEntityComissao !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.comissao', <any>entidadePessoaEntityComissao);
        }
        if (entidadePessoaEntityValorChequePendente !== undefined && entidadePessoaEntityValorChequePendente !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.valor_Cheque_Pendente', <any>entidadePessoaEntityValorChequePendente);
        }
        if (entidadePessoaEntityBloquearPontoFidelidade !== undefined && entidadePessoaEntityBloquearPontoFidelidade !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.bloquear_Ponto_Fidelidade', <any>entidadePessoaEntityBloquearPontoFidelidade);
        }
        if (entidadePessoaEntityComplemento !== undefined && entidadePessoaEntityComplemento !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.complemento', <any>entidadePessoaEntityComplemento);
        }
        if (entidadePessoaEntityMatriz !== undefined && entidadePessoaEntityMatriz !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.matriz', <any>entidadePessoaEntityMatriz);
        }
        if (entidadePessoaEntitySituacaoOrcamento !== undefined && entidadePessoaEntitySituacaoOrcamento !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.situacao_Orcamento', <any>entidadePessoaEntitySituacaoOrcamento);
        }
        if (entidadePessoaEntityZonaEntrega !== undefined && entidadePessoaEntityZonaEntrega !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.zona_Entrega', <any>entidadePessoaEntityZonaEntrega);
        }
        if (entidadePessoaEntityBloquearVendaSemKm !== undefined && entidadePessoaEntityBloquearVendaSemKm !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.bloquear_Venda_Sem_Km', <any>entidadePessoaEntityBloquearVendaSemKm);
        }
        if (entidadePessoaEntityEmpresaOrigem !== undefined && entidadePessoaEntityEmpresaOrigem !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.empresa_Origem', <any>entidadePessoaEntityEmpresaOrigem);
        }
        if (entidadePessoaEntityEmpresasOng) {
            entidadePessoaEntityEmpresasOng.forEach((element) => {
                queryParameters = queryParameters.append('Entidade.pessoaEntity.empresas_Ong', <any>element);
            })
        }
        if (entidadePessoaEntityObs !== undefined && entidadePessoaEntityObs !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.obs', <any>entidadePessoaEntityObs);
        }
        if (entidadePessoaEntityBloquearTicket !== undefined && entidadePessoaEntityBloquearTicket !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.bloquear_Ticket', <any>entidadePessoaEntityBloquearTicket);
        }
        if (entidadePessoaEntityBloquearCartao !== undefined && entidadePessoaEntityBloquearCartao !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.bloquear_Cartao', <any>entidadePessoaEntityBloquearCartao);
        }
        if (entidadePessoaEntityInscricaoMunicipal !== undefined && entidadePessoaEntityInscricaoMunicipal !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.inscricao_Municipal', <any>entidadePessoaEntityInscricaoMunicipal);
        }
        if (entidadePessoaEntityContribuinteIcms !== undefined && entidadePessoaEntityContribuinteIcms !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.contribuinte_Icms', <any>entidadePessoaEntityContribuinteIcms);
        }
        if (entidadePessoaEntityEmailsPromocionais !== undefined && entidadePessoaEntityEmailsPromocionais !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.emails_Promocionais', <any>entidadePessoaEntityEmailsPromocionais);
        }
        if (entidadePessoaEntityTitularContaCorrente !== undefined && entidadePessoaEntityTitularContaCorrente !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.titular_Conta_Corrente', <any>entidadePessoaEntityTitularContaCorrente);
        }
        if (entidadePessoaEntityOperacaoContaCorrente !== undefined && entidadePessoaEntityOperacaoContaCorrente !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.operacao_Conta_Corrente', <any>entidadePessoaEntityOperacaoContaCorrente);
        }
        if (entidadePessoaEntityTipoContaCorrente !== undefined && entidadePessoaEntityTipoContaCorrente !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.tipo_Conta_Corrente', <any>entidadePessoaEntityTipoContaCorrente);
        }
        if (entidadePessoaEntityDDDCelular !== undefined && entidadePessoaEntityDDDCelular !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.dDD_Celular', <any>entidadePessoaEntityDDDCelular);
        }
        if (entidadePessoaEntityNumeroCelular !== undefined && entidadePessoaEntityNumeroCelular !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.numero_Celular', <any>entidadePessoaEntityNumeroCelular);
        }
        if (entidadePessoaEntityBloquearCredito !== undefined && entidadePessoaEntityBloquearCredito !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.bloquear_Credito', <any>entidadePessoaEntityBloquearCredito);
        }
        if (entidadePessoaEntityClinica !== undefined && entidadePessoaEntityClinica !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.clinica', <any>entidadePessoaEntityClinica);
        }
        if (entidadePessoaEntityIsOng !== undefined && entidadePessoaEntityIsOng !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.isOng', <any>entidadePessoaEntityIsOng);
        }
        if (entidadePessoaEntityCelular !== undefined && entidadePessoaEntityCelular !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.celular', <any>entidadePessoaEntityCelular);
        }
        if (entidadePessoaEntityAssinaturaPessoa !== undefined && entidadePessoaEntityAssinaturaPessoa !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.assinatura._Pessoa', <any>entidadePessoaEntityAssinaturaPessoa);
        }
        if (entidadePessoaEntityAssinaturaAssinatura !== undefined && entidadePessoaEntityAssinaturaAssinatura !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.assinatura._Assinatura', <any>entidadePessoaEntityAssinaturaAssinatura);
        }
        if (entidadePessoaEntityAssinaturaPreencheuClasse !== undefined && entidadePessoaEntityAssinaturaPreencheuClasse !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.assinatura._PreencheuClasse', <any>entidadePessoaEntityAssinaturaPreencheuClasse);
        }
        if (entidadePessoaEntityAssinaturaIsInativo !== undefined && entidadePessoaEntityAssinaturaIsInativo !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.assinatura._IsInativo', <any>entidadePessoaEntityAssinaturaIsInativo);
        }
        if (entidadePessoaEntityAssinaturaIgnorarDuplicidade !== undefined && entidadePessoaEntityAssinaturaIgnorarDuplicidade !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.assinatura._IgnorarDuplicidade', <any>entidadePessoaEntityAssinaturaIgnorarDuplicidade);
        }
        if (entidadePessoaEntityCodigoTOTVS !== undefined && entidadePessoaEntityCodigoTOTVS !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.codigo_TOTVS', <any>entidadePessoaEntityCodigoTOTVS);
        }
        if (entidadePessoaEntityContaIntegracaoContabil !== undefined && entidadePessoaEntityContaIntegracaoContabil !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.conta_Integracao_Contabil', <any>entidadePessoaEntityContaIntegracaoContabil);
        }
        if (entidadePessoaEntityStoomClienteID !== undefined && entidadePessoaEntityStoomClienteID !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.stoom_Cliente_ID', <any>entidadePessoaEntityStoomClienteID);
        }
        if (entidadePessoaEntityStoomClienteToken !== undefined && entidadePessoaEntityStoomClienteToken !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.stoom_Cliente_Token', <any>entidadePessoaEntityStoomClienteToken);
        }
        if (entidadePessoaEntityIgnorarValidacaoCPF !== undefined && entidadePessoaEntityIgnorarValidacaoCPF !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.ignorarValidacaoCPF', <any>entidadePessoaEntityIgnorarValidacaoCPF);
        }
        if (entidadePessoaEntityCamposValor) {
            entidadePessoaEntityCamposValor.forEach((element) => {
                queryParameters = queryParameters.append('Entidade.pessoaEntity.campos_Valor', <any>element);
            })
        }
        if (entidadePessoaEntityProdutosContinuos) {
            entidadePessoaEntityProdutosContinuos.forEach((element) => {
                queryParameters = queryParameters.append('Entidade.pessoaEntity.produtos_Continuos', <any>element);
            })
        }
        if (entidadePessoaEntityGrupoFornecedorContabil !== undefined && entidadePessoaEntityGrupoFornecedorContabil !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.grupo_Fornecedor_Contabil', <any>entidadePessoaEntityGrupoFornecedorContabil);
        }
        if (entidadePessoaEntitySujeitoPassivo !== undefined && entidadePessoaEntitySujeitoPassivo !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.sujeito_Passivo', <any>entidadePessoaEntitySujeitoPassivo);
        }
        if (entidadePessoaEntityIdIFood !== undefined && entidadePessoaEntityIdIFood !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.id_IFood', <any>entidadePessoaEntityIdIFood);
        }
        if (entidadePessoaEntityPreencheuClasse !== undefined && entidadePessoaEntityPreencheuClasse !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.preencheuClasse', <any>entidadePessoaEntityPreencheuClasse);
        }
        if (entidadePessoaEntityIsInativo !== undefined && entidadePessoaEntityIsInativo !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.isInativo', <any>entidadePessoaEntityIsInativo);
        }
        if (entidadePessoaEntityIgnorarDuplicidade !== undefined && entidadePessoaEntityIgnorarDuplicidade !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.ignorarDuplicidade', <any>entidadePessoaEntityIgnorarDuplicidade);
        }
        if (entidadePreencheuClasse !== undefined && entidadePreencheuClasse !== null) {
            queryParameters = queryParameters.set('Entidade.preencheuClasse', <any>entidadePreencheuClasse);
        }
        if (entidadeIsInativo !== undefined && entidadeIsInativo !== null) {
            queryParameters = queryParameters.set('Entidade.isInativo', <any>entidadeIsInativo);
        }
        if (entidadeIgnorarDuplicidade !== undefined && entidadeIgnorarDuplicidade !== null) {
            queryParameters = queryParameters.set('Entidade.ignorarDuplicidade', <any>entidadeIgnorarDuplicidade);
        }
        if (parametrosAdicionaisParametros) {
            parametrosAdicionaisParametros.forEach((element) => {
                queryParameters = queryParameters.append('ParametrosAdicionais.parametros', <any>element);
            })
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<any>(`${this.basePath}/api/TesteAngular/Gravar`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param entidadePessoa 
     * @param entidadeDataCarga 
     * @param entidadePessoaEntityCodigo 
     * @param entidadePessoaEntityNome 
     * @param entidadePessoaEntityTipo 
     * @param entidadePessoaEntityCpf 
     * @param entidadePessoaEntityRg 
     * @param entidadePessoaEntityDataNasc 
     * @param entidadePessoaEntityUsuario 
     * @param entidadePessoaEntityVendedor 
     * @param entidadePessoaEntityConvenio 
     * @param entidadePessoaEntityClienteInternet 
     * @param entidadePessoaEntityCategoriaCartao 
     * @param entidadePessoaEntityCidadePagamento 
     * @param entidadePessoaEntityConceitoCliente 
     * @param entidadePessoaEntityServicoDelivery 
     * @param entidadePessoaEntityDocMercantil 
     * @param entidadePessoaEntitySegmento 
     * @param entidadePessoaEntityOrdemVisita 
     * @param entidadePessoaEntityCodigoClientePessoa 
     * @param entidadePessoaEntityCodigoFornecedorPessoa 
     * @param entidadePessoaEntityCodigoTransportadoraPessoa 
     * @param entidadePessoaEntityContaContabil 
     * @param entidadePessoaEntityUsuarioAlteracao 
     * @param entidadePessoaEntityRepresentante 
     * @param entidadePessoaEntityEnderecoNome 
     * @param entidadePessoaEntityDdd1 
     * @param entidadePessoaEntityDdd2 
     * @param entidadePessoaEntityDddfax 
     * @param entidadePessoaEntityFone2Numero 
     * @param entidadePessoaEntityFoneNumero 
     * @param entidadePessoaEntityFaxNumero 
     * @param entidadePessoaEntityNumero 
     * @param entidadePessoaEntityCidade 
     * @param entidadePessoaEntityEndereco 
     * @param entidadePessoaEntityFone 
     * @param entidadePessoaEntityFone2 
     * @param entidadePessoaEntityFax 
     * @param entidadePessoaEntityBairro 
     * @param entidadePessoaEntityCep 
     * @param entidadePessoaEntityContato 
     * @param entidadePessoaEntityLimiteCredito 
     * @param entidadePessoaEntityPai 
     * @param entidadePessoaEntityMae 
     * @param entidadePessoaEntityConjuge 
     * @param entidadePessoaEntityNaturalidade 
     * @param entidadePessoaEntityAvaliacao 
     * @param entidadePessoaEntityObservacao 
     * @param entidadePessoaEntityInativo 
     * @param entidadePessoaEntityRenda 
     * @param entidadePessoaEntityLocalTrabalho 
     * @param entidadePessoaEntityFoneTrabalho 
     * @param entidadePessoaEntityDataAdmissao 
     * @param entidadePessoaEntityReferencia1 
     * @param entidadePessoaEntityReferencia2 
     * @param entidadePessoaEntityReferencia3 
     * @param entidadePessoaEntityDataCarga 
     * @param entidadePessoaEntitySaldoDevedor 
     * @param entidadePessoaEntityDiaPgto 
     * @param entidadePessoaEntityCidadeD 
     * @param entidadePessoaEntityUfD 
     * @param entidadePessoaEntityBloq 
     * @param entidadePessoaEntityFormaPagamento 
     * @param entidadePessoaEntityInformativo 
     * @param entidadePessoaEntityClasse 
     * @param entidadePessoaEntityPrecoCusto 
     * @param entidadePessoaEntitySenha 
     * @param entidadePessoaEntityDescontoVenda 
     * @param entidadePessoaEntityDataCadastro 
     * @param entidadePessoaEntityEmail 
     * @param entidadePessoaEntityContatoCliente 
     * @param entidadePessoaEntityNomeFantasia 
     * @param entidadePessoaEntityFechamento 
     * @param entidadePessoaEntityVenderPrecoCusto 
     * @param entidadePessoaEntityValorCredito 
     * @param entidadePessoaEntityObservacaoEndereco 
     * @param entidadePessoaEntityApelido 
     * @param entidadePessoaEntityBloquearCrediario 
     * @param entidadePessoaEntityNumeroCalcado 
     * @param entidadePessoaEntityPontosFidelidade 
     * @param entidadePessoaEntityCondicaoPagamento 
     * @param entidadePessoaEntityListaPadrao 
     * @param entidadePessoaEntityVenderTaxaGrupo 
     * @param entidadePessoaEntityNCartao 
     * @param entidadePessoaEntityGrupoFiscal 
     * @param entidadePessoaEntityProfissao 
     * @param entidadePessoaEntityNumeroCartao 
     * @param entidadePessoaEntityContaParticular 
     * @param entidadePessoaEntityDuplicata 
     * @param entidadePessoaEntityDataAlteracao 
     * @param entidadePessoaEntityZonaVenda 
     * @param entidadePessoaEntitySituacaoAfapi 
     * @param entidadePessoaEntityDataUltimaVenda 
     * @param entidadePessoaEntityImpagavel 
     * @param entidadePessoaEntityMatricula 
     * @param entidadePessoaEntityMensagemConvenio 
     * @param entidadePessoaEntityLimiteChequePendente 
     * @param entidadePessoaEntityEnderecoPagamento 
     * @param entidadePessoaEntityFonePagamento 
     * @param entidadePessoaEntityCepPagamento 
     * @param entidadePessoaEntityBairroPagamento 
     * @param entidadePessoaEntityContatoPagamento 
     * @param entidadePessoaEntityBloquearVendaCheque 
     * @param entidadePessoaEntitySexo 
     * @param entidadePessoaEntityBloquearConsignacao 
     * @param entidadePessoaEntityLimiteConsignacao 
     * @param entidadePessoaEntityEstadoCivil 
     * @param entidadePessoaEntityNumeroSuframa 
     * @param entidadePessoaEntityFretePadrao 
     * @param entidadePessoaEntityPadrao 
     * @param entidadePessoaEntityRoteadorPuxou 
     * @param entidadePessoaEntityDataExpedicaoRg 
     * @param entidadePessoaEntityBloquearVenderOrcamento 
     * @param entidadePessoaEntityConsumidorFinal 
     * @param entidadePessoaEntityIsFuncionario 
     * @param entidadePessoaEntityComissionado 
     * @param entidadePessoaEntityExibirObservacao 
     * @param entidadePessoaEntityRegimeTributario 
     * @param entidadePessoaEntityClinicaIndicou 
     * @param entidadePessoaEntityProfissionalIndicou 
     * @param entidadePessoaEntityDataIndicacao 
     * @param entidadePessoaEntityEnderecoEntrega 
     * @param entidadePessoaEntityBairroEntrega 
     * @param entidadePessoaEntityCidadeEntrega 
     * @param entidadePessoaEntityFoneEntrega 
     * @param entidadePessoaEntityContatoEntrega 
     * @param entidadePessoaEntityCepEntrega 
     * @param entidadePessoaEntityValorFrete 
     * @param entidadePessoaEntityBanco 
     * @param entidadePessoaEntityAgencia 
     * @param entidadePessoaEntityAgenciaDV 
     * @param entidadePessoaEntityConta 
     * @param entidadePessoaEntityContaDV 
     * @param entidadePessoaEntityTransportadora 
     * @param entidadePessoaEntityBloquearVendaDinheiro 
     * @param entidadePessoaEntityBloquearAlterarDependente 
     * @param entidadePessoaEntityBloquearAlterarPlaca 
     * @param entidadePessoaEntityComissao 
     * @param entidadePessoaEntityValorChequePendente 
     * @param entidadePessoaEntityBloquearPontoFidelidade 
     * @param entidadePessoaEntityComplemento 
     * @param entidadePessoaEntityMatriz 
     * @param entidadePessoaEntitySituacaoOrcamento 
     * @param entidadePessoaEntityZonaEntrega 
     * @param entidadePessoaEntityBloquearVendaSemKm 
     * @param entidadePessoaEntityEmpresaOrigem 
     * @param entidadePessoaEntityEmpresasOng 
     * @param entidadePessoaEntityObs 
     * @param entidadePessoaEntityBloquearTicket 
     * @param entidadePessoaEntityBloquearCartao 
     * @param entidadePessoaEntityInscricaoMunicipal 
     * @param entidadePessoaEntityContribuinteIcms 
     * @param entidadePessoaEntityEmailsPromocionais 
     * @param entidadePessoaEntityTitularContaCorrente 
     * @param entidadePessoaEntityOperacaoContaCorrente 
     * @param entidadePessoaEntityTipoContaCorrente 
     * @param entidadePessoaEntityDDDCelular 
     * @param entidadePessoaEntityNumeroCelular 
     * @param entidadePessoaEntityBloquearCredito 
     * @param entidadePessoaEntityClinica 
     * @param entidadePessoaEntityIsOng 
     * @param entidadePessoaEntityCelular 
     * @param entidadePessoaEntityAssinaturaPessoa 
     * @param entidadePessoaEntityAssinaturaAssinatura 
     * @param entidadePessoaEntityAssinaturaPreencheuClasse 
     * @param entidadePessoaEntityAssinaturaIsInativo 
     * @param entidadePessoaEntityAssinaturaIgnorarDuplicidade 
     * @param entidadePessoaEntityCodigoTOTVS 
     * @param entidadePessoaEntityContaIntegracaoContabil 
     * @param entidadePessoaEntityStoomClienteID 
     * @param entidadePessoaEntityStoomClienteToken 
     * @param entidadePessoaEntityIgnorarValidacaoCPF 
     * @param entidadePessoaEntityCamposValor 
     * @param entidadePessoaEntityProdutosContinuos 
     * @param entidadePessoaEntityGrupoFornecedorContabil 
     * @param entidadePessoaEntitySujeitoPassivo 
     * @param entidadePessoaEntityIdIFood 
     * @param entidadePessoaEntityPreencheuClasse 
     * @param entidadePessoaEntityIsInativo 
     * @param entidadePessoaEntityIgnorarDuplicidade 
     * @param entidadePreencheuClasse 
     * @param entidadeIsInativo 
     * @param entidadeIgnorarDuplicidade 
     * @param parametrosAdicionaisParametros 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public testeAngularGravar_1(entidadePessoa?: number, entidadeDataCarga?: Date, entidadePessoaEntityCodigo?: number, entidadePessoaEntityNome?: string, entidadePessoaEntityTipo?: string, entidadePessoaEntityCpf?: string, entidadePessoaEntityRg?: string, entidadePessoaEntityDataNasc?: Date, entidadePessoaEntityUsuario?: number, entidadePessoaEntityVendedor?: number, entidadePessoaEntityConvenio?: number, entidadePessoaEntityClienteInternet?: number, entidadePessoaEntityCategoriaCartao?: number, entidadePessoaEntityCidadePagamento?: number, entidadePessoaEntityConceitoCliente?: number, entidadePessoaEntityServicoDelivery?: number, entidadePessoaEntityDocMercantil?: number, entidadePessoaEntitySegmento?: number, entidadePessoaEntityOrdemVisita?: number, entidadePessoaEntityCodigoClientePessoa?: number, entidadePessoaEntityCodigoFornecedorPessoa?: number, entidadePessoaEntityCodigoTransportadoraPessoa?: number, entidadePessoaEntityContaContabil?: number, entidadePessoaEntityUsuarioAlteracao?: number, entidadePessoaEntityRepresentante?: number, entidadePessoaEntityEnderecoNome?: string, entidadePessoaEntityDdd1?: string, entidadePessoaEntityDdd2?: string, entidadePessoaEntityDddfax?: string, entidadePessoaEntityFone2Numero?: string, entidadePessoaEntityFoneNumero?: string, entidadePessoaEntityFaxNumero?: string, entidadePessoaEntityNumero?: string, entidadePessoaEntityCidade?: number, entidadePessoaEntityEndereco?: string, entidadePessoaEntityFone?: string, entidadePessoaEntityFone2?: string, entidadePessoaEntityFax?: string, entidadePessoaEntityBairro?: string, entidadePessoaEntityCep?: string, entidadePessoaEntityContato?: string, entidadePessoaEntityLimiteCredito?: number, entidadePessoaEntityPai?: string, entidadePessoaEntityMae?: string, entidadePessoaEntityConjuge?: string, entidadePessoaEntityNaturalidade?: string, entidadePessoaEntityAvaliacao?: string, entidadePessoaEntityObservacao?: string, entidadePessoaEntityInativo?: boolean, entidadePessoaEntityRenda?: number, entidadePessoaEntityLocalTrabalho?: string, entidadePessoaEntityFoneTrabalho?: string, entidadePessoaEntityDataAdmissao?: Date, entidadePessoaEntityReferencia1?: string, entidadePessoaEntityReferencia2?: string, entidadePessoaEntityReferencia3?: string, entidadePessoaEntityDataCarga?: Date, entidadePessoaEntitySaldoDevedor?: number, entidadePessoaEntityDiaPgto?: number, entidadePessoaEntityCidadeD?: string, entidadePessoaEntityUfD?: string, entidadePessoaEntityBloq?: string, entidadePessoaEntityFormaPagamento?: number, entidadePessoaEntityInformativo?: string, entidadePessoaEntityClasse?: string, entidadePessoaEntityPrecoCusto?: string, entidadePessoaEntitySenha?: string, entidadePessoaEntityDescontoVenda?: number, entidadePessoaEntityDataCadastro?: Date, entidadePessoaEntityEmail?: string, entidadePessoaEntityContatoCliente?: string, entidadePessoaEntityNomeFantasia?: string, entidadePessoaEntityFechamento?: string, entidadePessoaEntityVenderPrecoCusto?: boolean, entidadePessoaEntityValorCredito?: number, entidadePessoaEntityObservacaoEndereco?: string, entidadePessoaEntityApelido?: string, entidadePessoaEntityBloquearCrediario?: boolean, entidadePessoaEntityNumeroCalcado?: string, entidadePessoaEntityPontosFidelidade?: number, entidadePessoaEntityCondicaoPagamento?: number, entidadePessoaEntityListaPadrao?: number, entidadePessoaEntityVenderTaxaGrupo?: boolean, entidadePessoaEntityNCartao?: string, entidadePessoaEntityGrupoFiscal?: number, entidadePessoaEntityProfissao?: string, entidadePessoaEntityNumeroCartao?: string, entidadePessoaEntityContaParticular?: boolean, entidadePessoaEntityDuplicata?: boolean, entidadePessoaEntityDataAlteracao?: Date, entidadePessoaEntityZonaVenda?: number, entidadePessoaEntitySituacaoAfapi?: string, entidadePessoaEntityDataUltimaVenda?: Date, entidadePessoaEntityImpagavel?: boolean, entidadePessoaEntityMatricula?: string, entidadePessoaEntityMensagemConvenio?: string, entidadePessoaEntityLimiteChequePendente?: number, entidadePessoaEntityEnderecoPagamento?: string, entidadePessoaEntityFonePagamento?: string, entidadePessoaEntityCepPagamento?: string, entidadePessoaEntityBairroPagamento?: string, entidadePessoaEntityContatoPagamento?: string, entidadePessoaEntityBloquearVendaCheque?: boolean, entidadePessoaEntitySexo?: string, entidadePessoaEntityBloquearConsignacao?: boolean, entidadePessoaEntityLimiteConsignacao?: number, entidadePessoaEntityEstadoCivil?: string, entidadePessoaEntityNumeroSuframa?: string, entidadePessoaEntityFretePadrao?: number, entidadePessoaEntityPadrao?: boolean, entidadePessoaEntityRoteadorPuxou?: boolean, entidadePessoaEntityDataExpedicaoRg?: Date, entidadePessoaEntityBloquearVenderOrcamento?: boolean, entidadePessoaEntityConsumidorFinal?: boolean, entidadePessoaEntityIsFuncionario?: boolean, entidadePessoaEntityComissionado?: number, entidadePessoaEntityExibirObservacao?: boolean, entidadePessoaEntityRegimeTributario?: number, entidadePessoaEntityClinicaIndicou?: number, entidadePessoaEntityProfissionalIndicou?: number, entidadePessoaEntityDataIndicacao?: Date, entidadePessoaEntityEnderecoEntrega?: string, entidadePessoaEntityBairroEntrega?: string, entidadePessoaEntityCidadeEntrega?: number, entidadePessoaEntityFoneEntrega?: string, entidadePessoaEntityContatoEntrega?: string, entidadePessoaEntityCepEntrega?: string, entidadePessoaEntityValorFrete?: number, entidadePessoaEntityBanco?: string, entidadePessoaEntityAgencia?: string, entidadePessoaEntityAgenciaDV?: number, entidadePessoaEntityConta?: string, entidadePessoaEntityContaDV?: number, entidadePessoaEntityTransportadora?: number, entidadePessoaEntityBloquearVendaDinheiro?: boolean, entidadePessoaEntityBloquearAlterarDependente?: boolean, entidadePessoaEntityBloquearAlterarPlaca?: boolean, entidadePessoaEntityComissao?: number, entidadePessoaEntityValorChequePendente?: number, entidadePessoaEntityBloquearPontoFidelidade?: boolean, entidadePessoaEntityComplemento?: string, entidadePessoaEntityMatriz?: number, entidadePessoaEntitySituacaoOrcamento?: number, entidadePessoaEntityZonaEntrega?: number, entidadePessoaEntityBloquearVendaSemKm?: boolean, entidadePessoaEntityEmpresaOrigem?: number, entidadePessoaEntityEmpresasOng?: Array<number>, entidadePessoaEntityObs?: string, entidadePessoaEntityBloquearTicket?: boolean, entidadePessoaEntityBloquearCartao?: boolean, entidadePessoaEntityInscricaoMunicipal?: string, entidadePessoaEntityContribuinteIcms?: string, entidadePessoaEntityEmailsPromocionais?: boolean, entidadePessoaEntityTitularContaCorrente?: string, entidadePessoaEntityOperacaoContaCorrente?: string, entidadePessoaEntityTipoContaCorrente?: string, entidadePessoaEntityDDDCelular?: string, entidadePessoaEntityNumeroCelular?: string, entidadePessoaEntityBloquearCredito?: boolean, entidadePessoaEntityClinica?: boolean, entidadePessoaEntityIsOng?: boolean, entidadePessoaEntityCelular?: string, entidadePessoaEntityAssinaturaPessoa?: number, entidadePessoaEntityAssinaturaAssinatura?: string, entidadePessoaEntityAssinaturaPreencheuClasse?: boolean, entidadePessoaEntityAssinaturaIsInativo?: boolean, entidadePessoaEntityAssinaturaIgnorarDuplicidade?: boolean, entidadePessoaEntityCodigoTOTVS?: string, entidadePessoaEntityContaIntegracaoContabil?: number, entidadePessoaEntityStoomClienteID?: number, entidadePessoaEntityStoomClienteToken?: string, entidadePessoaEntityIgnorarValidacaoCPF?: boolean, entidadePessoaEntityCamposValor?: Array<any>, entidadePessoaEntityProdutosContinuos?: Array<any>, entidadePessoaEntityGrupoFornecedorContabil?: number, entidadePessoaEntitySujeitoPassivo?: boolean, entidadePessoaEntityIdIFood?: number, entidadePessoaEntityPreencheuClasse?: boolean, entidadePessoaEntityIsInativo?: boolean, entidadePessoaEntityIgnorarDuplicidade?: boolean, entidadePreencheuClasse?: boolean, entidadeIsInativo?: boolean, entidadeIgnorarDuplicidade?: boolean, parametrosAdicionaisParametros?: Array<any>, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public testeAngularGravar_1(entidadePessoa?: number, entidadeDataCarga?: Date, entidadePessoaEntityCodigo?: number, entidadePessoaEntityNome?: string, entidadePessoaEntityTipo?: string, entidadePessoaEntityCpf?: string, entidadePessoaEntityRg?: string, entidadePessoaEntityDataNasc?: Date, entidadePessoaEntityUsuario?: number, entidadePessoaEntityVendedor?: number, entidadePessoaEntityConvenio?: number, entidadePessoaEntityClienteInternet?: number, entidadePessoaEntityCategoriaCartao?: number, entidadePessoaEntityCidadePagamento?: number, entidadePessoaEntityConceitoCliente?: number, entidadePessoaEntityServicoDelivery?: number, entidadePessoaEntityDocMercantil?: number, entidadePessoaEntitySegmento?: number, entidadePessoaEntityOrdemVisita?: number, entidadePessoaEntityCodigoClientePessoa?: number, entidadePessoaEntityCodigoFornecedorPessoa?: number, entidadePessoaEntityCodigoTransportadoraPessoa?: number, entidadePessoaEntityContaContabil?: number, entidadePessoaEntityUsuarioAlteracao?: number, entidadePessoaEntityRepresentante?: number, entidadePessoaEntityEnderecoNome?: string, entidadePessoaEntityDdd1?: string, entidadePessoaEntityDdd2?: string, entidadePessoaEntityDddfax?: string, entidadePessoaEntityFone2Numero?: string, entidadePessoaEntityFoneNumero?: string, entidadePessoaEntityFaxNumero?: string, entidadePessoaEntityNumero?: string, entidadePessoaEntityCidade?: number, entidadePessoaEntityEndereco?: string, entidadePessoaEntityFone?: string, entidadePessoaEntityFone2?: string, entidadePessoaEntityFax?: string, entidadePessoaEntityBairro?: string, entidadePessoaEntityCep?: string, entidadePessoaEntityContato?: string, entidadePessoaEntityLimiteCredito?: number, entidadePessoaEntityPai?: string, entidadePessoaEntityMae?: string, entidadePessoaEntityConjuge?: string, entidadePessoaEntityNaturalidade?: string, entidadePessoaEntityAvaliacao?: string, entidadePessoaEntityObservacao?: string, entidadePessoaEntityInativo?: boolean, entidadePessoaEntityRenda?: number, entidadePessoaEntityLocalTrabalho?: string, entidadePessoaEntityFoneTrabalho?: string, entidadePessoaEntityDataAdmissao?: Date, entidadePessoaEntityReferencia1?: string, entidadePessoaEntityReferencia2?: string, entidadePessoaEntityReferencia3?: string, entidadePessoaEntityDataCarga?: Date, entidadePessoaEntitySaldoDevedor?: number, entidadePessoaEntityDiaPgto?: number, entidadePessoaEntityCidadeD?: string, entidadePessoaEntityUfD?: string, entidadePessoaEntityBloq?: string, entidadePessoaEntityFormaPagamento?: number, entidadePessoaEntityInformativo?: string, entidadePessoaEntityClasse?: string, entidadePessoaEntityPrecoCusto?: string, entidadePessoaEntitySenha?: string, entidadePessoaEntityDescontoVenda?: number, entidadePessoaEntityDataCadastro?: Date, entidadePessoaEntityEmail?: string, entidadePessoaEntityContatoCliente?: string, entidadePessoaEntityNomeFantasia?: string, entidadePessoaEntityFechamento?: string, entidadePessoaEntityVenderPrecoCusto?: boolean, entidadePessoaEntityValorCredito?: number, entidadePessoaEntityObservacaoEndereco?: string, entidadePessoaEntityApelido?: string, entidadePessoaEntityBloquearCrediario?: boolean, entidadePessoaEntityNumeroCalcado?: string, entidadePessoaEntityPontosFidelidade?: number, entidadePessoaEntityCondicaoPagamento?: number, entidadePessoaEntityListaPadrao?: number, entidadePessoaEntityVenderTaxaGrupo?: boolean, entidadePessoaEntityNCartao?: string, entidadePessoaEntityGrupoFiscal?: number, entidadePessoaEntityProfissao?: string, entidadePessoaEntityNumeroCartao?: string, entidadePessoaEntityContaParticular?: boolean, entidadePessoaEntityDuplicata?: boolean, entidadePessoaEntityDataAlteracao?: Date, entidadePessoaEntityZonaVenda?: number, entidadePessoaEntitySituacaoAfapi?: string, entidadePessoaEntityDataUltimaVenda?: Date, entidadePessoaEntityImpagavel?: boolean, entidadePessoaEntityMatricula?: string, entidadePessoaEntityMensagemConvenio?: string, entidadePessoaEntityLimiteChequePendente?: number, entidadePessoaEntityEnderecoPagamento?: string, entidadePessoaEntityFonePagamento?: string, entidadePessoaEntityCepPagamento?: string, entidadePessoaEntityBairroPagamento?: string, entidadePessoaEntityContatoPagamento?: string, entidadePessoaEntityBloquearVendaCheque?: boolean, entidadePessoaEntitySexo?: string, entidadePessoaEntityBloquearConsignacao?: boolean, entidadePessoaEntityLimiteConsignacao?: number, entidadePessoaEntityEstadoCivil?: string, entidadePessoaEntityNumeroSuframa?: string, entidadePessoaEntityFretePadrao?: number, entidadePessoaEntityPadrao?: boolean, entidadePessoaEntityRoteadorPuxou?: boolean, entidadePessoaEntityDataExpedicaoRg?: Date, entidadePessoaEntityBloquearVenderOrcamento?: boolean, entidadePessoaEntityConsumidorFinal?: boolean, entidadePessoaEntityIsFuncionario?: boolean, entidadePessoaEntityComissionado?: number, entidadePessoaEntityExibirObservacao?: boolean, entidadePessoaEntityRegimeTributario?: number, entidadePessoaEntityClinicaIndicou?: number, entidadePessoaEntityProfissionalIndicou?: number, entidadePessoaEntityDataIndicacao?: Date, entidadePessoaEntityEnderecoEntrega?: string, entidadePessoaEntityBairroEntrega?: string, entidadePessoaEntityCidadeEntrega?: number, entidadePessoaEntityFoneEntrega?: string, entidadePessoaEntityContatoEntrega?: string, entidadePessoaEntityCepEntrega?: string, entidadePessoaEntityValorFrete?: number, entidadePessoaEntityBanco?: string, entidadePessoaEntityAgencia?: string, entidadePessoaEntityAgenciaDV?: number, entidadePessoaEntityConta?: string, entidadePessoaEntityContaDV?: number, entidadePessoaEntityTransportadora?: number, entidadePessoaEntityBloquearVendaDinheiro?: boolean, entidadePessoaEntityBloquearAlterarDependente?: boolean, entidadePessoaEntityBloquearAlterarPlaca?: boolean, entidadePessoaEntityComissao?: number, entidadePessoaEntityValorChequePendente?: number, entidadePessoaEntityBloquearPontoFidelidade?: boolean, entidadePessoaEntityComplemento?: string, entidadePessoaEntityMatriz?: number, entidadePessoaEntitySituacaoOrcamento?: number, entidadePessoaEntityZonaEntrega?: number, entidadePessoaEntityBloquearVendaSemKm?: boolean, entidadePessoaEntityEmpresaOrigem?: number, entidadePessoaEntityEmpresasOng?: Array<number>, entidadePessoaEntityObs?: string, entidadePessoaEntityBloquearTicket?: boolean, entidadePessoaEntityBloquearCartao?: boolean, entidadePessoaEntityInscricaoMunicipal?: string, entidadePessoaEntityContribuinteIcms?: string, entidadePessoaEntityEmailsPromocionais?: boolean, entidadePessoaEntityTitularContaCorrente?: string, entidadePessoaEntityOperacaoContaCorrente?: string, entidadePessoaEntityTipoContaCorrente?: string, entidadePessoaEntityDDDCelular?: string, entidadePessoaEntityNumeroCelular?: string, entidadePessoaEntityBloquearCredito?: boolean, entidadePessoaEntityClinica?: boolean, entidadePessoaEntityIsOng?: boolean, entidadePessoaEntityCelular?: string, entidadePessoaEntityAssinaturaPessoa?: number, entidadePessoaEntityAssinaturaAssinatura?: string, entidadePessoaEntityAssinaturaPreencheuClasse?: boolean, entidadePessoaEntityAssinaturaIsInativo?: boolean, entidadePessoaEntityAssinaturaIgnorarDuplicidade?: boolean, entidadePessoaEntityCodigoTOTVS?: string, entidadePessoaEntityContaIntegracaoContabil?: number, entidadePessoaEntityStoomClienteID?: number, entidadePessoaEntityStoomClienteToken?: string, entidadePessoaEntityIgnorarValidacaoCPF?: boolean, entidadePessoaEntityCamposValor?: Array<any>, entidadePessoaEntityProdutosContinuos?: Array<any>, entidadePessoaEntityGrupoFornecedorContabil?: number, entidadePessoaEntitySujeitoPassivo?: boolean, entidadePessoaEntityIdIFood?: number, entidadePessoaEntityPreencheuClasse?: boolean, entidadePessoaEntityIsInativo?: boolean, entidadePessoaEntityIgnorarDuplicidade?: boolean, entidadePreencheuClasse?: boolean, entidadeIsInativo?: boolean, entidadeIgnorarDuplicidade?: boolean, parametrosAdicionaisParametros?: Array<any>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public testeAngularGravar_1(entidadePessoa?: number, entidadeDataCarga?: Date, entidadePessoaEntityCodigo?: number, entidadePessoaEntityNome?: string, entidadePessoaEntityTipo?: string, entidadePessoaEntityCpf?: string, entidadePessoaEntityRg?: string, entidadePessoaEntityDataNasc?: Date, entidadePessoaEntityUsuario?: number, entidadePessoaEntityVendedor?: number, entidadePessoaEntityConvenio?: number, entidadePessoaEntityClienteInternet?: number, entidadePessoaEntityCategoriaCartao?: number, entidadePessoaEntityCidadePagamento?: number, entidadePessoaEntityConceitoCliente?: number, entidadePessoaEntityServicoDelivery?: number, entidadePessoaEntityDocMercantil?: number, entidadePessoaEntitySegmento?: number, entidadePessoaEntityOrdemVisita?: number, entidadePessoaEntityCodigoClientePessoa?: number, entidadePessoaEntityCodigoFornecedorPessoa?: number, entidadePessoaEntityCodigoTransportadoraPessoa?: number, entidadePessoaEntityContaContabil?: number, entidadePessoaEntityUsuarioAlteracao?: number, entidadePessoaEntityRepresentante?: number, entidadePessoaEntityEnderecoNome?: string, entidadePessoaEntityDdd1?: string, entidadePessoaEntityDdd2?: string, entidadePessoaEntityDddfax?: string, entidadePessoaEntityFone2Numero?: string, entidadePessoaEntityFoneNumero?: string, entidadePessoaEntityFaxNumero?: string, entidadePessoaEntityNumero?: string, entidadePessoaEntityCidade?: number, entidadePessoaEntityEndereco?: string, entidadePessoaEntityFone?: string, entidadePessoaEntityFone2?: string, entidadePessoaEntityFax?: string, entidadePessoaEntityBairro?: string, entidadePessoaEntityCep?: string, entidadePessoaEntityContato?: string, entidadePessoaEntityLimiteCredito?: number, entidadePessoaEntityPai?: string, entidadePessoaEntityMae?: string, entidadePessoaEntityConjuge?: string, entidadePessoaEntityNaturalidade?: string, entidadePessoaEntityAvaliacao?: string, entidadePessoaEntityObservacao?: string, entidadePessoaEntityInativo?: boolean, entidadePessoaEntityRenda?: number, entidadePessoaEntityLocalTrabalho?: string, entidadePessoaEntityFoneTrabalho?: string, entidadePessoaEntityDataAdmissao?: Date, entidadePessoaEntityReferencia1?: string, entidadePessoaEntityReferencia2?: string, entidadePessoaEntityReferencia3?: string, entidadePessoaEntityDataCarga?: Date, entidadePessoaEntitySaldoDevedor?: number, entidadePessoaEntityDiaPgto?: number, entidadePessoaEntityCidadeD?: string, entidadePessoaEntityUfD?: string, entidadePessoaEntityBloq?: string, entidadePessoaEntityFormaPagamento?: number, entidadePessoaEntityInformativo?: string, entidadePessoaEntityClasse?: string, entidadePessoaEntityPrecoCusto?: string, entidadePessoaEntitySenha?: string, entidadePessoaEntityDescontoVenda?: number, entidadePessoaEntityDataCadastro?: Date, entidadePessoaEntityEmail?: string, entidadePessoaEntityContatoCliente?: string, entidadePessoaEntityNomeFantasia?: string, entidadePessoaEntityFechamento?: string, entidadePessoaEntityVenderPrecoCusto?: boolean, entidadePessoaEntityValorCredito?: number, entidadePessoaEntityObservacaoEndereco?: string, entidadePessoaEntityApelido?: string, entidadePessoaEntityBloquearCrediario?: boolean, entidadePessoaEntityNumeroCalcado?: string, entidadePessoaEntityPontosFidelidade?: number, entidadePessoaEntityCondicaoPagamento?: number, entidadePessoaEntityListaPadrao?: number, entidadePessoaEntityVenderTaxaGrupo?: boolean, entidadePessoaEntityNCartao?: string, entidadePessoaEntityGrupoFiscal?: number, entidadePessoaEntityProfissao?: string, entidadePessoaEntityNumeroCartao?: string, entidadePessoaEntityContaParticular?: boolean, entidadePessoaEntityDuplicata?: boolean, entidadePessoaEntityDataAlteracao?: Date, entidadePessoaEntityZonaVenda?: number, entidadePessoaEntitySituacaoAfapi?: string, entidadePessoaEntityDataUltimaVenda?: Date, entidadePessoaEntityImpagavel?: boolean, entidadePessoaEntityMatricula?: string, entidadePessoaEntityMensagemConvenio?: string, entidadePessoaEntityLimiteChequePendente?: number, entidadePessoaEntityEnderecoPagamento?: string, entidadePessoaEntityFonePagamento?: string, entidadePessoaEntityCepPagamento?: string, entidadePessoaEntityBairroPagamento?: string, entidadePessoaEntityContatoPagamento?: string, entidadePessoaEntityBloquearVendaCheque?: boolean, entidadePessoaEntitySexo?: string, entidadePessoaEntityBloquearConsignacao?: boolean, entidadePessoaEntityLimiteConsignacao?: number, entidadePessoaEntityEstadoCivil?: string, entidadePessoaEntityNumeroSuframa?: string, entidadePessoaEntityFretePadrao?: number, entidadePessoaEntityPadrao?: boolean, entidadePessoaEntityRoteadorPuxou?: boolean, entidadePessoaEntityDataExpedicaoRg?: Date, entidadePessoaEntityBloquearVenderOrcamento?: boolean, entidadePessoaEntityConsumidorFinal?: boolean, entidadePessoaEntityIsFuncionario?: boolean, entidadePessoaEntityComissionado?: number, entidadePessoaEntityExibirObservacao?: boolean, entidadePessoaEntityRegimeTributario?: number, entidadePessoaEntityClinicaIndicou?: number, entidadePessoaEntityProfissionalIndicou?: number, entidadePessoaEntityDataIndicacao?: Date, entidadePessoaEntityEnderecoEntrega?: string, entidadePessoaEntityBairroEntrega?: string, entidadePessoaEntityCidadeEntrega?: number, entidadePessoaEntityFoneEntrega?: string, entidadePessoaEntityContatoEntrega?: string, entidadePessoaEntityCepEntrega?: string, entidadePessoaEntityValorFrete?: number, entidadePessoaEntityBanco?: string, entidadePessoaEntityAgencia?: string, entidadePessoaEntityAgenciaDV?: number, entidadePessoaEntityConta?: string, entidadePessoaEntityContaDV?: number, entidadePessoaEntityTransportadora?: number, entidadePessoaEntityBloquearVendaDinheiro?: boolean, entidadePessoaEntityBloquearAlterarDependente?: boolean, entidadePessoaEntityBloquearAlterarPlaca?: boolean, entidadePessoaEntityComissao?: number, entidadePessoaEntityValorChequePendente?: number, entidadePessoaEntityBloquearPontoFidelidade?: boolean, entidadePessoaEntityComplemento?: string, entidadePessoaEntityMatriz?: number, entidadePessoaEntitySituacaoOrcamento?: number, entidadePessoaEntityZonaEntrega?: number, entidadePessoaEntityBloquearVendaSemKm?: boolean, entidadePessoaEntityEmpresaOrigem?: number, entidadePessoaEntityEmpresasOng?: Array<number>, entidadePessoaEntityObs?: string, entidadePessoaEntityBloquearTicket?: boolean, entidadePessoaEntityBloquearCartao?: boolean, entidadePessoaEntityInscricaoMunicipal?: string, entidadePessoaEntityContribuinteIcms?: string, entidadePessoaEntityEmailsPromocionais?: boolean, entidadePessoaEntityTitularContaCorrente?: string, entidadePessoaEntityOperacaoContaCorrente?: string, entidadePessoaEntityTipoContaCorrente?: string, entidadePessoaEntityDDDCelular?: string, entidadePessoaEntityNumeroCelular?: string, entidadePessoaEntityBloquearCredito?: boolean, entidadePessoaEntityClinica?: boolean, entidadePessoaEntityIsOng?: boolean, entidadePessoaEntityCelular?: string, entidadePessoaEntityAssinaturaPessoa?: number, entidadePessoaEntityAssinaturaAssinatura?: string, entidadePessoaEntityAssinaturaPreencheuClasse?: boolean, entidadePessoaEntityAssinaturaIsInativo?: boolean, entidadePessoaEntityAssinaturaIgnorarDuplicidade?: boolean, entidadePessoaEntityCodigoTOTVS?: string, entidadePessoaEntityContaIntegracaoContabil?: number, entidadePessoaEntityStoomClienteID?: number, entidadePessoaEntityStoomClienteToken?: string, entidadePessoaEntityIgnorarValidacaoCPF?: boolean, entidadePessoaEntityCamposValor?: Array<any>, entidadePessoaEntityProdutosContinuos?: Array<any>, entidadePessoaEntityGrupoFornecedorContabil?: number, entidadePessoaEntitySujeitoPassivo?: boolean, entidadePessoaEntityIdIFood?: number, entidadePessoaEntityPreencheuClasse?: boolean, entidadePessoaEntityIsInativo?: boolean, entidadePessoaEntityIgnorarDuplicidade?: boolean, entidadePreencheuClasse?: boolean, entidadeIsInativo?: boolean, entidadeIgnorarDuplicidade?: boolean, parametrosAdicionaisParametros?: Array<any>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public testeAngularGravar_1(entidadePessoa?: number, entidadeDataCarga?: Date, entidadePessoaEntityCodigo?: number, entidadePessoaEntityNome?: string, entidadePessoaEntityTipo?: string, entidadePessoaEntityCpf?: string, entidadePessoaEntityRg?: string, entidadePessoaEntityDataNasc?: Date, entidadePessoaEntityUsuario?: number, entidadePessoaEntityVendedor?: number, entidadePessoaEntityConvenio?: number, entidadePessoaEntityClienteInternet?: number, entidadePessoaEntityCategoriaCartao?: number, entidadePessoaEntityCidadePagamento?: number, entidadePessoaEntityConceitoCliente?: number, entidadePessoaEntityServicoDelivery?: number, entidadePessoaEntityDocMercantil?: number, entidadePessoaEntitySegmento?: number, entidadePessoaEntityOrdemVisita?: number, entidadePessoaEntityCodigoClientePessoa?: number, entidadePessoaEntityCodigoFornecedorPessoa?: number, entidadePessoaEntityCodigoTransportadoraPessoa?: number, entidadePessoaEntityContaContabil?: number, entidadePessoaEntityUsuarioAlteracao?: number, entidadePessoaEntityRepresentante?: number, entidadePessoaEntityEnderecoNome?: string, entidadePessoaEntityDdd1?: string, entidadePessoaEntityDdd2?: string, entidadePessoaEntityDddfax?: string, entidadePessoaEntityFone2Numero?: string, entidadePessoaEntityFoneNumero?: string, entidadePessoaEntityFaxNumero?: string, entidadePessoaEntityNumero?: string, entidadePessoaEntityCidade?: number, entidadePessoaEntityEndereco?: string, entidadePessoaEntityFone?: string, entidadePessoaEntityFone2?: string, entidadePessoaEntityFax?: string, entidadePessoaEntityBairro?: string, entidadePessoaEntityCep?: string, entidadePessoaEntityContato?: string, entidadePessoaEntityLimiteCredito?: number, entidadePessoaEntityPai?: string, entidadePessoaEntityMae?: string, entidadePessoaEntityConjuge?: string, entidadePessoaEntityNaturalidade?: string, entidadePessoaEntityAvaliacao?: string, entidadePessoaEntityObservacao?: string, entidadePessoaEntityInativo?: boolean, entidadePessoaEntityRenda?: number, entidadePessoaEntityLocalTrabalho?: string, entidadePessoaEntityFoneTrabalho?: string, entidadePessoaEntityDataAdmissao?: Date, entidadePessoaEntityReferencia1?: string, entidadePessoaEntityReferencia2?: string, entidadePessoaEntityReferencia3?: string, entidadePessoaEntityDataCarga?: Date, entidadePessoaEntitySaldoDevedor?: number, entidadePessoaEntityDiaPgto?: number, entidadePessoaEntityCidadeD?: string, entidadePessoaEntityUfD?: string, entidadePessoaEntityBloq?: string, entidadePessoaEntityFormaPagamento?: number, entidadePessoaEntityInformativo?: string, entidadePessoaEntityClasse?: string, entidadePessoaEntityPrecoCusto?: string, entidadePessoaEntitySenha?: string, entidadePessoaEntityDescontoVenda?: number, entidadePessoaEntityDataCadastro?: Date, entidadePessoaEntityEmail?: string, entidadePessoaEntityContatoCliente?: string, entidadePessoaEntityNomeFantasia?: string, entidadePessoaEntityFechamento?: string, entidadePessoaEntityVenderPrecoCusto?: boolean, entidadePessoaEntityValorCredito?: number, entidadePessoaEntityObservacaoEndereco?: string, entidadePessoaEntityApelido?: string, entidadePessoaEntityBloquearCrediario?: boolean, entidadePessoaEntityNumeroCalcado?: string, entidadePessoaEntityPontosFidelidade?: number, entidadePessoaEntityCondicaoPagamento?: number, entidadePessoaEntityListaPadrao?: number, entidadePessoaEntityVenderTaxaGrupo?: boolean, entidadePessoaEntityNCartao?: string, entidadePessoaEntityGrupoFiscal?: number, entidadePessoaEntityProfissao?: string, entidadePessoaEntityNumeroCartao?: string, entidadePessoaEntityContaParticular?: boolean, entidadePessoaEntityDuplicata?: boolean, entidadePessoaEntityDataAlteracao?: Date, entidadePessoaEntityZonaVenda?: number, entidadePessoaEntitySituacaoAfapi?: string, entidadePessoaEntityDataUltimaVenda?: Date, entidadePessoaEntityImpagavel?: boolean, entidadePessoaEntityMatricula?: string, entidadePessoaEntityMensagemConvenio?: string, entidadePessoaEntityLimiteChequePendente?: number, entidadePessoaEntityEnderecoPagamento?: string, entidadePessoaEntityFonePagamento?: string, entidadePessoaEntityCepPagamento?: string, entidadePessoaEntityBairroPagamento?: string, entidadePessoaEntityContatoPagamento?: string, entidadePessoaEntityBloquearVendaCheque?: boolean, entidadePessoaEntitySexo?: string, entidadePessoaEntityBloquearConsignacao?: boolean, entidadePessoaEntityLimiteConsignacao?: number, entidadePessoaEntityEstadoCivil?: string, entidadePessoaEntityNumeroSuframa?: string, entidadePessoaEntityFretePadrao?: number, entidadePessoaEntityPadrao?: boolean, entidadePessoaEntityRoteadorPuxou?: boolean, entidadePessoaEntityDataExpedicaoRg?: Date, entidadePessoaEntityBloquearVenderOrcamento?: boolean, entidadePessoaEntityConsumidorFinal?: boolean, entidadePessoaEntityIsFuncionario?: boolean, entidadePessoaEntityComissionado?: number, entidadePessoaEntityExibirObservacao?: boolean, entidadePessoaEntityRegimeTributario?: number, entidadePessoaEntityClinicaIndicou?: number, entidadePessoaEntityProfissionalIndicou?: number, entidadePessoaEntityDataIndicacao?: Date, entidadePessoaEntityEnderecoEntrega?: string, entidadePessoaEntityBairroEntrega?: string, entidadePessoaEntityCidadeEntrega?: number, entidadePessoaEntityFoneEntrega?: string, entidadePessoaEntityContatoEntrega?: string, entidadePessoaEntityCepEntrega?: string, entidadePessoaEntityValorFrete?: number, entidadePessoaEntityBanco?: string, entidadePessoaEntityAgencia?: string, entidadePessoaEntityAgenciaDV?: number, entidadePessoaEntityConta?: string, entidadePessoaEntityContaDV?: number, entidadePessoaEntityTransportadora?: number, entidadePessoaEntityBloquearVendaDinheiro?: boolean, entidadePessoaEntityBloquearAlterarDependente?: boolean, entidadePessoaEntityBloquearAlterarPlaca?: boolean, entidadePessoaEntityComissao?: number, entidadePessoaEntityValorChequePendente?: number, entidadePessoaEntityBloquearPontoFidelidade?: boolean, entidadePessoaEntityComplemento?: string, entidadePessoaEntityMatriz?: number, entidadePessoaEntitySituacaoOrcamento?: number, entidadePessoaEntityZonaEntrega?: number, entidadePessoaEntityBloquearVendaSemKm?: boolean, entidadePessoaEntityEmpresaOrigem?: number, entidadePessoaEntityEmpresasOng?: Array<number>, entidadePessoaEntityObs?: string, entidadePessoaEntityBloquearTicket?: boolean, entidadePessoaEntityBloquearCartao?: boolean, entidadePessoaEntityInscricaoMunicipal?: string, entidadePessoaEntityContribuinteIcms?: string, entidadePessoaEntityEmailsPromocionais?: boolean, entidadePessoaEntityTitularContaCorrente?: string, entidadePessoaEntityOperacaoContaCorrente?: string, entidadePessoaEntityTipoContaCorrente?: string, entidadePessoaEntityDDDCelular?: string, entidadePessoaEntityNumeroCelular?: string, entidadePessoaEntityBloquearCredito?: boolean, entidadePessoaEntityClinica?: boolean, entidadePessoaEntityIsOng?: boolean, entidadePessoaEntityCelular?: string, entidadePessoaEntityAssinaturaPessoa?: number, entidadePessoaEntityAssinaturaAssinatura?: string, entidadePessoaEntityAssinaturaPreencheuClasse?: boolean, entidadePessoaEntityAssinaturaIsInativo?: boolean, entidadePessoaEntityAssinaturaIgnorarDuplicidade?: boolean, entidadePessoaEntityCodigoTOTVS?: string, entidadePessoaEntityContaIntegracaoContabil?: number, entidadePessoaEntityStoomClienteID?: number, entidadePessoaEntityStoomClienteToken?: string, entidadePessoaEntityIgnorarValidacaoCPF?: boolean, entidadePessoaEntityCamposValor?: Array<any>, entidadePessoaEntityProdutosContinuos?: Array<any>, entidadePessoaEntityGrupoFornecedorContabil?: number, entidadePessoaEntitySujeitoPassivo?: boolean, entidadePessoaEntityIdIFood?: number, entidadePessoaEntityPreencheuClasse?: boolean, entidadePessoaEntityIsInativo?: boolean, entidadePessoaEntityIgnorarDuplicidade?: boolean, entidadePreencheuClasse?: boolean, entidadeIsInativo?: boolean, entidadeIgnorarDuplicidade?: boolean, parametrosAdicionaisParametros?: Array<any>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

























































































































































































        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (entidadePessoa !== undefined && entidadePessoa !== null) {
            queryParameters = queryParameters.set('Entidade.pessoa', <any>entidadePessoa);
        }
        if (entidadeDataCarga !== undefined && entidadeDataCarga !== null) {
            queryParameters = queryParameters.set('Entidade.data_Carga', <any>entidadeDataCarga.toISOString());
        }
        if (entidadePessoaEntityCodigo !== undefined && entidadePessoaEntityCodigo !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.codigo', <any>entidadePessoaEntityCodigo);
        }
        if (entidadePessoaEntityNome !== undefined && entidadePessoaEntityNome !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.nome', <any>entidadePessoaEntityNome);
        }
        if (entidadePessoaEntityTipo !== undefined && entidadePessoaEntityTipo !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.tipo', <any>entidadePessoaEntityTipo);
        }
        if (entidadePessoaEntityCpf !== undefined && entidadePessoaEntityCpf !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.cpf', <any>entidadePessoaEntityCpf);
        }
        if (entidadePessoaEntityRg !== undefined && entidadePessoaEntityRg !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.rg', <any>entidadePessoaEntityRg);
        }
        if (entidadePessoaEntityDataNasc !== undefined && entidadePessoaEntityDataNasc !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.data_Nasc', <any>entidadePessoaEntityDataNasc.toISOString());
        }
        if (entidadePessoaEntityUsuario !== undefined && entidadePessoaEntityUsuario !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.usuario', <any>entidadePessoaEntityUsuario);
        }
        if (entidadePessoaEntityVendedor !== undefined && entidadePessoaEntityVendedor !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.vendedor', <any>entidadePessoaEntityVendedor);
        }
        if (entidadePessoaEntityConvenio !== undefined && entidadePessoaEntityConvenio !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.convenio', <any>entidadePessoaEntityConvenio);
        }
        if (entidadePessoaEntityClienteInternet !== undefined && entidadePessoaEntityClienteInternet !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.cliente_Internet', <any>entidadePessoaEntityClienteInternet);
        }
        if (entidadePessoaEntityCategoriaCartao !== undefined && entidadePessoaEntityCategoriaCartao !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.categoria_Cartao', <any>entidadePessoaEntityCategoriaCartao);
        }
        if (entidadePessoaEntityCidadePagamento !== undefined && entidadePessoaEntityCidadePagamento !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.cidade_Pagamento', <any>entidadePessoaEntityCidadePagamento);
        }
        if (entidadePessoaEntityConceitoCliente !== undefined && entidadePessoaEntityConceitoCliente !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.conceito_Cliente', <any>entidadePessoaEntityConceitoCliente);
        }
        if (entidadePessoaEntityServicoDelivery !== undefined && entidadePessoaEntityServicoDelivery !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.servico_Delivery', <any>entidadePessoaEntityServicoDelivery);
        }
        if (entidadePessoaEntityDocMercantil !== undefined && entidadePessoaEntityDocMercantil !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.doc_Mercantil', <any>entidadePessoaEntityDocMercantil);
        }
        if (entidadePessoaEntitySegmento !== undefined && entidadePessoaEntitySegmento !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.segmento', <any>entidadePessoaEntitySegmento);
        }
        if (entidadePessoaEntityOrdemVisita !== undefined && entidadePessoaEntityOrdemVisita !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.ordem_Visita', <any>entidadePessoaEntityOrdemVisita);
        }
        if (entidadePessoaEntityCodigoClientePessoa !== undefined && entidadePessoaEntityCodigoClientePessoa !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.codigo_Cliente_Pessoa', <any>entidadePessoaEntityCodigoClientePessoa);
        }
        if (entidadePessoaEntityCodigoFornecedorPessoa !== undefined && entidadePessoaEntityCodigoFornecedorPessoa !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.codigo_Fornecedor_Pessoa', <any>entidadePessoaEntityCodigoFornecedorPessoa);
        }
        if (entidadePessoaEntityCodigoTransportadoraPessoa !== undefined && entidadePessoaEntityCodigoTransportadoraPessoa !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.codigo_Transportadora_Pessoa', <any>entidadePessoaEntityCodigoTransportadoraPessoa);
        }
        if (entidadePessoaEntityContaContabil !== undefined && entidadePessoaEntityContaContabil !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.conta_Contabil', <any>entidadePessoaEntityContaContabil);
        }
        if (entidadePessoaEntityUsuarioAlteracao !== undefined && entidadePessoaEntityUsuarioAlteracao !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.usuario_Alteracao', <any>entidadePessoaEntityUsuarioAlteracao);
        }
        if (entidadePessoaEntityRepresentante !== undefined && entidadePessoaEntityRepresentante !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.representante', <any>entidadePessoaEntityRepresentante);
        }
        if (entidadePessoaEntityEnderecoNome !== undefined && entidadePessoaEntityEnderecoNome !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.endereco_Nome', <any>entidadePessoaEntityEnderecoNome);
        }
        if (entidadePessoaEntityDdd1 !== undefined && entidadePessoaEntityDdd1 !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.ddd1', <any>entidadePessoaEntityDdd1);
        }
        if (entidadePessoaEntityDdd2 !== undefined && entidadePessoaEntityDdd2 !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.ddd2', <any>entidadePessoaEntityDdd2);
        }
        if (entidadePessoaEntityDddfax !== undefined && entidadePessoaEntityDddfax !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.dddfax', <any>entidadePessoaEntityDddfax);
        }
        if (entidadePessoaEntityFone2Numero !== undefined && entidadePessoaEntityFone2Numero !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.fone2_Numero', <any>entidadePessoaEntityFone2Numero);
        }
        if (entidadePessoaEntityFoneNumero !== undefined && entidadePessoaEntityFoneNumero !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.fone_Numero', <any>entidadePessoaEntityFoneNumero);
        }
        if (entidadePessoaEntityFaxNumero !== undefined && entidadePessoaEntityFaxNumero !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.fax_Numero', <any>entidadePessoaEntityFaxNumero);
        }
        if (entidadePessoaEntityNumero !== undefined && entidadePessoaEntityNumero !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.numero', <any>entidadePessoaEntityNumero);
        }
        if (entidadePessoaEntityCidade !== undefined && entidadePessoaEntityCidade !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.cidade', <any>entidadePessoaEntityCidade);
        }
        if (entidadePessoaEntityEndereco !== undefined && entidadePessoaEntityEndereco !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.endereco', <any>entidadePessoaEntityEndereco);
        }
        if (entidadePessoaEntityFone !== undefined && entidadePessoaEntityFone !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.fone', <any>entidadePessoaEntityFone);
        }
        if (entidadePessoaEntityFone2 !== undefined && entidadePessoaEntityFone2 !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.fone2', <any>entidadePessoaEntityFone2);
        }
        if (entidadePessoaEntityFax !== undefined && entidadePessoaEntityFax !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.fax', <any>entidadePessoaEntityFax);
        }
        if (entidadePessoaEntityBairro !== undefined && entidadePessoaEntityBairro !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.bairro', <any>entidadePessoaEntityBairro);
        }
        if (entidadePessoaEntityCep !== undefined && entidadePessoaEntityCep !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.cep', <any>entidadePessoaEntityCep);
        }
        if (entidadePessoaEntityContato !== undefined && entidadePessoaEntityContato !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.contato', <any>entidadePessoaEntityContato);
        }
        if (entidadePessoaEntityLimiteCredito !== undefined && entidadePessoaEntityLimiteCredito !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.limite_Credito', <any>entidadePessoaEntityLimiteCredito);
        }
        if (entidadePessoaEntityPai !== undefined && entidadePessoaEntityPai !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.pai', <any>entidadePessoaEntityPai);
        }
        if (entidadePessoaEntityMae !== undefined && entidadePessoaEntityMae !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.mae', <any>entidadePessoaEntityMae);
        }
        if (entidadePessoaEntityConjuge !== undefined && entidadePessoaEntityConjuge !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.conjuge', <any>entidadePessoaEntityConjuge);
        }
        if (entidadePessoaEntityNaturalidade !== undefined && entidadePessoaEntityNaturalidade !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.naturalidade', <any>entidadePessoaEntityNaturalidade);
        }
        if (entidadePessoaEntityAvaliacao !== undefined && entidadePessoaEntityAvaliacao !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.avaliacao', <any>entidadePessoaEntityAvaliacao);
        }
        if (entidadePessoaEntityObservacao !== undefined && entidadePessoaEntityObservacao !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.observacao', <any>entidadePessoaEntityObservacao);
        }
        if (entidadePessoaEntityInativo !== undefined && entidadePessoaEntityInativo !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.inativo', <any>entidadePessoaEntityInativo);
        }
        if (entidadePessoaEntityRenda !== undefined && entidadePessoaEntityRenda !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.renda', <any>entidadePessoaEntityRenda);
        }
        if (entidadePessoaEntityLocalTrabalho !== undefined && entidadePessoaEntityLocalTrabalho !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.local_Trabalho', <any>entidadePessoaEntityLocalTrabalho);
        }
        if (entidadePessoaEntityFoneTrabalho !== undefined && entidadePessoaEntityFoneTrabalho !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.fone_Trabalho', <any>entidadePessoaEntityFoneTrabalho);
        }
        if (entidadePessoaEntityDataAdmissao !== undefined && entidadePessoaEntityDataAdmissao !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.data_Admissao', <any>entidadePessoaEntityDataAdmissao.toISOString());
        }
        if (entidadePessoaEntityReferencia1 !== undefined && entidadePessoaEntityReferencia1 !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.referencia1', <any>entidadePessoaEntityReferencia1);
        }
        if (entidadePessoaEntityReferencia2 !== undefined && entidadePessoaEntityReferencia2 !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.referencia2', <any>entidadePessoaEntityReferencia2);
        }
        if (entidadePessoaEntityReferencia3 !== undefined && entidadePessoaEntityReferencia3 !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.referencia3', <any>entidadePessoaEntityReferencia3);
        }
        if (entidadePessoaEntityDataCarga !== undefined && entidadePessoaEntityDataCarga !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.data_Carga', <any>entidadePessoaEntityDataCarga.toISOString());
        }
        if (entidadePessoaEntitySaldoDevedor !== undefined && entidadePessoaEntitySaldoDevedor !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.saldo_Devedor', <any>entidadePessoaEntitySaldoDevedor);
        }
        if (entidadePessoaEntityDiaPgto !== undefined && entidadePessoaEntityDiaPgto !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.dia_Pgto', <any>entidadePessoaEntityDiaPgto);
        }
        if (entidadePessoaEntityCidadeD !== undefined && entidadePessoaEntityCidadeD !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.cidade_D', <any>entidadePessoaEntityCidadeD);
        }
        if (entidadePessoaEntityUfD !== undefined && entidadePessoaEntityUfD !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.uf_D', <any>entidadePessoaEntityUfD);
        }
        if (entidadePessoaEntityBloq !== undefined && entidadePessoaEntityBloq !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.bloq', <any>entidadePessoaEntityBloq);
        }
        if (entidadePessoaEntityFormaPagamento !== undefined && entidadePessoaEntityFormaPagamento !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.forma_Pagamento', <any>entidadePessoaEntityFormaPagamento);
        }
        if (entidadePessoaEntityInformativo !== undefined && entidadePessoaEntityInformativo !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.informativo', <any>entidadePessoaEntityInformativo);
        }
        if (entidadePessoaEntityClasse !== undefined && entidadePessoaEntityClasse !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.classe', <any>entidadePessoaEntityClasse);
        }
        if (entidadePessoaEntityPrecoCusto !== undefined && entidadePessoaEntityPrecoCusto !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.preco_Custo', <any>entidadePessoaEntityPrecoCusto);
        }
        if (entidadePessoaEntitySenha !== undefined && entidadePessoaEntitySenha !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.senha', <any>entidadePessoaEntitySenha);
        }
        if (entidadePessoaEntityDescontoVenda !== undefined && entidadePessoaEntityDescontoVenda !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.desconto_Venda', <any>entidadePessoaEntityDescontoVenda);
        }
        if (entidadePessoaEntityDataCadastro !== undefined && entidadePessoaEntityDataCadastro !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.data_Cadastro', <any>entidadePessoaEntityDataCadastro.toISOString());
        }
        if (entidadePessoaEntityEmail !== undefined && entidadePessoaEntityEmail !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.email', <any>entidadePessoaEntityEmail);
        }
        if (entidadePessoaEntityContatoCliente !== undefined && entidadePessoaEntityContatoCliente !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.contato_Cliente', <any>entidadePessoaEntityContatoCliente);
        }
        if (entidadePessoaEntityNomeFantasia !== undefined && entidadePessoaEntityNomeFantasia !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.nome_Fantasia', <any>entidadePessoaEntityNomeFantasia);
        }
        if (entidadePessoaEntityFechamento !== undefined && entidadePessoaEntityFechamento !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.fechamento', <any>entidadePessoaEntityFechamento);
        }
        if (entidadePessoaEntityVenderPrecoCusto !== undefined && entidadePessoaEntityVenderPrecoCusto !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.vender_Preco_Custo', <any>entidadePessoaEntityVenderPrecoCusto);
        }
        if (entidadePessoaEntityValorCredito !== undefined && entidadePessoaEntityValorCredito !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.valor_Credito', <any>entidadePessoaEntityValorCredito);
        }
        if (entidadePessoaEntityObservacaoEndereco !== undefined && entidadePessoaEntityObservacaoEndereco !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.observacao_Endereco', <any>entidadePessoaEntityObservacaoEndereco);
        }
        if (entidadePessoaEntityApelido !== undefined && entidadePessoaEntityApelido !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.apelido', <any>entidadePessoaEntityApelido);
        }
        if (entidadePessoaEntityBloquearCrediario !== undefined && entidadePessoaEntityBloquearCrediario !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.bloquear_Crediario', <any>entidadePessoaEntityBloquearCrediario);
        }
        if (entidadePessoaEntityNumeroCalcado !== undefined && entidadePessoaEntityNumeroCalcado !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.numero_Calcado', <any>entidadePessoaEntityNumeroCalcado);
        }
        if (entidadePessoaEntityPontosFidelidade !== undefined && entidadePessoaEntityPontosFidelidade !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.pontos_Fidelidade', <any>entidadePessoaEntityPontosFidelidade);
        }
        if (entidadePessoaEntityCondicaoPagamento !== undefined && entidadePessoaEntityCondicaoPagamento !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.condicao_Pagamento', <any>entidadePessoaEntityCondicaoPagamento);
        }
        if (entidadePessoaEntityListaPadrao !== undefined && entidadePessoaEntityListaPadrao !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.lista_Padrao', <any>entidadePessoaEntityListaPadrao);
        }
        if (entidadePessoaEntityVenderTaxaGrupo !== undefined && entidadePessoaEntityVenderTaxaGrupo !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.vender_Taxa_Grupo', <any>entidadePessoaEntityVenderTaxaGrupo);
        }
        if (entidadePessoaEntityNCartao !== undefined && entidadePessoaEntityNCartao !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.n_Cartao', <any>entidadePessoaEntityNCartao);
        }
        if (entidadePessoaEntityGrupoFiscal !== undefined && entidadePessoaEntityGrupoFiscal !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.grupo_Fiscal', <any>entidadePessoaEntityGrupoFiscal);
        }
        if (entidadePessoaEntityProfissao !== undefined && entidadePessoaEntityProfissao !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.profissao', <any>entidadePessoaEntityProfissao);
        }
        if (entidadePessoaEntityNumeroCartao !== undefined && entidadePessoaEntityNumeroCartao !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.numero_Cartao', <any>entidadePessoaEntityNumeroCartao);
        }
        if (entidadePessoaEntityContaParticular !== undefined && entidadePessoaEntityContaParticular !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.conta_Particular', <any>entidadePessoaEntityContaParticular);
        }
        if (entidadePessoaEntityDuplicata !== undefined && entidadePessoaEntityDuplicata !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.duplicata', <any>entidadePessoaEntityDuplicata);
        }
        if (entidadePessoaEntityDataAlteracao !== undefined && entidadePessoaEntityDataAlteracao !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.data_Alteracao', <any>entidadePessoaEntityDataAlteracao.toISOString());
        }
        if (entidadePessoaEntityZonaVenda !== undefined && entidadePessoaEntityZonaVenda !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.zona_Venda', <any>entidadePessoaEntityZonaVenda);
        }
        if (entidadePessoaEntitySituacaoAfapi !== undefined && entidadePessoaEntitySituacaoAfapi !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.situacao_Afapi', <any>entidadePessoaEntitySituacaoAfapi);
        }
        if (entidadePessoaEntityDataUltimaVenda !== undefined && entidadePessoaEntityDataUltimaVenda !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.data_Ultima_Venda', <any>entidadePessoaEntityDataUltimaVenda.toISOString());
        }
        if (entidadePessoaEntityImpagavel !== undefined && entidadePessoaEntityImpagavel !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.impagavel', <any>entidadePessoaEntityImpagavel);
        }
        if (entidadePessoaEntityMatricula !== undefined && entidadePessoaEntityMatricula !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.matricula', <any>entidadePessoaEntityMatricula);
        }
        if (entidadePessoaEntityMensagemConvenio !== undefined && entidadePessoaEntityMensagemConvenio !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.mensagem_Convenio', <any>entidadePessoaEntityMensagemConvenio);
        }
        if (entidadePessoaEntityLimiteChequePendente !== undefined && entidadePessoaEntityLimiteChequePendente !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.limite_Cheque_Pendente', <any>entidadePessoaEntityLimiteChequePendente);
        }
        if (entidadePessoaEntityEnderecoPagamento !== undefined && entidadePessoaEntityEnderecoPagamento !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.endereco_Pagamento', <any>entidadePessoaEntityEnderecoPagamento);
        }
        if (entidadePessoaEntityFonePagamento !== undefined && entidadePessoaEntityFonePagamento !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.fone_Pagamento', <any>entidadePessoaEntityFonePagamento);
        }
        if (entidadePessoaEntityCepPagamento !== undefined && entidadePessoaEntityCepPagamento !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.cep_Pagamento', <any>entidadePessoaEntityCepPagamento);
        }
        if (entidadePessoaEntityBairroPagamento !== undefined && entidadePessoaEntityBairroPagamento !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.bairro_Pagamento', <any>entidadePessoaEntityBairroPagamento);
        }
        if (entidadePessoaEntityContatoPagamento !== undefined && entidadePessoaEntityContatoPagamento !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.contato_Pagamento', <any>entidadePessoaEntityContatoPagamento);
        }
        if (entidadePessoaEntityBloquearVendaCheque !== undefined && entidadePessoaEntityBloquearVendaCheque !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.bloquear_Venda_Cheque', <any>entidadePessoaEntityBloquearVendaCheque);
        }
        if (entidadePessoaEntitySexo !== undefined && entidadePessoaEntitySexo !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.sexo', <any>entidadePessoaEntitySexo);
        }
        if (entidadePessoaEntityBloquearConsignacao !== undefined && entidadePessoaEntityBloquearConsignacao !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.bloquear_Consignacao', <any>entidadePessoaEntityBloquearConsignacao);
        }
        if (entidadePessoaEntityLimiteConsignacao !== undefined && entidadePessoaEntityLimiteConsignacao !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.limite_Consignacao', <any>entidadePessoaEntityLimiteConsignacao);
        }
        if (entidadePessoaEntityEstadoCivil !== undefined && entidadePessoaEntityEstadoCivil !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.estado_Civil', <any>entidadePessoaEntityEstadoCivil);
        }
        if (entidadePessoaEntityNumeroSuframa !== undefined && entidadePessoaEntityNumeroSuframa !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.numero_Suframa', <any>entidadePessoaEntityNumeroSuframa);
        }
        if (entidadePessoaEntityFretePadrao !== undefined && entidadePessoaEntityFretePadrao !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.frete_Padrao', <any>entidadePessoaEntityFretePadrao);
        }
        if (entidadePessoaEntityPadrao !== undefined && entidadePessoaEntityPadrao !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.padrao', <any>entidadePessoaEntityPadrao);
        }
        if (entidadePessoaEntityRoteadorPuxou !== undefined && entidadePessoaEntityRoteadorPuxou !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.roteador_Puxou', <any>entidadePessoaEntityRoteadorPuxou);
        }
        if (entidadePessoaEntityDataExpedicaoRg !== undefined && entidadePessoaEntityDataExpedicaoRg !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.data_Expedicao_Rg', <any>entidadePessoaEntityDataExpedicaoRg.toISOString());
        }
        if (entidadePessoaEntityBloquearVenderOrcamento !== undefined && entidadePessoaEntityBloquearVenderOrcamento !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.bloquear_Vender_Orcamento', <any>entidadePessoaEntityBloquearVenderOrcamento);
        }
        if (entidadePessoaEntityConsumidorFinal !== undefined && entidadePessoaEntityConsumidorFinal !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.consumidor_Final', <any>entidadePessoaEntityConsumidorFinal);
        }
        if (entidadePessoaEntityIsFuncionario !== undefined && entidadePessoaEntityIsFuncionario !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.isFuncionario', <any>entidadePessoaEntityIsFuncionario);
        }
        if (entidadePessoaEntityComissionado !== undefined && entidadePessoaEntityComissionado !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.comissionado', <any>entidadePessoaEntityComissionado);
        }
        if (entidadePessoaEntityExibirObservacao !== undefined && entidadePessoaEntityExibirObservacao !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.exibir_Observacao', <any>entidadePessoaEntityExibirObservacao);
        }
        if (entidadePessoaEntityRegimeTributario !== undefined && entidadePessoaEntityRegimeTributario !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.regime_Tributario', <any>entidadePessoaEntityRegimeTributario);
        }
        if (entidadePessoaEntityClinicaIndicou !== undefined && entidadePessoaEntityClinicaIndicou !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.clinica_Indicou', <any>entidadePessoaEntityClinicaIndicou);
        }
        if (entidadePessoaEntityProfissionalIndicou !== undefined && entidadePessoaEntityProfissionalIndicou !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.profissional_Indicou', <any>entidadePessoaEntityProfissionalIndicou);
        }
        if (entidadePessoaEntityDataIndicacao !== undefined && entidadePessoaEntityDataIndicacao !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.data_Indicacao', <any>entidadePessoaEntityDataIndicacao.toISOString());
        }
        if (entidadePessoaEntityEnderecoEntrega !== undefined && entidadePessoaEntityEnderecoEntrega !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.endereco_Entrega', <any>entidadePessoaEntityEnderecoEntrega);
        }
        if (entidadePessoaEntityBairroEntrega !== undefined && entidadePessoaEntityBairroEntrega !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.bairro_Entrega', <any>entidadePessoaEntityBairroEntrega);
        }
        if (entidadePessoaEntityCidadeEntrega !== undefined && entidadePessoaEntityCidadeEntrega !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.cidade_Entrega', <any>entidadePessoaEntityCidadeEntrega);
        }
        if (entidadePessoaEntityFoneEntrega !== undefined && entidadePessoaEntityFoneEntrega !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.fone_Entrega', <any>entidadePessoaEntityFoneEntrega);
        }
        if (entidadePessoaEntityContatoEntrega !== undefined && entidadePessoaEntityContatoEntrega !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.contato_Entrega', <any>entidadePessoaEntityContatoEntrega);
        }
        if (entidadePessoaEntityCepEntrega !== undefined && entidadePessoaEntityCepEntrega !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.cep_Entrega', <any>entidadePessoaEntityCepEntrega);
        }
        if (entidadePessoaEntityValorFrete !== undefined && entidadePessoaEntityValorFrete !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.valor_Frete', <any>entidadePessoaEntityValorFrete);
        }
        if (entidadePessoaEntityBanco !== undefined && entidadePessoaEntityBanco !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.banco', <any>entidadePessoaEntityBanco);
        }
        if (entidadePessoaEntityAgencia !== undefined && entidadePessoaEntityAgencia !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.agencia', <any>entidadePessoaEntityAgencia);
        }
        if (entidadePessoaEntityAgenciaDV !== undefined && entidadePessoaEntityAgenciaDV !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.agencia_DV', <any>entidadePessoaEntityAgenciaDV);
        }
        if (entidadePessoaEntityConta !== undefined && entidadePessoaEntityConta !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.conta', <any>entidadePessoaEntityConta);
        }
        if (entidadePessoaEntityContaDV !== undefined && entidadePessoaEntityContaDV !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.conta_DV', <any>entidadePessoaEntityContaDV);
        }
        if (entidadePessoaEntityTransportadora !== undefined && entidadePessoaEntityTransportadora !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.transportadora', <any>entidadePessoaEntityTransportadora);
        }
        if (entidadePessoaEntityBloquearVendaDinheiro !== undefined && entidadePessoaEntityBloquearVendaDinheiro !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.bloquear_Venda_Dinheiro', <any>entidadePessoaEntityBloquearVendaDinheiro);
        }
        if (entidadePessoaEntityBloquearAlterarDependente !== undefined && entidadePessoaEntityBloquearAlterarDependente !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.bloquear_Alterar_Dependente', <any>entidadePessoaEntityBloquearAlterarDependente);
        }
        if (entidadePessoaEntityBloquearAlterarPlaca !== undefined && entidadePessoaEntityBloquearAlterarPlaca !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.bloquear_Alterar_Placa', <any>entidadePessoaEntityBloquearAlterarPlaca);
        }
        if (entidadePessoaEntityComissao !== undefined && entidadePessoaEntityComissao !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.comissao', <any>entidadePessoaEntityComissao);
        }
        if (entidadePessoaEntityValorChequePendente !== undefined && entidadePessoaEntityValorChequePendente !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.valor_Cheque_Pendente', <any>entidadePessoaEntityValorChequePendente);
        }
        if (entidadePessoaEntityBloquearPontoFidelidade !== undefined && entidadePessoaEntityBloquearPontoFidelidade !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.bloquear_Ponto_Fidelidade', <any>entidadePessoaEntityBloquearPontoFidelidade);
        }
        if (entidadePessoaEntityComplemento !== undefined && entidadePessoaEntityComplemento !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.complemento', <any>entidadePessoaEntityComplemento);
        }
        if (entidadePessoaEntityMatriz !== undefined && entidadePessoaEntityMatriz !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.matriz', <any>entidadePessoaEntityMatriz);
        }
        if (entidadePessoaEntitySituacaoOrcamento !== undefined && entidadePessoaEntitySituacaoOrcamento !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.situacao_Orcamento', <any>entidadePessoaEntitySituacaoOrcamento);
        }
        if (entidadePessoaEntityZonaEntrega !== undefined && entidadePessoaEntityZonaEntrega !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.zona_Entrega', <any>entidadePessoaEntityZonaEntrega);
        }
        if (entidadePessoaEntityBloquearVendaSemKm !== undefined && entidadePessoaEntityBloquearVendaSemKm !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.bloquear_Venda_Sem_Km', <any>entidadePessoaEntityBloquearVendaSemKm);
        }
        if (entidadePessoaEntityEmpresaOrigem !== undefined && entidadePessoaEntityEmpresaOrigem !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.empresa_Origem', <any>entidadePessoaEntityEmpresaOrigem);
        }
        if (entidadePessoaEntityEmpresasOng) {
            entidadePessoaEntityEmpresasOng.forEach((element) => {
                queryParameters = queryParameters.append('Entidade.pessoaEntity.empresas_Ong', <any>element);
            })
        }
        if (entidadePessoaEntityObs !== undefined && entidadePessoaEntityObs !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.obs', <any>entidadePessoaEntityObs);
        }
        if (entidadePessoaEntityBloquearTicket !== undefined && entidadePessoaEntityBloquearTicket !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.bloquear_Ticket', <any>entidadePessoaEntityBloquearTicket);
        }
        if (entidadePessoaEntityBloquearCartao !== undefined && entidadePessoaEntityBloquearCartao !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.bloquear_Cartao', <any>entidadePessoaEntityBloquearCartao);
        }
        if (entidadePessoaEntityInscricaoMunicipal !== undefined && entidadePessoaEntityInscricaoMunicipal !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.inscricao_Municipal', <any>entidadePessoaEntityInscricaoMunicipal);
        }
        if (entidadePessoaEntityContribuinteIcms !== undefined && entidadePessoaEntityContribuinteIcms !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.contribuinte_Icms', <any>entidadePessoaEntityContribuinteIcms);
        }
        if (entidadePessoaEntityEmailsPromocionais !== undefined && entidadePessoaEntityEmailsPromocionais !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.emails_Promocionais', <any>entidadePessoaEntityEmailsPromocionais);
        }
        if (entidadePessoaEntityTitularContaCorrente !== undefined && entidadePessoaEntityTitularContaCorrente !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.titular_Conta_Corrente', <any>entidadePessoaEntityTitularContaCorrente);
        }
        if (entidadePessoaEntityOperacaoContaCorrente !== undefined && entidadePessoaEntityOperacaoContaCorrente !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.operacao_Conta_Corrente', <any>entidadePessoaEntityOperacaoContaCorrente);
        }
        if (entidadePessoaEntityTipoContaCorrente !== undefined && entidadePessoaEntityTipoContaCorrente !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.tipo_Conta_Corrente', <any>entidadePessoaEntityTipoContaCorrente);
        }
        if (entidadePessoaEntityDDDCelular !== undefined && entidadePessoaEntityDDDCelular !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.dDD_Celular', <any>entidadePessoaEntityDDDCelular);
        }
        if (entidadePessoaEntityNumeroCelular !== undefined && entidadePessoaEntityNumeroCelular !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.numero_Celular', <any>entidadePessoaEntityNumeroCelular);
        }
        if (entidadePessoaEntityBloquearCredito !== undefined && entidadePessoaEntityBloquearCredito !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.bloquear_Credito', <any>entidadePessoaEntityBloquearCredito);
        }
        if (entidadePessoaEntityClinica !== undefined && entidadePessoaEntityClinica !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.clinica', <any>entidadePessoaEntityClinica);
        }
        if (entidadePessoaEntityIsOng !== undefined && entidadePessoaEntityIsOng !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.isOng', <any>entidadePessoaEntityIsOng);
        }
        if (entidadePessoaEntityCelular !== undefined && entidadePessoaEntityCelular !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.celular', <any>entidadePessoaEntityCelular);
        }
        if (entidadePessoaEntityAssinaturaPessoa !== undefined && entidadePessoaEntityAssinaturaPessoa !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.assinatura._Pessoa', <any>entidadePessoaEntityAssinaturaPessoa);
        }
        if (entidadePessoaEntityAssinaturaAssinatura !== undefined && entidadePessoaEntityAssinaturaAssinatura !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.assinatura._Assinatura', <any>entidadePessoaEntityAssinaturaAssinatura);
        }
        if (entidadePessoaEntityAssinaturaPreencheuClasse !== undefined && entidadePessoaEntityAssinaturaPreencheuClasse !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.assinatura._PreencheuClasse', <any>entidadePessoaEntityAssinaturaPreencheuClasse);
        }
        if (entidadePessoaEntityAssinaturaIsInativo !== undefined && entidadePessoaEntityAssinaturaIsInativo !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.assinatura._IsInativo', <any>entidadePessoaEntityAssinaturaIsInativo);
        }
        if (entidadePessoaEntityAssinaturaIgnorarDuplicidade !== undefined && entidadePessoaEntityAssinaturaIgnorarDuplicidade !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.assinatura._IgnorarDuplicidade', <any>entidadePessoaEntityAssinaturaIgnorarDuplicidade);
        }
        if (entidadePessoaEntityCodigoTOTVS !== undefined && entidadePessoaEntityCodigoTOTVS !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.codigo_TOTVS', <any>entidadePessoaEntityCodigoTOTVS);
        }
        if (entidadePessoaEntityContaIntegracaoContabil !== undefined && entidadePessoaEntityContaIntegracaoContabil !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.conta_Integracao_Contabil', <any>entidadePessoaEntityContaIntegracaoContabil);
        }
        if (entidadePessoaEntityStoomClienteID !== undefined && entidadePessoaEntityStoomClienteID !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.stoom_Cliente_ID', <any>entidadePessoaEntityStoomClienteID);
        }
        if (entidadePessoaEntityStoomClienteToken !== undefined && entidadePessoaEntityStoomClienteToken !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.stoom_Cliente_Token', <any>entidadePessoaEntityStoomClienteToken);
        }
        if (entidadePessoaEntityIgnorarValidacaoCPF !== undefined && entidadePessoaEntityIgnorarValidacaoCPF !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.ignorarValidacaoCPF', <any>entidadePessoaEntityIgnorarValidacaoCPF);
        }
        if (entidadePessoaEntityCamposValor) {
            entidadePessoaEntityCamposValor.forEach((element) => {
                queryParameters = queryParameters.append('Entidade.pessoaEntity.campos_Valor', <any>element);
            })
        }
        if (entidadePessoaEntityProdutosContinuos) {
            entidadePessoaEntityProdutosContinuos.forEach((element) => {
                queryParameters = queryParameters.append('Entidade.pessoaEntity.produtos_Continuos', <any>element);
            })
        }
        if (entidadePessoaEntityGrupoFornecedorContabil !== undefined && entidadePessoaEntityGrupoFornecedorContabil !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.grupo_Fornecedor_Contabil', <any>entidadePessoaEntityGrupoFornecedorContabil);
        }
        if (entidadePessoaEntitySujeitoPassivo !== undefined && entidadePessoaEntitySujeitoPassivo !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.sujeito_Passivo', <any>entidadePessoaEntitySujeitoPassivo);
        }
        if (entidadePessoaEntityIdIFood !== undefined && entidadePessoaEntityIdIFood !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.id_IFood', <any>entidadePessoaEntityIdIFood);
        }
        if (entidadePessoaEntityPreencheuClasse !== undefined && entidadePessoaEntityPreencheuClasse !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.preencheuClasse', <any>entidadePessoaEntityPreencheuClasse);
        }
        if (entidadePessoaEntityIsInativo !== undefined && entidadePessoaEntityIsInativo !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.isInativo', <any>entidadePessoaEntityIsInativo);
        }
        if (entidadePessoaEntityIgnorarDuplicidade !== undefined && entidadePessoaEntityIgnorarDuplicidade !== null) {
            queryParameters = queryParameters.set('Entidade.pessoaEntity.ignorarDuplicidade', <any>entidadePessoaEntityIgnorarDuplicidade);
        }
        if (entidadePreencheuClasse !== undefined && entidadePreencheuClasse !== null) {
            queryParameters = queryParameters.set('Entidade.preencheuClasse', <any>entidadePreencheuClasse);
        }
        if (entidadeIsInativo !== undefined && entidadeIsInativo !== null) {
            queryParameters = queryParameters.set('Entidade.isInativo', <any>entidadeIsInativo);
        }
        if (entidadeIgnorarDuplicidade !== undefined && entidadeIgnorarDuplicidade !== null) {
            queryParameters = queryParameters.set('Entidade.ignorarDuplicidade', <any>entidadeIgnorarDuplicidade);
        }
        if (parametrosAdicionaisParametros) {
            parametrosAdicionaisParametros.forEach((element) => {
                queryParameters = queryParameters.append('ParametrosAdicionais.parametros', <any>element);
            })
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<any>(`${this.basePath}/TesteAngular/Gravar`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public testeAngularHtml(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public testeAngularHtml(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public testeAngularHtml(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public testeAngularHtml(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/api/TesteAngular/Html`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public testeAngularHtml_2(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public testeAngularHtml_2(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public testeAngularHtml_2(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public testeAngularHtml_2(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/TesteAngular/Html`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public testeAngularIndex(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public testeAngularIndex(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public testeAngularIndex(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public testeAngularIndex(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/api/TesteAngular/Index`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public testeAngularIndex_3(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public testeAngularIndex_3(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public testeAngularIndex_3(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public testeAngularIndex_3(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/TesteAngular/Index`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public testeAngularJS(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public testeAngularJS(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public testeAngularJS(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public testeAngularJS(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/api/TesteAngular/JS`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public testeAngularJS_4(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public testeAngularJS_4(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public testeAngularJS_4(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public testeAngularJS_4(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/TesteAngular/JS`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param parametros 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public testeAngularObterPorCodigo(parametros: SismouraWebViewMouraPageAngularFullLogadaCadastroControllerObterPorCodigoEntradaSiSMouraCoreEntityClienteSiSMouraCoreBusinessClienteBLL, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public testeAngularObterPorCodigo(parametros: SismouraWebViewMouraPageAngularFullLogadaCadastroControllerObterPorCodigoEntradaSiSMouraCoreEntityClienteSiSMouraCoreBusinessClienteBLL, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public testeAngularObterPorCodigo(parametros: SismouraWebViewMouraPageAngularFullLogadaCadastroControllerObterPorCodigoEntradaSiSMouraCoreEntityClienteSiSMouraCoreBusinessClienteBLL, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public testeAngularObterPorCodigo(parametros: SismouraWebViewMouraPageAngularFullLogadaCadastroControllerObterPorCodigoEntradaSiSMouraCoreEntityClienteSiSMouraCoreBusinessClienteBLL, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (parametros === null || parametros === undefined) {
            throw new Error('Required parameter parametros was null or undefined when calling testeAngularObterPorCodigo.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/api/TesteAngular/ObterPorCodigo`,
            parametros,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param parametros 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public testeAngularObterPorCodigo_5(parametros: SismouraWebViewMouraPageAngularFullLogadaCadastroControllerObterPorCodigoEntradaSiSMouraCoreEntityClienteSiSMouraCoreBusinessClienteBLL, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public testeAngularObterPorCodigo_5(parametros: SismouraWebViewMouraPageAngularFullLogadaCadastroControllerObterPorCodigoEntradaSiSMouraCoreEntityClienteSiSMouraCoreBusinessClienteBLL, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public testeAngularObterPorCodigo_5(parametros: SismouraWebViewMouraPageAngularFullLogadaCadastroControllerObterPorCodigoEntradaSiSMouraCoreEntityClienteSiSMouraCoreBusinessClienteBLL, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public testeAngularObterPorCodigo_5(parametros: SismouraWebViewMouraPageAngularFullLogadaCadastroControllerObterPorCodigoEntradaSiSMouraCoreEntityClienteSiSMouraCoreBusinessClienteBLL, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (parametros === null || parametros === undefined) {
            throw new Error('Required parameter parametros was null or undefined when calling testeAngularObterPorCodigo_5.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/TesteAngular/ObterPorCodigo`,
            parametros,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param conteudo 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public testeAngularPreparacaoConteudo(conteudo: string, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public testeAngularPreparacaoConteudo(conteudo: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public testeAngularPreparacaoConteudo(conteudo: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public testeAngularPreparacaoConteudo(conteudo: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (conteudo === null || conteudo === undefined) {
            throw new Error('Required parameter conteudo was null or undefined when calling testeAngularPreparacaoConteudo.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (conteudo !== undefined && conteudo !== null) {
            queryParameters = queryParameters.set('conteudo', <any>conteudo);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<string>(`${this.basePath}/api/TesteAngular/PreparacaoConteudo`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param conteudo 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public testeAngularPreparacaoConteudo_6(conteudo: string, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public testeAngularPreparacaoConteudo_6(conteudo: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public testeAngularPreparacaoConteudo_6(conteudo: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public testeAngularPreparacaoConteudo_6(conteudo: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (conteudo === null || conteudo === undefined) {
            throw new Error('Required parameter conteudo was null or undefined when calling testeAngularPreparacaoConteudo_6.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (conteudo !== undefined && conteudo !== null) {
            queryParameters = queryParameters.set('conteudo', <any>conteudo);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<string>(`${this.basePath}/TesteAngular/PreparacaoConteudo`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param nome 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public testeAngularTeste(nome: string, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public testeAngularTeste(nome: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public testeAngularTeste(nome: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public testeAngularTeste(nome: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (nome === null || nome === undefined) {
            throw new Error('Required parameter nome was null or undefined when calling testeAngularTeste.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (nome !== undefined && nome !== null) {
            queryParameters = queryParameters.set('nome', <any>nome);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<string>(`${this.basePath}/api/TesteAngular/Teste`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param nome 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public testeAngularTeste_7(nome: string, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public testeAngularTeste_7(nome: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public testeAngularTeste_7(nome: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public testeAngularTeste_7(nome: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (nome === null || nome === undefined) {
            throw new Error('Required parameter nome was null or undefined when calling testeAngularTeste_7.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (nome !== undefined && nome !== null) {
            queryParameters = queryParameters.set('nome', <any>nome);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<string>(`${this.basePath}/TesteAngular/Teste`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
